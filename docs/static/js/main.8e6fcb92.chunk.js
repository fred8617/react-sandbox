(this.webpackJsonprsb=this.webpackJsonprsb||[]).push([[2],{388:function(e,n,t){},473:function(e,n,t){},474:function(e,n){function t(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id=474},573:function(e){e.exports=JSON.parse('{"version":"4.12.0","types":{"antd/affix/index.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport interface AffixProps {\\n    /** \u8ddd\u79bb\u7a97\u53e3\u9876\u90e8\u8fbe\u5230\u6307\u5b9a\u504f\u79fb\u91cf\u540e\u89e6\u53d1 */\\n    offsetTop?: number;\\n    /** \u8ddd\u79bb\u7a97\u53e3\u5e95\u90e8\u8fbe\u5230\u6307\u5b9a\u504f\u79fb\u91cf\u540e\u89e6\u53d1 */\\n    offsetBottom?: number;\\n    style?: React.CSSProperties;\\n    /** \u56fa\u5b9a\u72b6\u6001\u6539\u53d8\u65f6\u89e6\u53d1\u7684\u56de\u8c03\u51fd\u6570 */\\n    onChange?: (affixed?: boolean) => void;\\n    /** \u8bbe\u7f6e Affix \u9700\u8981\u76d1\u542c\u5176\u6eda\u52a8\u4e8b\u4ef6\u7684\u5143\u7d20\uff0c\u503c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u5bf9\u5e94 DOM \u5143\u7d20\u7684\u51fd\u6570 */\\n    target?: () => Window | HTMLElement | null;\\n    prefixCls?: string;\\n    className?: string;\\n    children: React.ReactNode;\\n}\\ndeclare enum AffixStatus {\\n    None = 0,\\n    Prepare = 1\\n}\\nexport interface AffixState {\\n    affixStyle?: React.CSSProperties;\\n    placeholderStyle?: React.CSSProperties;\\n    status: AffixStatus;\\n    lastAffix: boolean;\\n    prevTarget: Window | HTMLElement | null;\\n}\\ndeclare class Affix extends React.Component<AffixProps, AffixState> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    state: AffixState;\\n    placeholderNode: HTMLDivElement;\\n    fixedNode: HTMLDivElement;\\n    private timeout;\\n    context: ConfigConsumerProps;\\n    private getTargetFunc;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: AffixProps): void;\\n    componentWillUnmount(): void;\\n    getOffsetTop: () => number | undefined;\\n    getOffsetBottom: () => number | undefined;\\n    savePlaceholderNode: (node: HTMLDivElement) => void;\\n    saveFixedNode: (node: HTMLDivElement) => void;\\n    measure: () => void;\\n    prepareMeasure: () => void;\\n    updatePosition(): void;\\n    lazyUpdatePosition(): void;\\n    render: () => JSX.Element;\\n}\\nexport default Affix;\\n","antd/affix/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/affix/utils.d.ts":"import Affix from \'.\';\\nexport declare type BindElement = HTMLElement | Window | null | undefined;\\nexport declare type Rect = ClientRect | DOMRect;\\nexport declare function getTargetRect(target: BindElement): ClientRect;\\nexport declare function getFixedTop(placeholderReact: Rect, targetRect: Rect, offsetTop: number | undefined): number | undefined;\\nexport declare function getFixedBottom(placeholderReact: Rect, targetRect: Rect, offsetBottom: number | undefined): number | undefined;\\ninterface ObserverEntity {\\n    target: HTMLElement | Window;\\n    affixList: Affix[];\\n    eventHandlers: {\\n        [eventName: string]: any;\\n    };\\n}\\nexport declare function getObserverEntities(): ObserverEntity[];\\nexport declare function addObserveTarget(target: HTMLElement | Window | null, affix: Affix): void;\\nexport declare function removeObserveTarget(affix: Affix): void;\\nexport {};\\n","antd/alert/ErrorBoundary.d.ts":"import * as React from \'react\';\\ninterface ErrorBoundaryProps {\\n    message?: React.ReactNode;\\n    description?: React.ReactNode;\\n}\\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, {\\n    error?: Error | null;\\n    info: {\\n        componentStack?: string;\\n    };\\n}> {\\n    state: {\\n        error: undefined;\\n        info: {\\n            componentStack: string;\\n        };\\n    };\\n    componentDidCatch(error: Error | null, info: object): void;\\n    render(): {} | null | undefined;\\n}\\nexport {};\\n","antd/alert/index.d.ts":"import * as React from \'react\';\\nimport ErrorBoundary from \'./ErrorBoundary\';\\nexport interface AlertProps {\\n    /** Type of Alert styles, options:`success`, `info`, `warning`, `error` */\\n    type?: \'success\' | \'info\' | \'warning\' | \'error\';\\n    /** Whether Alert can be closed */\\n    closable?: boolean;\\n    /** Close text to show */\\n    closeText?: React.ReactNode;\\n    /** Content of Alert */\\n    message: React.ReactNode;\\n    /** Additional content of Alert */\\n    description?: React.ReactNode;\\n    /** Callback when close Alert */\\n    onClose?: React.MouseEventHandler<HTMLButtonElement>;\\n    /** Trigger when animation ending of Alert */\\n    afterClose?: () => void;\\n    /** Whether to show icon */\\n    showIcon?: boolean;\\n    /** https://www.w3.org/TR/2014/REC-html5-20141028/dom.html#aria-role-attribute */\\n    role?: string;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    banner?: boolean;\\n    icon?: React.ReactNode;\\n    action?: React.ReactNode;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n    onClick?: React.MouseEventHandler<HTMLDivElement>;\\n}\\ninterface AlertInterface extends React.FC<AlertProps> {\\n    ErrorBoundary: typeof ErrorBoundary;\\n}\\ndeclare const Alert: AlertInterface;\\nexport default Alert;\\n","antd/alert/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/anchor/Anchor.d.ts":"import * as React from \'react\';\\nimport AnchorLink from \'./AnchorLink\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport declare type AnchorContainer = HTMLElement | Window;\\nexport interface AnchorProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    offsetTop?: number;\\n    bounds?: number;\\n    affix?: boolean;\\n    showInkInFixed?: boolean;\\n    getContainer?: () => AnchorContainer;\\n    /** Return customize highlight anchor */\\n    getCurrentAnchor?: () => string;\\n    onClick?: (e: React.MouseEvent<HTMLElement>, link: {\\n        title: React.ReactNode;\\n        href: string;\\n    }) => void;\\n    /** Scroll to target offset value, if none, it\'s offsetTop prop value or 0. */\\n    targetOffset?: number;\\n    /** Listening event when scrolling change active link */\\n    onChange?: (currentActiveLink: string) => void;\\n}\\nexport interface AnchorState {\\n    activeLink: null | string;\\n}\\nexport interface AnchorDefaultProps extends AnchorProps {\\n    prefixCls: string;\\n    affix: boolean;\\n    showInkInFixed: boolean;\\n    getContainer: () => AnchorContainer;\\n}\\nexport interface AntAnchor {\\n    registerLink: (link: string) => void;\\n    unregisterLink: (link: string) => void;\\n    activeLink: string | null;\\n    scrollTo: (link: string) => void;\\n    onClick?: (e: React.MouseEvent<HTMLElement>, link: {\\n        title: React.ReactNode;\\n        href: string;\\n    }) => void;\\n}\\nexport default class Anchor extends React.Component<AnchorProps, AnchorState, ConfigConsumerProps> {\\n    static Link: typeof AnchorLink;\\n    static defaultProps: {\\n        affix: boolean;\\n        showInkInFixed: boolean;\\n    };\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    state: {\\n        activeLink: null;\\n    };\\n    content: ConfigConsumerProps;\\n    private wrapperRef;\\n    private inkNode;\\n    private scrollContainer;\\n    private links;\\n    private scrollEvent;\\n    private animating;\\n    private prefixCls?;\\n    registerLink: (link: string) => void;\\n    unregisterLink: (link: string) => void;\\n    getContainer: () => any;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    getCurrentAnchor(offsetTop?: number, bounds?: number): string;\\n    handleScrollTo: (link: string) => void;\\n    saveInkNode: (node: HTMLSpanElement) => void;\\n    setCurrentActiveLink: (link: string) => void;\\n    handleScroll: () => void;\\n    updateInk: () => void;\\n    render: () => JSX.Element;\\n}\\n","antd/anchor/AnchorLink.d.ts":"import * as React from \'react\';\\nimport { AntAnchor } from \'./Anchor\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport interface AnchorLinkProps {\\n    prefixCls?: string;\\n    href: string;\\n    target?: string;\\n    title: React.ReactNode;\\n    children?: React.ReactNode;\\n    className?: string;\\n}\\ndeclare class AnchorLink extends React.Component<AnchorLinkProps, any, AntAnchor> {\\n    static defaultProps: {\\n        href: string;\\n    };\\n    static contextType: React.Context<AntAnchor>;\\n    context: AntAnchor;\\n    componentDidMount(): void;\\n    componentDidUpdate({ href: prevHref }: AnchorLinkProps): void;\\n    componentWillUnmount(): void;\\n    handleClick: (e: React.MouseEvent<HTMLElement>) => void;\\n    renderAnchorLink: ({ getPrefixCls }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default AnchorLink;\\n","antd/anchor/context.d.ts":"import * as React from \'react\';\\nimport { AntAnchor } from \'./Anchor\';\\ndeclare const AnchorContext: React.Context<AntAnchor>;\\nexport default AnchorContext;\\n","antd/anchor/index.d.ts":"import Anchor from \'./Anchor\';\\nexport { AnchorProps } from \'./Anchor\';\\nexport { AnchorLinkProps } from \'./AnchorLink\';\\nexport default Anchor;\\n","antd/anchor/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../affix/style\';\\n","antd/auto-complete/index.d.ts":"/**\\n * TODO: 4.0\\n *\\n * - Remove `dataSource`\\n * - `size` not work with customizeInput\\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\\n */\\nimport * as React from \'react\';\\nimport { InternalSelectProps, OptionType, RefSelectProps } from \'../select\';\\nexport interface DataSourceItemObject {\\n    value: string;\\n    text: string;\\n}\\nexport declare type DataSourceItemType = DataSourceItemObject | React.ReactNode;\\nexport interface AutoCompleteProps extends Omit<InternalSelectProps<string>, \'inputIcon\' | \'loading\' | \'mode\' | \'optionLabelProp\' | \'labelInValue\'> {\\n    dataSource?: DataSourceItemType[];\\n}\\ndeclare const RefAutoComplete: React.ForwardRefExoticComponent<AutoCompleteProps & React.RefAttributes<RefSelectProps>>;\\ndeclare type RefAutoCompleteWithOption = typeof RefAutoComplete & {\\n    Option: OptionType;\\n};\\ndeclare const _default: RefAutoCompleteWithOption;\\nexport default _default;\\n","antd/auto-complete/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\n","antd/avatar/avatar.d.ts":"import * as React from \'react\';\\nimport { AvatarSize } from \'./SizeContext\';\\nexport interface AvatarProps {\\n    /** Shape of avatar, options:`circle`, `square` */\\n    shape?: \'circle\' | \'square\';\\n    size?: AvatarSize;\\n    gap?: number;\\n    /** Src of image avatar */\\n    src?: React.ReactNode;\\n    /** Srcset of image avatar */\\n    srcSet?: string;\\n    draggable?: boolean;\\n    /** Icon to be used in avatar */\\n    icon?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    children?: React.ReactNode;\\n    alt?: string;\\n    onError?: () => boolean;\\n}\\ndeclare const Avatar: React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<unknown>>;\\nexport default Avatar;\\n","antd/avatar/group.d.ts":"import * as React from \'react\';\\nimport { AvatarSize } from \'./SizeContext\';\\nexport interface GroupProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    maxCount?: number;\\n    maxStyle?: React.CSSProperties;\\n    maxPopoverPlacement?: \'top\' | \'bottom\';\\n    size?: AvatarSize;\\n}\\ndeclare const Group: React.FC<GroupProps>;\\nexport default Group;\\n","antd/avatar/index.d.ts":"import * as React from \'react\';\\nimport { AvatarProps } from \'./avatar\';\\nimport Group from \'./group\';\\nexport { AvatarProps } from \'./avatar\';\\nexport { GroupProps } from \'./group\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n}\\ndeclare const Avatar: CompoundedComponent;\\nexport { Group };\\nexport default Avatar;\\n","antd/avatar/SizeContext.d.ts":"import * as React from \'react\';\\nimport { ScreenSizeMap } from \'../_util/responsiveObserve\';\\nexport declare type AvatarSize = \'large\' | \'small\' | \'default\' | number | ScreenSizeMap;\\ndeclare const SizeContext: React.Context<AvatarSize>;\\nexport interface SizeContextProps {\\n    size?: AvatarSize;\\n}\\nexport declare const SizeContextProvider: React.FC<SizeContextProps>;\\nexport default SizeContext;\\n","antd/avatar/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../popover/style\';\\n","antd/back-top/index.d.ts":"import * as React from \'react\';\\nexport interface BackTopProps {\\n    visibilityHeight?: number;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    target?: () => HTMLElement | Window | Document;\\n    prefixCls?: string;\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    duration?: number;\\n    visible?: boolean;\\n}\\ndeclare const _default: React.NamedExoticComponent<BackTopProps>;\\nexport default _default;\\n","antd/back-top/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/badge/index.d.ts":"import * as React from \'react\';\\nimport Ribbon from \'./Ribbon\';\\nimport { PresetColorType, PresetStatusColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { ScrollNumberProps } from \'./ScrollNumber\';\\ninterface CompoundedComponent extends React.FC<BadgeProps> {\\n    Ribbon: typeof Ribbon;\\n}\\nexport interface BadgeProps {\\n    /** Number to show in badge */\\n    count?: React.ReactNode;\\n    showZero?: boolean;\\n    /** Max count to show */\\n    overflowCount?: number;\\n    /** Whether to show red dot without number */\\n    dot?: boolean;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    scrollNumberPrefixCls?: string;\\n    className?: string;\\n    status?: PresetStatusColorType;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    text?: React.ReactNode;\\n    size?: \'default\' | \'small\';\\n    offset?: [number | string, number | string];\\n    title?: string;\\n}\\ndeclare const Badge: CompoundedComponent;\\nexport default Badge;\\n","antd/badge/Ribbon.d.ts":"import * as React from \'react\';\\nimport { LiteralUnion } from \'../_util/type\';\\nimport { PresetColorType } from \'../_util/colors\';\\ndeclare type RibbonPlacement = \'start\' | \'end\';\\nexport interface RibbonProps {\\n    className?: string;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    text?: React.ReactNode;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    children?: React.ReactNode;\\n    placement?: RibbonPlacement;\\n}\\ndeclare const Ribbon: React.FC<RibbonProps>;\\nexport default Ribbon;\\n","antd/badge/ScrollNumber.d.ts":"import * as React from \'react\';\\nexport interface ScrollNumberProps {\\n    prefixCls?: string;\\n    className?: string;\\n    motionClassName?: string;\\n    count?: string | number | null;\\n    children?: React.ReactElement<HTMLElement>;\\n    component?: string;\\n    style?: React.CSSProperties;\\n    title?: string | number | null;\\n    show: boolean;\\n}\\nexport interface ScrollNumberState {\\n    animateStarted?: boolean;\\n    count?: string | number | null;\\n}\\ndeclare const ScrollNumber: React.FC<ScrollNumberProps>;\\nexport default ScrollNumber;\\n","antd/badge/SingleNumber.d.ts":"/// <reference types=\\"react\\" />\\nexport interface UnitNumberProps {\\n    prefixCls: string;\\n    value: string | number;\\n    offset?: number;\\n    current?: boolean;\\n}\\nexport interface SingleNumberProps {\\n    prefixCls: string;\\n    value: string;\\n    count: number;\\n}\\nexport default function SingleNumber(props: SingleNumberProps): JSX.Element;\\n","antd/badge/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/badge/utils.d.ts":"export declare function isPresetColor(color?: string): boolean;\\n","antd/breadcrumb/Breadcrumb.d.ts":"import * as React from \'react\';\\nimport BreadcrumbItem from \'./BreadcrumbItem\';\\nimport BreadcrumbSeparator from \'./BreadcrumbSeparator\';\\nimport { Omit } from \'../_util/type\';\\nexport interface Route {\\n    path: string;\\n    breadcrumbName: string;\\n    children?: Omit<Route, \'children\'>[];\\n}\\nexport interface BreadcrumbProps {\\n    prefixCls?: string;\\n    routes?: Route[];\\n    params?: any;\\n    separator?: React.ReactNode;\\n    itemRender?: (route: Route, params: any, routes: Array<Route>, paths: Array<string>) => React.ReactNode;\\n    style?: React.CSSProperties;\\n    className?: string;\\n}\\ninterface BreadcrumbInterface extends React.FC<BreadcrumbProps> {\\n    Item: typeof BreadcrumbItem;\\n    Separator: typeof BreadcrumbSeparator;\\n}\\ndeclare const Breadcrumb: BreadcrumbInterface;\\nexport default Breadcrumb;\\n","antd/breadcrumb/BreadcrumbItem.d.ts":"import * as React from \'react\';\\nimport { DropDownProps } from \'../dropdown/dropdown\';\\nexport interface BreadcrumbItemProps {\\n    prefixCls?: string;\\n    separator?: React.ReactNode;\\n    href?: string;\\n    overlay?: DropDownProps[\'overlay\'];\\n    dropdownProps?: DropDownProps;\\n    onClick?: React.MouseEventHandler<HTMLAnchorElement | HTMLSpanElement>;\\n    className?: string;\\n}\\ninterface BreadcrumbItemInterface extends React.FC<BreadcrumbItemProps> {\\n    __ANT_BREADCRUMB_ITEM: boolean;\\n}\\ndeclare const BreadcrumbItem: BreadcrumbItemInterface;\\nexport default BreadcrumbItem;\\n","antd/breadcrumb/BreadcrumbSeparator.d.ts":"import * as React from \'react\';\\ninterface BreadcrumbSeparatorInterface extends React.FC {\\n    __ANT_BREADCRUMB_SEPARATOR: boolean;\\n}\\ndeclare const BreadcrumbSeparator: BreadcrumbSeparatorInterface;\\nexport default BreadcrumbSeparator;\\n","antd/breadcrumb/index.d.ts":"import Breadcrumb from \'./Breadcrumb\';\\nexport { BreadcrumbProps } from \'./Breadcrumb\';\\nexport { BreadcrumbItemProps } from \'./BreadcrumbItem\';\\nexport default Breadcrumb;\\n","antd/breadcrumb/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../menu/style\';\\nimport \'../../dropdown/style\';\\n","antd/button/button-group.d.ts":"import * as React from \'react\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface ButtonGroupProps {\\n    size?: SizeType;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    prefixCls?: string;\\n}\\ndeclare const ButtonGroup: React.FC<ButtonGroupProps>;\\nexport default ButtonGroup;\\n","antd/button/button.d.ts":"import * as React from \'react\';\\nimport Group from \'./button-group\';\\nimport { Omit } from \'../_util/type\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare const ButtonTypes: [\\"default\\", \\"primary\\", \\"ghost\\", \\"dashed\\", \\"link\\", \\"text\\"];\\nexport declare type ButtonType = typeof ButtonTypes[number];\\ndeclare const ButtonShapes: [\\"circle\\", \\"round\\"];\\nexport declare type ButtonShape = typeof ButtonShapes[number];\\ndeclare const ButtonHTMLTypes: [\\"submit\\", \\"button\\", \\"reset\\"];\\nexport declare type ButtonHTMLType = typeof ButtonHTMLTypes[number];\\nexport declare type LegacyButtonType = ButtonType | \'danger\';\\nexport declare function convertLegacyProps(type?: LegacyButtonType): ButtonProps;\\nexport interface BaseButtonProps {\\n    type?: ButtonType;\\n    icon?: React.ReactNode;\\n    shape?: ButtonShape;\\n    size?: SizeType;\\n    loading?: boolean | {\\n        delay?: number;\\n    };\\n    prefixCls?: string;\\n    className?: string;\\n    ghost?: boolean;\\n    danger?: boolean;\\n    block?: boolean;\\n    children?: React.ReactNode;\\n}\\nexport declare type AnchorButtonProps = {\\n    href: string;\\n    target?: string;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n} & BaseButtonProps & Omit<React.AnchorHTMLAttributes<any>, \'type\' | \'onClick\'>;\\nexport declare type NativeButtonProps = {\\n    htmlType?: ButtonHTMLType;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n} & BaseButtonProps & Omit<React.ButtonHTMLAttributes<any>, \'type\' | \'onClick\'>;\\nexport declare type ButtonProps = Partial<AnchorButtonProps & NativeButtonProps>;\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<ButtonProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n    __ANT_BUTTON: boolean;\\n}\\ndeclare const Button: CompoundedComponent;\\nexport default Button;\\n","antd/button/index.d.ts":"import Button from \'./button\';\\nexport { ButtonProps, ButtonShape, ButtonType } from \'./button\';\\nexport { ButtonGroupProps } from \'./button-group\';\\nexport { SizeType as ButtonSize } from \'../config-provider/SizeContext\';\\nexport default Button;\\n","antd/button/LoadingIcon.d.ts":"import React from \'react\';\\nexport interface LoadingIconProps {\\n    prefixCls: string;\\n    existIcon: boolean;\\n    loading?: boolean | object;\\n}\\ndeclare const LoadingIcon: React.FC<LoadingIconProps>;\\nexport default LoadingIcon;\\n","antd/button/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/calendar/generateCalendar.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate\';\\nimport { PickerPanelBaseProps as RCPickerPanelBaseProps, PickerPanelDateProps as RCPickerPanelDateProps, PickerPanelTimeProps as RCPickerPanelTimeProps } from \'rc-picker/lib/PickerPanel\';\\nimport enUS from \'./locale/en_US\';\\ndeclare type InjectDefaultProps<Props> = Omit<Props, \'locale\' | \'generateConfig\' | \'prevIcon\' | \'nextIcon\' | \'superPrevIcon\' | \'superNextIcon\'> & {\\n    locale?: typeof enUS;\\n    size?: \'large\' | \'default\' | \'small\';\\n};\\nexport declare type PickerPanelBaseProps<DateType> = InjectDefaultProps<RCPickerPanelBaseProps<DateType>>;\\nexport declare type PickerPanelDateProps<DateType> = InjectDefaultProps<RCPickerPanelDateProps<DateType>>;\\nexport declare type PickerPanelTimeProps<DateType> = InjectDefaultProps<RCPickerPanelTimeProps<DateType>>;\\nexport declare type PickerProps<DateType> = PickerPanelBaseProps<DateType> | PickerPanelDateProps<DateType> | PickerPanelTimeProps<DateType>;\\nexport declare type CalendarMode = \'year\' | \'month\';\\nexport declare type HeaderRender<DateType> = (config: {\\n    value: DateType;\\n    type: CalendarMode;\\n    onChange: (date: DateType) => void;\\n    onTypeChange: (type: CalendarMode) => void;\\n}) => React.ReactNode;\\nexport interface CalendarProps<DateType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    locale?: typeof enUS;\\n    validRange?: [DateType, DateType];\\n    disabledDate?: (date: DateType) => boolean;\\n    dateFullCellRender?: (date: DateType) => React.ReactNode;\\n    dateCellRender?: (date: DateType) => React.ReactNode;\\n    monthFullCellRender?: (date: DateType) => React.ReactNode;\\n    monthCellRender?: (date: DateType) => React.ReactNode;\\n    headerRender?: HeaderRender<DateType>;\\n    value?: DateType;\\n    defaultValue?: DateType;\\n    mode?: CalendarMode;\\n    fullscreen?: boolean;\\n    onChange?: (date: DateType) => void;\\n    onPanelChange?: (date: DateType, mode: CalendarMode) => void;\\n    onSelect?: (date: DateType) => void;\\n}\\ndeclare function generateCalendar<DateType>(generateConfig: GenerateConfig<DateType>): (props: CalendarProps<DateType>) => JSX.Element;\\nexport default generateCalendar;\\n","antd/calendar/Header.d.ts":"/// <reference types=\\"react\\" />\\nimport { GenerateConfig } from \'rc-picker/lib/generate\';\\nimport { Locale } from \'rc-picker/lib/interface\';\\nimport { CalendarMode } from \'./generateCalendar\';\\nexport interface CalendarHeaderProps<DateType> {\\n    prefixCls: string;\\n    value: DateType;\\n    validRange?: [DateType, DateType];\\n    generateConfig: GenerateConfig<DateType>;\\n    locale: Locale;\\n    mode: CalendarMode;\\n    fullscreen: boolean;\\n    onChange: (date: DateType) => void;\\n    onModeChange: (mode: CalendarMode) => void;\\n}\\ndeclare function CalendarHeader<DateType>(props: CalendarHeaderProps<DateType>): JSX.Element;\\nexport default CalendarHeader;\\n","antd/calendar/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { Moment } from \'moment\';\\nimport { CalendarProps } from \'./generateCalendar\';\\ndeclare const Calendar: (props: CalendarProps<Moment>) => JSX.Element;\\nexport { CalendarProps };\\nexport default Calendar;\\n","antd/calendar/locale/ar_EG.d.ts":"import arEG from \'../../date-picker/locale/ar_EG\';\\nexport default arEG;\\n","antd/calendar/locale/az_AZ.d.ts":"import azAZ from \'../../date-picker/locale/az_AZ\';\\nexport default azAZ;\\n","antd/calendar/locale/bg_BG.d.ts":"import bgBG from \'../../date-picker/locale/bg_BG\';\\nexport default bgBG;\\n","antd/calendar/locale/by_BY.d.ts":"import byBY from \'../../date-picker/locale/by_BY\';\\nexport default byBY;\\n","antd/calendar/locale/ca_ES.d.ts":"import caES from \'../../date-picker/locale/ca_ES\';\\nexport default caES;\\n","antd/calendar/locale/cs_CZ.d.ts":"import csCZ from \'../../date-picker/locale/cs_CZ\';\\nexport default csCZ;\\n","antd/calendar/locale/da_DK.d.ts":"import daDK from \'../../date-picker/locale/da_DK\';\\nexport default daDK;\\n","antd/calendar/locale/de_DE.d.ts":"import deDE from \'../../date-picker/locale/de_DE\';\\nexport default deDE;\\n","antd/calendar/locale/el_GR.d.ts":"import elGR from \'../../date-picker/locale/el_GR\';\\nexport default elGR;\\n","antd/calendar/locale/en_GB.d.ts":"import enGB from \'../../date-picker/locale/en_GB\';\\nexport default enGB;\\n","antd/calendar/locale/en_US.d.ts":"import enUS from \'../../date-picker/locale/en_US\';\\nexport default enUS;\\n","antd/calendar/locale/es_ES.d.ts":"import esES from \'../../date-picker/locale/es_ES\';\\nexport default esES;\\n","antd/calendar/locale/et_EE.d.ts":"import etEE from \'../../date-picker/locale/et_EE\';\\nexport default etEE;\\n","antd/calendar/locale/fa_IR.d.ts":"import faIR from \'../../date-picker/locale/fa_IR\';\\nexport default faIR;\\n","antd/calendar/locale/fi_FI.d.ts":"import fiFI from \'../../date-picker/locale/fi_FI\';\\nexport default fiFI;\\n","antd/calendar/locale/fr_BE.d.ts":"import frBE from \'../../date-picker/locale/fr_BE\';\\nexport default frBE;\\n","antd/calendar/locale/fr_FR.d.ts":"import frFR from \'../../date-picker/locale/fr_FR\';\\nexport default frFR;\\n","antd/calendar/locale/ga_IE.d.ts":"import gaIE from \'../../date-picker/locale/ga_IE\';\\nexport default gaIE;\\n","antd/calendar/locale/gl_ES.d.ts":"import glES from \'../../date-picker/locale/gl_ES\';\\nexport default glES;\\n","antd/calendar/locale/he_IL.d.ts":"import heIL from \'../../date-picker/locale/he_IL\';\\nexport default heIL;\\n","antd/calendar/locale/hi_IN.d.ts":"import hiIN from \'../../date-picker/locale/hi_IN\';\\nexport default hiIN;\\n","antd/calendar/locale/hr_HR.d.ts":"import hrHR from \'../../date-picker/locale/hr_HR\';\\nexport default hrHR;\\n","antd/calendar/locale/hu_HU.d.ts":"import huHU from \'../../date-picker/locale/hu_HU\';\\nexport default huHU;\\n","antd/calendar/locale/id_ID.d.ts":"import idID from \'../../date-picker/locale/id_ID\';\\nexport default idID;\\n","antd/calendar/locale/is_IS.d.ts":"import isIS from \'../../date-picker/locale/is_IS\';\\nexport default isIS;\\n","antd/calendar/locale/it_IT.d.ts":"import itIT from \'../../date-picker/locale/it_IT\';\\nexport default itIT;\\n","antd/calendar/locale/ja_JP.d.ts":"import jaJP from \'../../date-picker/locale/ja_JP\';\\nexport default jaJP;\\n","antd/calendar/locale/kk_KZ.d.ts":"import kkKZ from \'../../date-picker/locale/kk_KZ\';\\nexport default kkKZ;\\n","antd/calendar/locale/kmr_IQ.d.ts":"import kmrIQ from \'../../date-picker/locale/kmr_IQ\';\\nexport default kmrIQ;\\n","antd/calendar/locale/kn_IN.d.ts":"import knIN from \'../../date-picker/locale/kn_IN\';\\nexport default knIN;\\n","antd/calendar/locale/ko_KR.d.ts":"import koKR from \'../../date-picker/locale/ko_KR\';\\nexport default koKR;\\n","antd/calendar/locale/lt_LT.d.ts":"import ltLT from \'../../date-picker/locale/lt_LT\';\\nexport default ltLT;\\n","antd/calendar/locale/lv_LV.d.ts":"import lvLV from \'../../date-picker/locale/lv_LV\';\\nexport default lvLV;\\n","antd/calendar/locale/mk_MK.d.ts":"import mkMK from \'../../date-picker/locale/mk_MK\';\\nexport default mkMK;\\n","antd/calendar/locale/mn_MN.d.ts":"import mnMN from \'../../date-picker/locale/mn_MN\';\\nexport default mnMN;\\n","antd/calendar/locale/ms_MY.d.ts":"import msMY from \'../../date-picker/locale/ms_MY\';\\nexport default msMY;\\n","antd/calendar/locale/nb_NO.d.ts":"import nbNO from \'../../date-picker/locale/nb_NO\';\\nexport default nbNO;\\n","antd/calendar/locale/nl_BE.d.ts":"import nlBE from \'../../date-picker/locale/nl_BE\';\\nexport default nlBE;\\n","antd/calendar/locale/nl_NL.d.ts":"import nlNL from \'../../date-picker/locale/nl_NL\';\\nexport default nlNL;\\n","antd/calendar/locale/pl_PL.d.ts":"import plPL from \'../../date-picker/locale/pl_PL\';\\nexport default plPL;\\n","antd/calendar/locale/pt_BR.d.ts":"import ptBR from \'../../date-picker/locale/pt_BR\';\\nexport default ptBR;\\n","antd/calendar/locale/pt_PT.d.ts":"import ptPT from \'../../date-picker/locale/pt_PT\';\\nexport default ptPT;\\n","antd/calendar/locale/ro_RO.d.ts":"import roRO from \'../../date-picker/locale/ro_RO\';\\nexport default roRO;\\n","antd/calendar/locale/ru_RU.d.ts":"import ruRU from \'../../date-picker/locale/ru_RU\';\\nexport default ruRU;\\n","antd/calendar/locale/sk_SK.d.ts":"import skSK from \'../../date-picker/locale/sk_SK\';\\nexport default skSK;\\n","antd/calendar/locale/sl_SI.d.ts":"import slSI from \'../../date-picker/locale/sl_SI\';\\nexport default slSI;\\n","antd/calendar/locale/sr_RS.d.ts":"import srRS from \'../../date-picker/locale/sr_RS\';\\nexport default srRS;\\n","antd/calendar/locale/sv_SE.d.ts":"import svSE from \'../../date-picker/locale/sv_SE\';\\nexport default svSE;\\n","antd/calendar/locale/ta_IN.d.ts":"import taIN from \'../../date-picker/locale/ta_IN\';\\nexport default taIN;\\n","antd/calendar/locale/th_TH.d.ts":"import thTH from \'../../date-picker/locale/th_TH\';\\nexport default thTH;\\n","antd/calendar/locale/tr_TR.d.ts":"import trTR from \'../../date-picker/locale/tr_TR\';\\nexport default trTR;\\n","antd/calendar/locale/uk_UA.d.ts":"import ukUA from \'../../date-picker/locale/uk_UA\';\\nexport default ukUA;\\n","antd/calendar/locale/vi_VN.d.ts":"import viVN from \'../../date-picker/locale/vi_VN\';\\nexport default viVN;\\n","antd/calendar/locale/zh_CN.d.ts":"import zhCN from \'../../date-picker/locale/zh_CN\';\\nexport default zhCN;\\n","antd/calendar/locale/zh_TW.d.ts":"import zhTW from \'../../date-picker/locale/zh_TW\';\\nexport default zhTW;\\n","antd/calendar/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\nimport \'../../radio/style\';\\nimport \'../../date-picker/style\';\\n","antd/card/Grid.d.ts":"import * as React from \'react\';\\nexport interface CardGridProps {\\n    prefixCls?: string;\\n    className?: string;\\n    hoverable?: boolean;\\n    style?: React.CSSProperties;\\n}\\ndeclare const Grid: React.FC<CardGridProps>;\\nexport default Grid;\\n","antd/card/index.d.ts":"import * as React from \'react\';\\nimport Grid from \'./Grid\';\\nimport Meta from \'./Meta\';\\nimport { TabsProps } from \'../tabs\';\\nimport { Omit } from \'../_util/type\';\\nexport { CardGridProps } from \'./Grid\';\\nexport { CardMetaProps } from \'./Meta\';\\nexport declare type CardType = \'inner\';\\nexport declare type CardSize = \'default\' | \'small\';\\nexport interface CardTabListType {\\n    key: string;\\n    tab: React.ReactNode;\\n    disabled?: boolean;\\n}\\nexport interface CardProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \'title\'> {\\n    prefixCls?: string;\\n    title?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    bordered?: boolean;\\n    headStyle?: React.CSSProperties;\\n    bodyStyle?: React.CSSProperties;\\n    style?: React.CSSProperties;\\n    loading?: boolean;\\n    hoverable?: boolean;\\n    children?: React.ReactNode;\\n    id?: string;\\n    className?: string;\\n    size?: CardSize;\\n    type?: CardType;\\n    cover?: React.ReactNode;\\n    actions?: React.ReactNode[];\\n    tabList?: CardTabListType[];\\n    tabBarExtraContent?: React.ReactNode | null;\\n    onTabChange?: (key: string) => void;\\n    activeTabKey?: string;\\n    defaultActiveTabKey?: string;\\n    tabProps?: TabsProps;\\n}\\nexport interface CardInterface extends React.FC<CardProps> {\\n    Grid: typeof Grid;\\n    Meta: typeof Meta;\\n}\\ndeclare const Card: CardInterface;\\nexport default Card;\\n","antd/card/Meta.d.ts":"import * as React from \'react\';\\nexport interface CardMetaProps {\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    avatar?: React.ReactNode;\\n    title?: React.ReactNode;\\n    description?: React.ReactNode;\\n}\\ndeclare const Meta: React.FC<CardMetaProps>;\\nexport default Meta;\\n","antd/card/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tabs/style\';\\nimport \'../../row/style\';\\nimport \'../../col/style\';\\n","antd/carousel/index.d.ts":"import * as React from \'react\';\\nimport { Settings } from \'@ant-design/react-slick\';\\nexport declare type CarouselEffect = \'scrollx\' | \'fade\';\\nexport declare type DotPosition = \'top\' | \'bottom\' | \'left\' | \'right\';\\nexport interface CarouselProps extends Omit<Settings, \'dots\' | \'dotsClass\'> {\\n    effect?: CarouselEffect;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    slickGoTo?: number;\\n    dotPosition?: DotPosition;\\n    children?: React.ReactNode;\\n    dots?: boolean | {\\n        className?: string;\\n    };\\n}\\nexport interface CarouselRef {\\n    goTo: (slide: number, dontAnimate?: boolean) => void;\\n    next: () => void;\\n    prev: () => void;\\n    autoPlay: boolean;\\n    innerSlider: any;\\n}\\ndeclare const Carousel: React.ForwardRefExoticComponent<CarouselProps & React.RefAttributes<CarouselRef>>;\\nexport default Carousel;\\n","antd/carousel/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/cascader/index.d.ts":"import * as React from \'react\';\\nimport Input from \'../input\';\\nimport { ConfigConsumerProps, RenderEmptyHandler, DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface CascaderOptionType {\\n    value?: string | number;\\n    label?: React.ReactNode;\\n    disabled?: boolean;\\n    isLeaf?: boolean;\\n    loading?: boolean;\\n    children?: Array<CascaderOptionType>;\\n    [key: string]: any;\\n}\\nexport interface FieldNamesType {\\n    value?: string | number;\\n    label?: string;\\n    children?: string;\\n}\\nexport interface FilledFieldNamesType {\\n    value: string | number;\\n    label: string;\\n    children: string;\\n}\\nexport declare type CascaderExpandTrigger = \'click\' | \'hover\';\\nexport declare type CascaderValueType = (string | number)[];\\nexport interface ShowSearchType {\\n    filter?: (inputValue: string, path: CascaderOptionType[], names: FilledFieldNamesType) => boolean;\\n    render?: (inputValue: string, path: CascaderOptionType[], prefixCls: string | undefined, names: FilledFieldNamesType) => React.ReactNode;\\n    sort?: (a: CascaderOptionType[], b: CascaderOptionType[], inputValue: string, names: FilledFieldNamesType) => number;\\n    matchInputWidth?: boolean;\\n    limit?: number | false;\\n}\\nexport interface CascaderProps {\\n    /** \u53ef\u9009\u9879\u6570\u636e\u6e90 */\\n    options: CascaderOptionType[];\\n    /** \u9ed8\u8ba4\u7684\u9009\u4e2d\u9879 */\\n    defaultValue?: CascaderValueType;\\n    /** \u6307\u5b9a\u9009\u4e2d\u9879 */\\n    value?: CascaderValueType;\\n    /** \u9009\u62e9\u5b8c\u6210\u540e\u7684\u56de\u8c03 */\\n    onChange?: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;\\n    /** \u9009\u62e9\u540e\u5c55\u793a\u7684\u6e32\u67d3\u51fd\u6570 */\\n    displayRender?: (label: string[], selectedOptions?: CascaderOptionType[]) => React.ReactNode;\\n    /** \u81ea\u5b9a\u4e49\u6837\u5f0f */\\n    style?: React.CSSProperties;\\n    /** \u81ea\u5b9a\u4e49\u7c7b\u540d */\\n    className?: string;\\n    /** \u81ea\u5b9a\u4e49\u6d6e\u5c42\u7c7b\u540d */\\n    popupClassName?: string;\\n    /** \u6d6e\u5c42\u9884\u8bbe\u4f4d\u7f6e\uff1a`bottomLeft` `bottomRight` `topLeft` `topRight` */\\n    popupPlacement?: string;\\n    /** \u8f93\u5165\u6846\u5360\u4f4d\u6587\u672c */\\n    placeholder?: string;\\n    /** \u8f93\u5165\u6846\u5927\u5c0f\uff0c\u53ef\u9009 `large` `default` `small` */\\n    size?: SizeType;\\n    /** \u8f93\u5165\u6846 name */\\n    name?: string;\\n    /** \u8f93\u5165\u6846 id */\\n    id?: string;\\n    /** Whether has border style */\\n    bordered?: boolean;\\n    /** \u7981\u7528 */\\n    disabled?: boolean;\\n    /** \u662f\u5426\u652f\u6301\u6e05\u9664 */\\n    allowClear?: boolean;\\n    /** \u81ea\u52a8\u83b7\u53d6\u7126\u70b9 */\\n    autoFocus?: boolean;\\n    showSearch?: boolean | ShowSearchType;\\n    notFoundContent?: React.ReactNode;\\n    loadData?: (selectedOptions?: CascaderOptionType[]) => void;\\n    /** \u6b21\u7ea7\u83dc\u5355\u7684\u5c55\u5f00\u65b9\u5f0f\uff0c\u53ef\u9009 \'click\' \u548c \'hover\' */\\n    expandTrigger?: CascaderExpandTrigger;\\n    expandIcon?: React.ReactNode;\\n    /** \u5f53\u6b64\u9879\u4e3a true \u65f6\uff0c\u70b9\u9009\u6bcf\u7ea7\u83dc\u5355\u9009\u9879\u503c\u90fd\u4f1a\u53d1\u751f\u53d8\u5316 */\\n    changeOnSelect?: boolean;\\n    /** \u6d6e\u5c42\u53ef\u89c1\u53d8\u5316\u65f6\u56de\u8c03 */\\n    onPopupVisibleChange?: (popupVisible: boolean) => void;\\n    prefixCls?: string;\\n    inputPrefixCls?: string;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    popupVisible?: boolean;\\n    /** Use this after antd@3.7.0 */\\n    fieldNames?: FieldNamesType;\\n    suffixIcon?: React.ReactNode;\\n    dropdownRender?: (menus: React.ReactNode) => React.ReactNode;\\n    autoComplete?: string;\\n    transitionName?: string;\\n    children?: React.ReactElement;\\n}\\nexport interface CascaderState {\\n    inputFocused: boolean;\\n    inputValue: string;\\n    value: CascaderValueType;\\n    popupVisible: boolean | undefined;\\n    flattenOptions: CascaderOptionType[][] | undefined;\\n    prevProps: CascaderProps;\\n}\\ninterface CascaderLocale {\\n    placeholder?: string;\\n}\\ndeclare class Cascader extends React.Component<CascaderProps, CascaderState> {\\n    static defaultProps: {\\n        transitionName: string;\\n        options: never[];\\n        disabled: boolean;\\n        allowClear: boolean;\\n        bordered: boolean;\\n    };\\n    static getDerivedStateFromProps(nextProps: CascaderProps, { prevProps }: CascaderState): Partial<CascaderState>;\\n    cachedOptions: CascaderOptionType[];\\n    clearSelectionTimeout: any;\\n    private input;\\n    constructor(props: CascaderProps);\\n    componentWillUnmount(): void;\\n    setValue: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;\\n    getLabel(): any;\\n    saveInput: (node: Input) => void;\\n    handleChange: (value: any, selectedOptions: CascaderOptionType[]) => void;\\n    handlePopupVisibleChange: (popupVisible: boolean) => void;\\n    handleInputBlur: () => void;\\n    handleInputClick: (e: React.MouseEvent<HTMLInputElement>) => void;\\n    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\\n    handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    clearSelection: (e: React.MouseEvent<HTMLElement>) => void;\\n    generateFilteredOptions(prefixCls: string | undefined, renderEmpty: RenderEmptyHandler): CascaderOptionType[] | {\\n        [x: string]: {} | null | undefined;\\n        disabled: boolean;\\n        isEmptyNode: boolean;\\n    }[];\\n    focus(): void;\\n    blur(): void;\\n    getPopupPlacement(direction?: DirectionType): string;\\n    renderCascader: ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, direction, }: ConfigConsumerProps, locale: CascaderLocale) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Cascader;\\n","antd/cascader/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../input/style\';\\n","antd/checkbox/Checkbox.d.ts":"import * as React from \'react\';\\nexport interface AbstractCheckboxProps<T> {\\n    prefixCls?: string;\\n    className?: string;\\n    defaultChecked?: boolean;\\n    checked?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    onChange?: (e: T) => void;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    onMouseEnter?: React.MouseEventHandler<HTMLElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLElement>;\\n    onKeyPress?: React.KeyboardEventHandler<HTMLElement>;\\n    onKeyDown?: React.KeyboardEventHandler<HTMLElement>;\\n    value?: any;\\n    tabIndex?: number;\\n    name?: string;\\n    children?: React.ReactNode;\\n    id?: string;\\n    autoFocus?: boolean;\\n    type?: string;\\n    skipGroup?: boolean;\\n}\\nexport interface CheckboxChangeEventTarget extends CheckboxProps {\\n    checked: boolean;\\n}\\nexport interface CheckboxChangeEvent {\\n    target: CheckboxChangeEventTarget;\\n    stopPropagation: () => void;\\n    preventDefault: () => void;\\n    nativeEvent: MouseEvent;\\n}\\nexport interface CheckboxProps extends AbstractCheckboxProps<CheckboxChangeEvent> {\\n    indeterminate?: boolean;\\n}\\ndeclare const Checkbox: React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<unknown>>;\\nexport default Checkbox;\\n","antd/checkbox/Group.d.ts":"import * as React from \'react\';\\nimport { CheckboxChangeEvent } from \'./Checkbox\';\\nexport declare type CheckboxValueType = string | number | boolean;\\nexport interface CheckboxOptionType {\\n    label: React.ReactNode;\\n    value: CheckboxValueType;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    onChange?: (e: CheckboxChangeEvent) => void;\\n}\\nexport interface AbstractCheckboxGroupProps {\\n    prefixCls?: string;\\n    className?: string;\\n    options?: Array<CheckboxOptionType | string>;\\n    disabled?: boolean;\\n    style?: React.CSSProperties;\\n}\\nexport interface CheckboxGroupProps extends AbstractCheckboxGroupProps {\\n    name?: string;\\n    defaultValue?: Array<CheckboxValueType>;\\n    value?: Array<CheckboxValueType>;\\n    onChange?: (checkedValue: Array<CheckboxValueType>) => void;\\n    children?: React.ReactNode;\\n}\\nexport interface CheckboxGroupContext {\\n    name?: string;\\n    toggleOption?: (option: CheckboxOptionType) => void;\\n    value?: any;\\n    disabled?: boolean;\\n    registerValue: (val: string) => void;\\n    cancelValue: (val: string) => void;\\n}\\nexport declare const GroupContext: React.Context<CheckboxGroupContext | null>;\\ndeclare const _default: React.NamedExoticComponent<CheckboxGroupProps>;\\nexport default _default;\\n","antd/checkbox/index.d.ts":"import * as React from \'react\';\\nimport { CheckboxProps } from \'./Checkbox\';\\nimport Group from \'./Group\';\\nexport { CheckboxProps, CheckboxChangeEvent } from \'./Checkbox\';\\nexport { CheckboxGroupProps, CheckboxOptionType } from \'./Group\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<HTMLInputElement>> {\\n    Group: typeof Group;\\n    __ANT_CHECKBOX: boolean;\\n}\\ndeclare const Checkbox: CompoundedComponent;\\nexport default Checkbox;\\n","antd/checkbox/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/col/index.d.ts":"import { Col, ColProps, ColSize } from \'../grid\';\\nexport { ColProps, ColSize };\\nexport default Col;\\n","antd/col/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../grid/style\';\\n","antd/collapse/Collapse.d.ts":"import * as React from \'react\';\\nimport CollapsePanel, { CollapsibleType } from \'./CollapsePanel\';\\nexport declare type ExpandIconPosition = \'left\' | \'right\' | undefined;\\nexport interface CollapseProps {\\n    activeKey?: Array<string | number> | string | number;\\n    defaultActiveKey?: Array<string | number> | string | number;\\n    /** \u624b\u98ce\u7434\u6548\u679c */\\n    accordion?: boolean;\\n    destroyInactivePanel?: boolean;\\n    onChange?: (key: string | string[]) => void;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    bordered?: boolean;\\n    prefixCls?: string;\\n    expandIcon?: (panelProps: PanelProps) => React.ReactNode;\\n    expandIconPosition?: ExpandIconPosition;\\n    ghost?: boolean;\\n    collapsible?: CollapsibleType;\\n}\\ninterface PanelProps {\\n    isActive?: boolean;\\n    header?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    showArrow?: boolean;\\n    forceRender?: boolean;\\n    /** @deprecated Use `collapsible=\\"disabled\\"` instead */\\n    disabled?: boolean;\\n    extra?: React.ReactNode;\\n    collapsible?: CollapsibleType;\\n}\\ninterface CollapseInterface extends React.FC<CollapseProps> {\\n    Panel: typeof CollapsePanel;\\n}\\ndeclare const Collapse: CollapseInterface;\\nexport default Collapse;\\n","antd/collapse/CollapsePanel.d.ts":"import * as React from \'react\';\\nexport declare type CollapsibleType = \'header\' | \'disabled\';\\nexport interface CollapsePanelProps {\\n    key: string | number;\\n    header: React.ReactNode;\\n    /** @deprecated Use `collapsible=\\"disabled\\"` instead */\\n    disabled?: boolean;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    showArrow?: boolean;\\n    prefixCls?: string;\\n    forceRender?: boolean;\\n    id?: string;\\n    extra?: React.ReactNode;\\n    collapsible?: CollapsibleType;\\n}\\ndeclare const CollapsePanel: React.FC<CollapsePanelProps>;\\nexport default CollapsePanel;\\n","antd/collapse/index.d.ts":"import Collapse from \'./Collapse\';\\nexport { CollapseProps } from \'./Collapse\';\\nexport { CollapsePanelProps } from \'./CollapsePanel\';\\nexport default Collapse;\\n","antd/collapse/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/comment/index.d.ts":"import * as React from \'react\';\\nexport interface CommentProps {\\n    /** List of action items rendered below the comment content */\\n    actions?: Array<React.ReactNode>;\\n    /** The element to display as the comment author. */\\n    author?: React.ReactNode;\\n    /** The element to display as the comment avatar - generally an antd Avatar */\\n    avatar?: React.ReactNode;\\n    /** ClassName of comment */\\n    className?: string;\\n    /** The main content of the comment */\\n    content: React.ReactNode;\\n    /** Nested comments should be provided as children of the Comment */\\n    children?: React.ReactNode;\\n    /** Comment prefix defaults to \'.ant-comment\' */\\n    prefixCls?: string;\\n    /** Additional style for the comment */\\n    style?: React.CSSProperties;\\n    /** A datetime element containing the time to be displayed */\\n    datetime?: React.ReactNode;\\n}\\ndeclare const Comment: React.FC<CommentProps>;\\nexport default Comment;\\n","antd/comment/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/config-provider/context.d.ts":"import * as React from \'react\';\\nimport { RenderEmptyHandler } from \'./renderEmpty\';\\nimport { Locale } from \'../locale-provider\';\\nimport { SizeType } from \'./SizeContext\';\\nimport { RequiredMark } from \'../form/Form\';\\nexport interface CSPConfig {\\n    nonce?: string;\\n}\\nexport declare type DirectionType = \'ltr\' | \'rtl\' | undefined;\\nexport interface ConfigConsumerProps {\\n    getTargetContainer?: () => HTMLElement;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    rootPrefixCls?: string;\\n    iconPrefixCls?: string;\\n    getPrefixCls: (suffixCls?: string, customizePrefixCls?: string) => string;\\n    renderEmpty: RenderEmptyHandler;\\n    csp?: CSPConfig;\\n    autoInsertSpaceInButton?: boolean;\\n    input?: {\\n        autoComplete?: string;\\n    };\\n    locale?: Locale;\\n    pageHeader?: {\\n        ghost: boolean;\\n    };\\n    direction?: DirectionType;\\n    space?: {\\n        size?: SizeType | number;\\n    };\\n    virtual?: boolean;\\n    dropdownMatchSelectWidth?: boolean;\\n    form?: {\\n        requiredMark?: RequiredMark;\\n    };\\n}\\nexport declare const ConfigContext: React.Context<ConfigConsumerProps>;\\nexport declare const ConfigConsumer: React.Consumer<ConfigConsumerProps>;\\ndeclare type IReactComponent<P = any> = React.FC<P> | React.ComponentClass<P> | React.ClassicComponentClass<P>;\\ninterface BasicExportProps {\\n    prefixCls?: string;\\n}\\ninterface ConsumerConfig {\\n    prefixCls: string;\\n}\\n/** @deprecated Use hooks instead. This is a legacy function */\\nexport declare function withConfigConsumer<ExportProps extends BasicExportProps>(config: ConsumerConfig): <ComponentDef>(Component: IReactComponent) => React.FC<ExportProps> & ComponentDef;\\nexport {};\\n","antd/config-provider/index.d.ts":"import * as React from \'react\';\\nimport { ValidateMessages } from \'rc-field-form/lib/interface\';\\nimport { RenderEmptyHandler } from \'./renderEmpty\';\\nimport { Locale } from \'../locale-provider\';\\nimport { ConfigConsumer, ConfigContext, CSPConfig, DirectionType, ConfigConsumerProps } from \'./context\';\\nimport SizeContext, { SizeType } from \'./SizeContext\';\\nimport { RequiredMark } from \'../form/Form\';\\nexport { RenderEmptyHandler, ConfigContext, ConfigConsumer, CSPConfig, DirectionType, ConfigConsumerProps, };\\nexport declare const configConsumerProps: string[];\\nexport interface ConfigProviderProps {\\n    getTargetContainer?: () => HTMLElement;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    prefixCls?: string;\\n    iconPrefixCls?: string;\\n    children?: React.ReactNode;\\n    renderEmpty?: RenderEmptyHandler;\\n    csp?: CSPConfig;\\n    autoInsertSpaceInButton?: boolean;\\n    form?: {\\n        validateMessages?: ValidateMessages;\\n        requiredMark?: RequiredMark;\\n    };\\n    input?: {\\n        autoComplete?: string;\\n    };\\n    locale?: Locale;\\n    pageHeader?: {\\n        ghost: boolean;\\n    };\\n    componentSize?: SizeType;\\n    direction?: DirectionType;\\n    space?: {\\n        size?: SizeType | number;\\n    };\\n    virtual?: boolean;\\n    dropdownMatchSelectWidth?: boolean;\\n}\\ndeclare const ConfigProvider: React.FC<ConfigProviderProps> & {\\n    ConfigContext: typeof ConfigContext;\\n    SizeContext: typeof SizeContext;\\n};\\nexport default ConfigProvider;\\n","antd/config-provider/renderEmpty.d.ts":"import * as React from \'react\';\\ndeclare const renderEmpty: (componentName?: string | undefined) => React.ReactNode;\\nexport declare type RenderEmptyHandler = typeof renderEmpty;\\nexport default renderEmpty;\\n","antd/config-provider/SizeContext.d.ts":"import * as React from \'react\';\\nexport declare type SizeType = \'small\' | \'middle\' | \'large\' | undefined;\\ndeclare const SizeContext: React.Context<SizeType>;\\nexport interface SizeContextProps {\\n    size?: SizeType;\\n}\\nexport declare const SizeContextProvider: React.FC<SizeContextProps>;\\nexport default SizeContext;\\n","antd/config-provider/style/index.d.ts":"import \'./index.less\';\\n","antd/date-picker/generatePicker/generateRangePicker.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { RangePickerProps } from \'.\';\\nexport default function generateRangePicker<DateType>(generateConfig: GenerateConfig<DateType>): React.ComponentClass<RangePickerProps<DateType>>;\\n","antd/date-picker/generatePicker/generateSinglePicker.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { PickerProps, PickerLocale } from \'.\';\\nexport default function generatePicker<DateType>(generateConfig: GenerateConfig<DateType>): {\\n    DatePicker: React.ComponentClass<PickerProps<DateType>, any>;\\n    WeekPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    TimePicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\n","antd/date-picker/generatePicker/index.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { PickerBaseProps as RCPickerBaseProps, PickerDateProps as RCPickerDateProps, PickerTimeProps as RCPickerTimeProps } from \'rc-picker/lib/Picker\';\\nimport { SharedTimeProps } from \'rc-picker/lib/panels/TimePanel\';\\nimport { RangePickerBaseProps as RCRangePickerBaseProps, RangePickerDateProps as RCRangePickerDateProps, RangePickerTimeProps as RCRangePickerTimeProps } from \'rc-picker/lib/RangePicker\';\\nimport { PickerMode, Locale as RcPickerLocale } from \'rc-picker/lib/interface\';\\nimport { SizeType } from \'../../config-provider/SizeContext\';\\nimport PickerButton from \'../PickerButton\';\\nimport PickerTag from \'../PickerTag\';\\nimport { TimePickerLocale } from \'../../time-picker\';\\nexport declare const Components: {\\n    button: typeof PickerButton;\\n    rangeItem: typeof PickerTag;\\n};\\nexport declare function getTimeProps<DateType>(props: {\\n    format?: string;\\n    picker?: PickerMode;\\n} & SharedTimeProps<DateType>): SharedTimeProps<DateType> | {\\n    showTime: SharedTimeProps<DateType>;\\n};\\ndeclare type InjectDefaultProps<Props> = Omit<Props, \'locale\' | \'generateConfig\' | \'prevIcon\' | \'nextIcon\' | \'superPrevIcon\' | \'superNextIcon\' | \'hideHeader\' | \'components\'> & {\\n    locale?: PickerLocale;\\n    size?: SizeType;\\n    bordered?: boolean;\\n};\\nexport declare type PickerLocale = {\\n    lang: RcPickerLocale & AdditionalPickerLocaleLangProps;\\n    timePickerLocale: TimePickerLocale;\\n} & AdditionalPickerLocaleProps;\\nexport declare type AdditionalPickerLocaleProps = {\\n    dateFormat?: string;\\n    dateTimeFormat?: string;\\n    weekFormat?: string;\\n    monthFormat?: string;\\n};\\nexport declare type AdditionalPickerLocaleLangProps = {\\n    placeholder: string;\\n    yearPlaceholder?: string;\\n    quarterPlaceholder?: string;\\n    monthPlaceholder?: string;\\n    weekPlaceholder?: string;\\n    rangeYearPlaceholder?: [string, string];\\n    rangeMonthPlaceholder?: [string, string];\\n    rangeWeekPlaceholder?: [string, string];\\n    rangePlaceholder?: [string, string];\\n};\\nexport declare type PickerBaseProps<DateType> = InjectDefaultProps<RCPickerBaseProps<DateType>>;\\nexport declare type PickerDateProps<DateType> = InjectDefaultProps<RCPickerDateProps<DateType>>;\\nexport declare type PickerTimeProps<DateType> = InjectDefaultProps<RCPickerTimeProps<DateType>>;\\nexport declare type PickerProps<DateType> = PickerBaseProps<DateType> | PickerDateProps<DateType> | PickerTimeProps<DateType>;\\nexport declare type RangePickerBaseProps<DateType> = InjectDefaultProps<RCRangePickerBaseProps<DateType>>;\\nexport declare type RangePickerDateProps<DateType> = InjectDefaultProps<RCRangePickerDateProps<DateType>>;\\nexport declare type RangePickerTimeProps<DateType> = InjectDefaultProps<RCRangePickerTimeProps<DateType>>;\\nexport declare type RangePickerProps<DateType> = RangePickerBaseProps<DateType> | RangePickerDateProps<DateType> | RangePickerTimeProps<DateType>;\\ndeclare function generatePicker<DateType>(generateConfig: GenerateConfig<DateType>): React.ComponentClass<PickerProps<DateType>, any> & {\\n    WeekPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    RangePicker: React.ComponentClass<RangePickerProps<DateType>>;\\n    TimePicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerTimeProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerTimeProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\nexport default generatePicker;\\n","antd/date-picker/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { Moment } from \'moment\';\\nimport { PickerProps, PickerDateProps, RangePickerProps as BaseRangePickerProps } from \'./generatePicker\';\\nexport declare type DatePickerProps = PickerProps<Moment>;\\nexport declare type MonthPickerProps = Omit<PickerDateProps<Moment>, \'picker\'>;\\nexport declare type WeekPickerProps = Omit<PickerDateProps<Moment>, \'picker\'>;\\nexport declare type RangePickerProps = BaseRangePickerProps<Moment>;\\ndeclare const DatePicker: import(\\"react\\").ComponentClass<PickerProps<Moment>, any> & {\\n    WeekPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    RangePicker: import(\\"react\\").ComponentClass<BaseRangePickerProps<Moment>, any>;\\n    TimePicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\nexport default DatePicker;\\n","antd/date-picker/locale/ar_EG.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/az_AZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/bg_BG.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/by_BY.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ca_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/cs_CZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/da_DK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/de_DE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/el_GR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/en_GB.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/en_US.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/es_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/et_EE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fa_IR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fi_FI.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fr_BE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fr_FR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ga_IE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/gl_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/he_IL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hi_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hr_HR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hu_HU.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/id_ID.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/is_IS.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/it_IT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ja_JP.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kk_KZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kmr_IQ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kn_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ko_KR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/lt_LT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/lv_LV.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/mk_MK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/mn_MN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ms_MY.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nb_NO.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nl_BE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nl_NL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pl_PL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pt_BR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pt_PT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ro_RO.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ru_RU.d.ts":"/** Created by Andrey Gayvoronsky on 13/04/16. */\\nimport { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sk_SK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sl_SI.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sr_RS.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sv_SE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ta_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/th_TH.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/tr_TR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/uk_UA.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/vi_VN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/zh_CN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/zh_TW.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/PickerButton.d.ts":"/// <reference types=\\"react\\" />\\nimport { ButtonProps } from \'../button\';\\nexport default function PickerButton(props: ButtonProps): JSX.Element;\\n","antd/date-picker/PickerTag.d.ts":"/// <reference types=\\"react\\" />\\nimport { TagProps } from \'../tag\';\\nexport default function PickerTag(props: TagProps): JSX.Element;\\n","antd/date-picker/style/index.d.ts":"import \'./index.less\';\\nimport \'../../tag/style\';\\nimport \'../../button/style\';\\n","antd/date-picker/util.d.ts":"import { PickerMode } from \'rc-picker/lib/interface\';\\nimport { PickerLocale } from \'./generatePicker\';\\nexport declare function getPlaceholder(picker: PickerMode | undefined, locale: PickerLocale, customizePlaceholder?: string): string;\\nexport declare function getRangePlaceholder(picker: PickerMode | undefined, locale: PickerLocale, customizePlaceholder?: [string, string]): [string, string] | undefined;\\n","antd/descriptions/Cell.d.ts":"import * as React from \'react\';\\nexport interface CellProps {\\n    itemPrefixCls: string;\\n    span: number;\\n    className?: string;\\n    component: string;\\n    style?: React.CSSProperties;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n    bordered?: boolean;\\n    label?: React.ReactNode;\\n    content?: React.ReactNode;\\n    colon?: boolean;\\n}\\ndeclare const Cell: React.FC<CellProps>;\\nexport default Cell;\\n","antd/descriptions/index.d.ts":"import * as React from \'react\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\nexport interface DescriptionsContextProps {\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n}\\nexport declare const DescriptionsContext: React.Context<DescriptionsContextProps>;\\nexport interface DescriptionsProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    bordered?: boolean;\\n    size?: \'middle\' | \'small\' | \'default\';\\n    children?: React.ReactNode;\\n    title?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    column?: number | Partial<Record<Breakpoint, number>>;\\n    layout?: \'horizontal\' | \'vertical\';\\n    colon?: boolean;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n}\\ndeclare function Descriptions({ prefixCls: customizePrefixCls, title, extra, column, colon, bordered, layout, children, className, style, size, labelStyle, contentStyle, }: DescriptionsProps): JSX.Element;\\ndeclare namespace Descriptions {\\n    var Item: React.FC<import(\\"./Item\\").DescriptionsItemProps>;\\n}\\nexport default Descriptions;\\n","antd/descriptions/Item.d.ts":"import * as React from \'react\';\\nexport interface DescriptionsItemProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    label?: React.ReactNode;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n    children: React.ReactNode;\\n    span?: number;\\n}\\ndeclare const DescriptionsItem: React.FC<DescriptionsItemProps>;\\nexport default DescriptionsItem;\\n","antd/descriptions/Row.d.ts":"import * as React from \'react\';\\nimport { DescriptionsItemProps } from \'./Item\';\\nexport interface RowProps {\\n    prefixCls: string;\\n    vertical: boolean;\\n    row: React.ReactElement<DescriptionsItemProps>[];\\n    bordered?: boolean;\\n    colon: boolean;\\n    index: number;\\n}\\ndeclare const Row: React.FC<RowProps>;\\nexport default Row;\\n","antd/descriptions/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/divider/index.d.ts":"import * as React from \'react\';\\nexport interface DividerProps {\\n    prefixCls?: string;\\n    type?: \'horizontal\' | \'vertical\';\\n    orientation?: \'left\' | \'right\' | \'center\';\\n    className?: string;\\n    children?: React.ReactNode;\\n    dashed?: boolean;\\n    style?: React.CSSProperties;\\n    plain?: boolean;\\n}\\ndeclare const Divider: React.FC<DividerProps>;\\nexport default Divider;\\n","antd/divider/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/drawer/index.d.ts":"import * as React from \'react\';\\ndeclare type EventType = React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement | HTMLButtonElement>;\\ndeclare type getContainerFunc = () => HTMLElement;\\ndeclare const PlacementTypes: [\\"top\\", \\"right\\", \\"bottom\\", \\"left\\"];\\ndeclare type placementType = typeof PlacementTypes[number];\\nexport interface PushState {\\n    distance: string | number;\\n}\\nexport interface DrawerProps {\\n    closable?: boolean;\\n    closeIcon?: React.ReactNode;\\n    destroyOnClose?: boolean;\\n    forceRender?: boolean;\\n    getContainer?: string | HTMLElement | getContainerFunc | false;\\n    maskClosable?: boolean;\\n    mask?: boolean;\\n    maskStyle?: React.CSSProperties;\\n    style?: React.CSSProperties;\\n    /** Wrapper dom node style of header and body */\\n    drawerStyle?: React.CSSProperties;\\n    headerStyle?: React.CSSProperties;\\n    bodyStyle?: React.CSSProperties;\\n    title?: React.ReactNode;\\n    visible?: boolean;\\n    width?: number | string;\\n    height?: number | string;\\n    zIndex?: number;\\n    prefixCls?: string;\\n    push?: boolean | PushState;\\n    placement?: placementType;\\n    onClose?: (e: EventType) => void;\\n    afterVisibleChange?: (visible: boolean) => void;\\n    className?: string;\\n    handler?: React.ReactNode;\\n    keyboard?: boolean;\\n    footer?: React.ReactNode;\\n    footerStyle?: React.CSSProperties;\\n}\\nexport interface IDrawerState {\\n    push?: boolean;\\n}\\ndeclare const DrawerWrapper: React.FC<DrawerProps>;\\nexport default DrawerWrapper;\\n","antd/drawer/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/dropdown/dropdown-button.d.ts":"import * as React from \'react\';\\nimport { ButtonHTMLType } from \'../button/button\';\\nimport { ButtonGroupProps } from \'../button/button-group\';\\nimport { DropDownProps } from \'./dropdown\';\\ndeclare type DropdownButtonType = \'primary\' | \'ghost\' | \'dashed\';\\nexport interface DropdownButtonProps extends ButtonGroupProps, DropDownProps {\\n    type?: DropdownButtonType;\\n    htmlType?: ButtonHTMLType;\\n    disabled?: boolean;\\n    onClick?: React.MouseEventHandler<HTMLButtonElement>;\\n    icon?: React.ReactNode;\\n    href?: string;\\n    children?: React.ReactNode;\\n    title?: string;\\n    buttonsRender?: (buttons: React.ReactNode[]) => React.ReactNode[];\\n}\\ninterface DropdownButtonInterface extends React.FC<DropdownButtonProps> {\\n    __ANT_BUTTON: boolean;\\n}\\ndeclare const DropdownButton: DropdownButtonInterface;\\nexport default DropdownButton;\\n","antd/dropdown/dropdown.d.ts":"import * as React from \'react\';\\nimport DropdownButton from \'./dropdown-button\';\\ndeclare const Placements: [\\"topLeft\\", \\"topCenter\\", \\"topRight\\", \\"bottomLeft\\", \\"bottomCenter\\", \\"bottomRight\\"];\\ndeclare type Placement = typeof Placements[number];\\ndeclare type OverlayFunc = () => React.ReactElement;\\ndeclare type Align = {\\n    points?: [string, string];\\n    offset?: [number, number];\\n    targetOffset?: [number, number];\\n    overflow?: {\\n        adjustX?: boolean;\\n        adjustY?: boolean;\\n    };\\n    useCssRight?: boolean;\\n    useCssBottom?: boolean;\\n    useCssTransform?: boolean;\\n};\\nexport interface DropDownProps {\\n    arrow?: boolean;\\n    trigger?: (\'click\' | \'hover\' | \'contextMenu\')[];\\n    overlay: React.ReactElement | OverlayFunc;\\n    onVisibleChange?: (visible: boolean) => void;\\n    visible?: boolean;\\n    disabled?: boolean;\\n    align?: Align;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    prefixCls?: string;\\n    className?: string;\\n    transitionName?: string;\\n    placement?: Placement;\\n    overlayClassName?: string;\\n    overlayStyle?: React.CSSProperties;\\n    forceRender?: boolean;\\n    mouseEnterDelay?: number;\\n    mouseLeaveDelay?: number;\\n    openClassName?: string;\\n}\\ninterface DropdownInterface extends React.FC<DropDownProps> {\\n    Button: typeof DropdownButton;\\n}\\ndeclare const Dropdown: DropdownInterface;\\nexport default Dropdown;\\n","antd/dropdown/index.d.ts":"import Dropdown from \'./dropdown\';\\nexport { DropDownProps } from \'./dropdown\';\\nexport { DropdownButtonProps } from \'./dropdown-button\';\\nexport default Dropdown;\\n","antd/dropdown/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/empty/empty.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Empty: () => JSX.Element;\\nexport default Empty;\\n","antd/empty/index.d.ts":"import * as React from \'react\';\\nexport interface TransferLocale {\\n    description: string;\\n}\\nexport interface EmptyProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    /** @since 3.16.0 */\\n    imageStyle?: React.CSSProperties;\\n    image?: React.ReactNode;\\n    description?: React.ReactNode;\\n    children?: React.ReactNode;\\n}\\ninterface EmptyType extends React.FC<EmptyProps> {\\n    PRESENTED_IMAGE_DEFAULT: React.ReactNode;\\n    PRESENTED_IMAGE_SIMPLE: React.ReactNode;\\n}\\ndeclare const Empty: EmptyType;\\nexport default Empty;\\n","antd/empty/simple.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Simple: () => JSX.Element;\\nexport default Simple;\\n","antd/empty/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/form/context.d.ts":"import * as React from \'react\';\\nimport { FormProviderProps as RcFormProviderProps } from \'rc-field-form/lib/FormContext\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport { RequiredMark } from \'./Form\';\\nimport { ValidateStatus } from \'./FormItem\';\\n/** Form Context. Set top form style and pass to Form Item usage. */\\nexport interface FormContextProps {\\n    vertical: boolean;\\n    name?: string;\\n    colon?: boolean;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    wrapperCol?: ColProps;\\n    requiredMark?: RequiredMark;\\n    itemRef: (name: (string | number)[]) => (node: React.ReactElement) => void;\\n}\\nexport declare const FormContext: React.Context<FormContextProps>;\\n/** Form Item Context. Used for Form noStyle Item error collection */\\nexport interface FormItemContextProps {\\n    updateItemErrors: (name: string, errors: string[], originName?: string) => void;\\n}\\nexport declare const FormItemContext: React.Context<FormItemContextProps>;\\n/** Form Provider */\\nexport interface FormProviderProps extends Omit<RcFormProviderProps, \'validateMessages\'> {\\n    prefixCls?: string;\\n}\\nexport declare const FormProvider: React.FC<FormProviderProps>;\\n/** Used for ErrorList only */\\nexport interface FormItemPrefixContextProps {\\n    prefixCls: string;\\n    status?: ValidateStatus;\\n}\\nexport declare const FormItemPrefixContext: React.Context<FormItemPrefixContextProps>;\\n","antd/form/ErrorList.d.ts":"import * as React from \'react\';\\nexport interface ErrorListProps {\\n    errors?: React.ReactNode[];\\n    /** @private Internal usage. Do not use in your production */\\n    help?: React.ReactNode;\\n    /** @private Internal usage. Do not use in your production */\\n    onDomErrorVisibleChange?: (visible: boolean) => void;\\n}\\nexport default function ErrorList({ errors, help, onDomErrorVisibleChange, }: ErrorListProps): JSX.Element;\\n","antd/form/Form.d.ts":"import * as React from \'react\';\\nimport { List } from \'rc-field-form\';\\nimport { FormProps as RcFormProps } from \'rc-field-form/lib/Form\';\\nimport { Options } from \'scroll-into-view-if-needed\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport useForm, { FormInstance } from \'./hooks/useForm\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type RequiredMark = boolean | \'optional\';\\nexport declare type FormLayout = \'horizontal\' | \'inline\' | \'vertical\';\\nexport interface FormProps<Values = any> extends Omit<RcFormProps<Values>, \'form\'> {\\n    prefixCls?: string;\\n    colon?: boolean;\\n    name?: string;\\n    layout?: FormLayout;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    wrapperCol?: ColProps;\\n    form?: FormInstance<Values>;\\n    size?: SizeType;\\n    scrollToFirstError?: Options | boolean;\\n    requiredMark?: RequiredMark;\\n    /** @deprecated Will warning in future branch. Pls use `requiredMark` instead. */\\n    hideRequiredMark?: boolean;\\n}\\ndeclare const Form: <Values = any>(props: FormProps<Values> & {\\n    children?: React.ReactNode;\\n} & {\\n    ref?: ((instance: FormInstance<Values> | null) => void) | React.RefObject<FormInstance<Values>> | null | undefined;\\n}) => React.ReactElement;\\nexport { useForm, List, FormInstance };\\nexport default Form;\\n","antd/form/FormItem.d.ts":"import * as React from \'react\';\\nimport { FormInstance } from \'rc-field-form\';\\nimport { FieldProps } from \'rc-field-form/lib/Field\';\\nimport { FormItemLabelProps, LabelTooltipType } from \'./FormItemLabel\';\\nimport { FormItemInputProps } from \'./FormItemInput\';\\ndeclare const ValidateStatuses: [\\"success\\", \\"warning\\", \\"error\\", \\"validating\\", \\"\\"];\\nexport declare type ValidateStatus = typeof ValidateStatuses[number];\\ndeclare type RenderChildren<Values = any> = (form: FormInstance<Values>) => React.ReactNode;\\ndeclare type RcFieldProps = Omit<FieldProps, \'children\'>;\\ndeclare type ChildrenType<Values = any> = RenderChildren<Values> | React.ReactNode;\\nexport interface FormItemProps<Values = any> extends FormItemLabelProps, FormItemInputProps, RcFieldProps {\\n    prefixCls?: string;\\n    noStyle?: boolean;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    children?: ChildrenType<Values>;\\n    id?: string;\\n    hasFeedback?: boolean;\\n    validateStatus?: ValidateStatus;\\n    required?: boolean;\\n    hidden?: boolean;\\n    initialValue?: any;\\n    messageVariables?: Record<string, string>;\\n    tooltip?: LabelTooltipType;\\n    /** Auto passed by List render props. User should not use this. */\\n    fieldKey?: React.Key | React.Key[];\\n}\\ndeclare function FormItem<Values = any>(props: FormItemProps<Values>): React.ReactElement;\\nexport default FormItem;\\n","antd/form/FormItemInput.d.ts":"import * as React from \'react\';\\nimport { ColProps } from \'../grid/col\';\\nimport { ValidateStatus } from \'./FormItem\';\\ninterface FormItemInputMiscProps {\\n    prefixCls: string;\\n    children: React.ReactNode;\\n    errors: React.ReactNode[];\\n    hasFeedback?: boolean;\\n    validateStatus?: ValidateStatus;\\n    onDomErrorVisibleChange: (visible: boolean) => void;\\n    /** @private Internal usage, do not use in any of your production. */\\n    _internalItemRender?: {\\n        mark: string;\\n        render: (props: FormItemInputProps & FormItemInputMiscProps, domList: {\\n            input: JSX.Element;\\n            errorList: JSX.Element;\\n            extra: JSX.Element | null;\\n        }) => React.ReactNode;\\n    };\\n}\\nexport interface FormItemInputProps {\\n    wrapperCol?: ColProps;\\n    help?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    status?: ValidateStatus;\\n}\\ndeclare const FormItemInput: React.FC<FormItemInputProps & FormItemInputMiscProps>;\\nexport default FormItemInput;\\n","antd/form/FormItemLabel.d.ts":"import * as React from \'react\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport { RequiredMark } from \'./Form\';\\nimport { TooltipProps } from \'../tooltip\';\\nexport declare type WrapperTooltipProps = TooltipProps & {\\n    icon?: React.ReactElement;\\n};\\nexport declare type LabelTooltipType = WrapperTooltipProps | React.ReactNode;\\nexport interface FormItemLabelProps {\\n    colon?: boolean;\\n    htmlFor?: string;\\n    label?: React.ReactNode;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    requiredMark?: RequiredMark;\\n    tooltip?: LabelTooltipType;\\n}\\ndeclare const FormItemLabel: React.FC<FormItemLabelProps & {\\n    required?: boolean;\\n    prefixCls: string;\\n}>;\\nexport default FormItemLabel;\\n","antd/form/FormList.d.ts":"import * as React from \'react\';\\nimport { ValidatorRule, StoreValue } from \'rc-field-form/lib/interface\';\\nexport interface FormListFieldData {\\n    name: number;\\n    key: number;\\n    fieldKey: number;\\n}\\nexport interface FormListOperation {\\n    add: (defaultValue?: StoreValue, insertIndex?: number) => void;\\n    remove: (index: number | number[]) => void;\\n    move: (from: number, to: number) => void;\\n}\\nexport interface FormListProps {\\n    prefixCls?: string;\\n    name: string | number | (string | number)[];\\n    rules?: ValidatorRule[];\\n    initialValue?: any[];\\n    children: (fields: FormListFieldData[], operation: FormListOperation, meta: {\\n        errors: React.ReactNode[];\\n    }) => React.ReactNode;\\n}\\ndeclare const FormList: React.FC<FormListProps>;\\nexport default FormList;\\n","antd/form/hooks/useCacheErrors.d.ts":"import * as React from \'react\';\\n/** Always debounce error to avoid [error -> null -> error] blink */\\nexport default function useCacheErrors(errors: React.ReactNode[], changeTrigger: (visible: boolean) => void, directly: boolean): [boolean, React.ReactNode[]];\\n","antd/form/hooks/useForm.d.ts":"import * as React from \'react\';\\nimport { FormInstance as RcFormInstance } from \'rc-field-form\';\\nimport { ScrollOptions, NamePath, InternalNamePath } from \'../interface\';\\nexport interface FormInstance<Values = any> extends RcFormInstance<Values> {\\n    scrollToField: (name: NamePath, options?: ScrollOptions) => void;\\n    /** This is an internal usage. Do not use in your prod */\\n    __INTERNAL__: {\\n        /** No! Do not use this in your code! */\\n        name?: string;\\n        /** No! Do not use this in your code! */\\n        itemRef: (name: InternalNamePath) => (node: React.ReactElement) => void;\\n    };\\n    getFieldInstance: (name: NamePath) => any;\\n}\\nexport default function useForm<Values = any>(form?: FormInstance<Values>): [FormInstance<Values>];\\n","antd/form/hooks/useFrameState.d.ts":"declare type Updater<ValueType> = (prev?: ValueType) => ValueType;\\nexport default function useFrameState<ValueType>(defaultValue: ValueType): [ValueType, (updater: Updater<ValueType>) => void];\\nexport {};\\n","antd/form/hooks/useItemRef.d.ts":"import * as React from \'react\';\\nimport { InternalNamePath } from \'../interface\';\\nexport default function useItemRef(): (name: InternalNamePath, children: any) => ((instance: any) => void) | React.RefObject<any> | null | undefined;\\n","antd/form/index.d.ts":"import { Rule, RuleObject, RuleRender } from \'rc-field-form/lib/interface\';\\nimport InternalForm, { useForm, FormInstance, FormProps } from \'./Form\';\\nimport Item, { FormItemProps } from \'./FormItem\';\\nimport ErrorList, { ErrorListProps } from \'./ErrorList\';\\nimport List, { FormListProps } from \'./FormList\';\\nimport { FormProvider } from \'./context\';\\ndeclare type InternalFormType = typeof InternalForm;\\ninterface FormInterface extends InternalFormType {\\n    useForm: typeof useForm;\\n    Item: typeof Item;\\n    List: typeof List;\\n    ErrorList: typeof ErrorList;\\n    Provider: typeof FormProvider;\\n    /** @deprecated Only for warning usage. Do not use. */\\n    create: () => void;\\n}\\ndeclare const Form: FormInterface;\\nexport { FormInstance, FormProps, FormItemProps, ErrorListProps, Rule, RuleObject, RuleRender, FormListProps, };\\nexport default Form;\\n","antd/form/interface.d.ts":"export { Options as ScrollOptions } from \'scroll-into-view-if-needed\';\\nexport declare type FormLabelAlign = \'left\' | \'right\';\\nexport { Store, StoreValue, NamePath, InternalNamePath } from \'rc-field-form/lib/interface\';\\n","antd/form/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../grid/style\';\\nimport \'../../tooltip/style\';\\n","antd/form/util.d.ts":"import { InternalNamePath } from \'./interface\';\\nexport declare function toArray<T>(candidate?: T | T[] | false): T[];\\nexport declare function getFieldId(namePath: InternalNamePath, formName?: string): string | undefined;\\n","antd/grid/col.d.ts":"import * as React from \'react\';\\ndeclare type ColSpanType = number | string;\\ndeclare type FlexType = number | \'none\' | \'auto\' | string;\\nexport interface ColSize {\\n    flex?: FlexType;\\n    span?: ColSpanType;\\n    order?: ColSpanType;\\n    offset?: ColSpanType;\\n    push?: ColSpanType;\\n    pull?: ColSpanType;\\n}\\nexport interface ColProps extends React.HTMLAttributes<HTMLDivElement> {\\n    flex?: FlexType;\\n    span?: ColSpanType;\\n    order?: ColSpanType;\\n    offset?: ColSpanType;\\n    push?: ColSpanType;\\n    pull?: ColSpanType;\\n    xs?: ColSpanType | ColSize;\\n    sm?: ColSpanType | ColSize;\\n    md?: ColSpanType | ColSize;\\n    lg?: ColSpanType | ColSize;\\n    xl?: ColSpanType | ColSize;\\n    xxl?: ColSpanType | ColSize;\\n    prefixCls?: string;\\n}\\ndeclare const Col: React.ForwardRefExoticComponent<ColProps & React.RefAttributes<HTMLDivElement>>;\\nexport default Col;\\n","antd/grid/hooks/useBreakpoint.d.ts":"import { ScreenMap } from \'../../_util/responsiveObserve\';\\ndeclare function useBreakpoint(): ScreenMap;\\nexport default useBreakpoint;\\n","antd/grid/index.d.ts":"import Row from \'./row\';\\nimport Col from \'./col\';\\nimport useBreakpoint from \'./hooks/useBreakpoint\';\\nexport { RowProps } from \'./row\';\\nexport { ColProps, ColSize } from \'./col\';\\nexport { Row, Col };\\ndeclare const _default: {\\n    useBreakpoint: typeof useBreakpoint;\\n};\\nexport default _default;\\n","antd/grid/row.d.ts":"import * as React from \'react\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\ndeclare const RowAligns: [\\"top\\", \\"middle\\", \\"bottom\\", \\"stretch\\"];\\ndeclare const RowJustify: [\\"start\\", \\"end\\", \\"center\\", \\"space-around\\", \\"space-between\\"];\\nexport declare type Gutter = number | Partial<Record<Breakpoint, number>>;\\nexport interface RowProps extends React.HTMLAttributes<HTMLDivElement> {\\n    gutter?: Gutter | [Gutter, Gutter];\\n    align?: typeof RowAligns[number];\\n    justify?: typeof RowJustify[number];\\n    prefixCls?: string;\\n    wrap?: boolean;\\n}\\ndeclare const Row: React.ForwardRefExoticComponent<RowProps & React.RefAttributes<HTMLDivElement>>;\\nexport default Row;\\n","antd/grid/RowContext.d.ts":"import { Context } from \'react\';\\nexport interface RowContextState {\\n    gutter?: [number, number];\\n    wrap?: boolean;\\n}\\ndeclare const RowContext: Context<RowContextState>;\\nexport default RowContext;\\n","antd/grid/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/icon/index.d.ts":"declare const Icon: () => null;\\nexport default Icon;\\n","antd/icon/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/image/index.d.ts":"import * as React from \'react\';\\nimport { ImageProps } from \'rc-image\';\\nimport PreviewGroup from \'./PreviewGroup\';\\nexport interface CompositionImage<P> extends React.FC<P> {\\n    PreviewGroup: typeof PreviewGroup;\\n}\\ndeclare const Image: CompositionImage<ImageProps>;\\nexport { ImageProps };\\nexport default Image;\\n","antd/image/PreviewGroup.d.ts":"import * as React from \'react\';\\nimport { GroupConsumerProps } from \'rc-image/lib/PreviewGroup\';\\nexport declare const icons: {\\n    rotateLeft: JSX.Element;\\n    rotateRight: JSX.Element;\\n    zoomIn: JSX.Element;\\n    zoomOut: JSX.Element;\\n    close: JSX.Element;\\n    left: JSX.Element;\\n    right: JSX.Element;\\n};\\ndeclare const InternalPreviewGroup: React.FC<GroupConsumerProps>;\\nexport default InternalPreviewGroup;\\n","antd/image/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/index.d.ts":"export type { AffixProps } from \'./affix\';\\nexport { default as Affix } from \'./affix\';\\nexport type { AnchorProps, AnchorLinkProps } from \'./anchor\';\\nexport { default as Anchor } from \'./anchor\';\\nexport type { AutoCompleteProps } from \'./auto-complete\';\\nexport { default as AutoComplete } from \'./auto-complete\';\\nexport type { AlertProps } from \'./alert\';\\nexport { default as Alert } from \'./alert\';\\nexport type { AvatarProps } from \'./avatar\';\\nexport { default as Avatar } from \'./avatar\';\\nexport type { BackTopProps } from \'./back-top\';\\nexport { default as BackTop } from \'./back-top\';\\nexport type { BadgeProps } from \'./badge\';\\nexport { default as Badge } from \'./badge\';\\nexport type { BreadcrumbProps, BreadcrumbItemProps } from \'./breadcrumb\';\\nexport { default as Breadcrumb } from \'./breadcrumb\';\\nexport type { ButtonProps } from \'./button\';\\nexport { default as Button } from \'./button\';\\nexport type { CalendarProps } from \'./calendar\';\\nexport { default as Calendar } from \'./calendar\';\\nexport type { CardProps } from \'./card\';\\nexport { default as Card } from \'./card\';\\nexport type { CollapseProps, CollapsePanelProps } from \'./collapse\';\\nexport { default as Collapse } from \'./collapse\';\\nexport type { CarouselProps } from \'./carousel\';\\nexport { default as Carousel } from \'./carousel\';\\nexport type { CascaderProps } from \'./cascader\';\\nexport { default as Cascader } from \'./cascader\';\\nexport type { CheckboxProps, CheckboxOptionType } from \'./checkbox\';\\nexport { default as Checkbox } from \'./checkbox\';\\nexport type { ColProps } from \'./col\';\\nexport { default as Col } from \'./col\';\\nexport type { CommentProps } from \'./comment\';\\nexport { default as Comment } from \'./comment\';\\nexport { default as ConfigProvider } from \'./config-provider\';\\nexport type { DatePickerProps } from \'./date-picker\';\\nexport { default as DatePicker } from \'./date-picker\';\\nexport type { DescriptionsProps } from \'./descriptions\';\\nexport { default as Descriptions } from \'./descriptions\';\\nexport type { DividerProps } from \'./divider\';\\nexport { default as Divider } from \'./divider\';\\nexport type { DropDownProps } from \'./dropdown\';\\nexport { default as Dropdown } from \'./dropdown\';\\nexport type { DrawerProps } from \'./drawer\';\\nexport { default as Drawer } from \'./drawer\';\\nexport type { EmptyProps } from \'./empty\';\\nexport { default as Empty } from \'./empty\';\\nexport type { FormInstance, FormProps, FormItemProps } from \'./form\';\\nexport { default as Form } from \'./form\';\\nexport { default as Grid } from \'./grid\';\\nexport type { InputProps } from \'./input\';\\nexport { default as Input } from \'./input\';\\nexport type { ImageProps } from \'./image\';\\nexport { default as Image } from \'./image\';\\nexport type { InputNumberProps } from \'./input-number\';\\nexport { default as InputNumber } from \'./input-number\';\\nexport type { LayoutProps } from \'./layout\';\\nexport { default as Layout } from \'./layout\';\\nexport type { ListProps } from \'./list\';\\nexport { default as List } from \'./list\';\\nexport type { ArgsProps as MessageArgsProps } from \'./message\';\\nexport { default as message } from \'./message\';\\nexport type { MenuProps, MenuTheme, SubMenuProps, MenuItemProps } from \'./menu\';\\nexport { default as Menu } from \'./menu\';\\nexport type { MentionProps } from \'./mentions\';\\nexport { default as Mentions } from \'./mentions\';\\nexport type { ModalProps, ModalFuncProps } from \'./modal\';\\nexport { default as Modal } from \'./modal\';\\nexport type { StatisticProps } from \'./statistic\';\\nexport { default as Statistic } from \'./statistic\';\\nexport { default as notification } from \'./notification\';\\nexport type { PageHeaderProps } from \'./page-header\';\\nexport { default as PageHeader } from \'./page-header\';\\nexport type { PaginationProps } from \'./pagination\';\\nexport { default as Pagination } from \'./pagination\';\\nexport type { PopconfirmProps } from \'./popconfirm\';\\nexport { default as Popconfirm } from \'./popconfirm\';\\nexport type { PopoverProps } from \'./popover\';\\nexport { default as Popover } from \'./popover\';\\nexport type { ProgressProps } from \'./progress\';\\nexport { default as Progress } from \'./progress\';\\nexport type { RadioProps, RadioChangeEvent, RadioGroupProps } from \'./radio\';\\nexport { default as Radio } from \'./radio\';\\nexport type { RateProps } from \'./rate\';\\nexport { default as Rate } from \'./rate\';\\nexport type { ResultProps } from \'./result\';\\nexport { default as Result } from \'./result\';\\nexport type { RowProps } from \'./row\';\\nexport { default as Row } from \'./row\';\\nexport type { SelectProps } from \'./select\';\\nexport { default as Select } from \'./select\';\\nexport type { SkeletonProps } from \'./skeleton\';\\nexport { default as Skeleton } from \'./skeleton\';\\nexport type { SliderSingleProps } from \'./slider\';\\nexport { default as Slider } from \'./slider\';\\nexport type { SpaceProps } from \'./space\';\\nexport { default as Space } from \'./space\';\\nexport type { SpinProps } from \'./spin\';\\nexport { default as Spin } from \'./spin\';\\nexport type { StepProps, StepsProps } from \'./steps\';\\nexport { default as Steps } from \'./steps\';\\nexport type { SwitchProps } from \'./switch\';\\nexport { default as Switch } from \'./switch\';\\nexport type { TableProps, TablePaginationConfig, ColumnGroupType as TableColumnGroupType, ColumnType as TableColumnType, ColumnProps as TableColumnProps, } from \'./table\';\\nexport { default as Table } from \'./table\';\\nexport type { TransferProps } from \'./transfer\';\\nexport { default as Transfer } from \'./transfer\';\\nexport type { TreeProps, AntTreeNodeProps as TreeNodeProps } from \'./tree\';\\nexport { default as Tree } from \'./tree\';\\nexport type { TreeSelectProps } from \'./tree-select\';\\nexport { default as TreeSelect } from \'./tree-select\';\\nexport type { TabsProps, TabPaneProps } from \'./tabs\';\\nexport { default as Tabs } from \'./tabs\';\\nexport type { TagProps, TagType } from \'./tag\';\\nexport { default as Tag } from \'./tag\';\\nexport type { TimePickerProps, TimeRangePickerProps } from \'./time-picker\';\\nexport { default as TimePicker } from \'./time-picker\';\\nexport type { TimelineProps, TimelineItemProps } from \'./timeline\';\\nexport { default as Timeline } from \'./timeline\';\\nexport type { TooltipProps } from \'./tooltip\';\\nexport { default as Tooltip } from \'./tooltip\';\\nexport type { TypographyProps } from \'./typography\';\\nexport { default as Typography } from \'./typography\';\\nexport type { UploadProps } from \'./upload\';\\nexport { default as Upload } from \'./upload\';\\nexport { default as version } from \'./version\';\\n","antd/input/ClearableLabeledInput.d.ts":"import * as React from \'react\';\\nimport { InputProps } from \'./Input\';\\nimport { DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare const ClearableInputType: [\\"text\\", \\"input\\"];\\nexport declare function hasPrefixSuffix(props: InputProps | ClearableInputProps): boolean;\\n/** This basic props required for input and textarea. */\\ninterface BasicProps {\\n    prefixCls: string;\\n    inputType: typeof ClearableInputType[number];\\n    value?: any;\\n    allowClear?: boolean;\\n    element: React.ReactElement;\\n    handleReset: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    direction?: DirectionType;\\n    focused?: boolean;\\n    readOnly?: boolean;\\n    bordered: boolean;\\n}\\n/** This props only for input. */\\ninterface ClearableInputProps extends BasicProps {\\n    size?: SizeType;\\n    suffix?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    addonBefore?: React.ReactNode;\\n    addonAfter?: React.ReactNode;\\n    triggerFocus?: () => void;\\n}\\ndeclare class ClearableLabeledInput extends React.Component<ClearableInputProps> {\\n    /** @private Do not use out of this class. We do not promise this is always keep. */\\n    private containerRef;\\n    onInputMouseUp: React.MouseEventHandler;\\n    renderClearIcon(prefixCls: string): JSX.Element | null;\\n    renderSuffix(prefixCls: string): JSX.Element | null;\\n    renderLabeledIcon(prefixCls: string, element: React.ReactElement): JSX.Element;\\n    renderInputWithLabel(prefixCls: string, labeledElement: React.ReactElement): JSX.Element;\\n    renderTextAreaWithClearIcon(prefixCls: string, element: React.ReactElement): JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default ClearableLabeledInput;\\n","antd/input/Group.d.ts":"import * as React from \'react\';\\nexport interface GroupProps {\\n    className?: string;\\n    size?: \'large\' | \'small\' | \'default\';\\n    children?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    onMouseEnter?: React.MouseEventHandler<HTMLSpanElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLSpanElement>;\\n    onFocus?: React.FocusEventHandler<HTMLSpanElement>;\\n    onBlur?: React.FocusEventHandler<HTMLSpanElement>;\\n    prefixCls?: string;\\n    compact?: boolean;\\n}\\ndeclare const Group: React.FC<GroupProps>;\\nexport default Group;\\n","antd/input/index.d.ts":"import Input from \'./Input\';\\nexport { InputProps } from \'./Input\';\\nexport { GroupProps } from \'./Group\';\\nexport { SearchProps } from \'./Search\';\\nexport { TextAreaProps } from \'./TextArea\';\\nexport { PasswordProps } from \'./Password\';\\nexport default Input;\\n","antd/input/Input.d.ts":"import * as React from \'react\';\\nimport Group from \'./Group\';\\nimport Search from \'./Search\';\\nimport TextArea from \'./TextArea\';\\nimport Password from \'./Password\';\\nimport { Omit, LiteralUnion } from \'../_util/type\';\\nimport ClearableLabeledInput from \'./ClearableLabeledInput\';\\nimport { ConfigConsumerProps, DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface InputFocusOptions extends FocusOptions {\\n    cursor?: \'start\' | \'end\' | \'all\';\\n}\\nexport interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \'size\' | \'prefix\' | \'type\'> {\\n    prefixCls?: string;\\n    size?: SizeType;\\n    type?: LiteralUnion<\'button\' | \'checkbox\' | \'color\' | \'date\' | \'datetime-local\' | \'email\' | \'file\' | \'hidden\' | \'image\' | \'month\' | \'number\' | \'password\' | \'radio\' | \'range\' | \'reset\' | \'search\' | \'submit\' | \'tel\' | \'text\' | \'time\' | \'url\' | \'week\', string>;\\n    onPressEnter?: React.KeyboardEventHandler<HTMLInputElement>;\\n    addonBefore?: React.ReactNode;\\n    addonAfter?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    suffix?: React.ReactNode;\\n    allowClear?: boolean;\\n    bordered?: boolean;\\n}\\nexport declare function fixControlledValue<T>(value: T): \\"\\" | T;\\nexport declare function resolveOnChange(target: HTMLInputElement | HTMLTextAreaElement, e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement> | React.MouseEvent<HTMLElement, MouseEvent>, onChange?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void): void;\\nexport declare function getInputClassName(prefixCls: string, bordered: boolean, size?: SizeType, disabled?: boolean, direction?: DirectionType): string;\\nexport declare function triggerFocus(element?: HTMLInputElement | HTMLTextAreaElement, option?: InputFocusOptions): void;\\nexport interface InputState {\\n    value: any;\\n    focused: boolean;\\n    /** `value` from prev props */\\n    prevValue: any;\\n}\\ndeclare class Input extends React.Component<InputProps, InputState> {\\n    static Group: typeof Group;\\n    static Search: typeof Search;\\n    static TextArea: typeof TextArea;\\n    static Password: typeof Password;\\n    static defaultProps: {\\n        type: string;\\n    };\\n    input: HTMLInputElement;\\n    clearableInput: ClearableLabeledInput;\\n    removePasswordTimeout: number;\\n    direction: DirectionType;\\n    constructor(props: InputProps);\\n    static getDerivedStateFromProps(nextProps: InputProps, { prevValue }: InputState): Partial<InputState>;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    getSnapshotBeforeUpdate(prevProps: InputProps): null;\\n    componentWillUnmount(): void;\\n    focus: (option?: InputFocusOptions | undefined) => void;\\n    blur(): void;\\n    setSelectionRange(start: number, end: number, direction?: \'forward\' | \'backward\' | \'none\'): void;\\n    select(): void;\\n    saveClearableInput: (input: ClearableLabeledInput) => void;\\n    saveInput: (input: HTMLInputElement) => void;\\n    onFocus: React.FocusEventHandler<HTMLInputElement>;\\n    onBlur: React.FocusEventHandler<HTMLInputElement>;\\n    setValue(value: string, callback?: () => void): void;\\n    handleReset: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\\n    renderInput: (prefixCls: string, size: SizeType | undefined, bordered: boolean, input?: ConfigConsumerProps[\'input\']) => JSX.Element;\\n    clearPasswordValueAttribute: () => void;\\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\\n    renderComponent: ({ getPrefixCls, direction, input }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Input;\\n","antd/input/Password.d.ts":"import * as React from \'react\';\\nimport { InputProps } from \'./Input\';\\nexport interface PasswordProps extends InputProps {\\n    readonly inputPrefixCls?: string;\\n    readonly action?: string;\\n    visibilityToggle?: boolean;\\n    iconRender?: (visible: boolean) => React.ReactNode;\\n}\\ndeclare const Password: React.ForwardRefExoticComponent<PasswordProps & React.RefAttributes<any>>;\\nexport default Password;\\n","antd/input/Search.d.ts":"import * as React from \'react\';\\nimport Input, { InputProps } from \'./Input\';\\nexport interface SearchProps extends InputProps {\\n    inputPrefixCls?: string;\\n    onSearch?: (value: string, event?: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>) => void;\\n    enterButton?: React.ReactNode;\\n    loading?: boolean;\\n}\\ndeclare const Search: React.ForwardRefExoticComponent<SearchProps & React.RefAttributes<Input>>;\\nexport default Search;\\n","antd/input/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/input/TextArea.d.ts":"import * as React from \'react\';\\nimport { TextAreaProps as RcTextAreaProps } from \'rc-textarea\';\\nimport ResizableTextArea from \'rc-textarea/lib/ResizableTextArea\';\\nimport { InputFocusOptions } from \'./Input\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ninterface ShowCountProps {\\n    formatter: (args: {\\n        count: number;\\n        maxLength?: number;\\n    }) => string;\\n}\\nexport interface TextAreaProps extends RcTextAreaProps {\\n    allowClear?: boolean;\\n    bordered?: boolean;\\n    showCount?: boolean | ShowCountProps;\\n    size?: SizeType;\\n}\\nexport interface TextAreaRef {\\n    focus: (options?: InputFocusOptions) => void;\\n    blur: () => void;\\n    resizableTextArea?: ResizableTextArea;\\n}\\ndeclare const TextArea: React.ForwardRefExoticComponent<TextAreaProps & React.RefAttributes<TextAreaRef>>;\\nexport default TextArea;\\n","antd/input-number/index.d.ts":"import * as React from \'react\';\\nimport { Omit } from \'../_util/type\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type OmitAttrs = \'defaultValue\' | \'onChange\' | \'size\';\\nexport interface InputNumberProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, OmitAttrs> {\\n    prefixCls?: string;\\n    min?: number;\\n    max?: number;\\n    value?: number;\\n    step?: number | string;\\n    defaultValue?: number;\\n    tabIndex?: number;\\n    onChange?: (value: number | string | undefined | null) => void;\\n    disabled?: boolean;\\n    readOnly?: boolean;\\n    size?: SizeType;\\n    bordered?: boolean;\\n    formatter?: (value: number | string | undefined) => string;\\n    parser?: (displayValue: string | undefined) => number | string;\\n    decimalSeparator?: string;\\n    placeholder?: string;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    name?: string;\\n    id?: string;\\n    precision?: number;\\n    onPressEnter?: React.KeyboardEventHandler<HTMLInputElement>;\\n    onStep?: (value: number, info: {\\n        offset: number;\\n        type: \'up\' | \'down\';\\n    }) => void;\\n}\\ndeclare const InputNumber: React.ForwardRefExoticComponent<InputNumberProps & React.RefAttributes<unknown>>;\\nexport default InputNumber;\\n","antd/input-number/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/layout/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { BasicProps, Content, Footer, Header } from \'./layout\';\\nimport Sider from \'./Sider\';\\nexport { BasicProps as LayoutProps } from \'./layout\';\\nexport { SiderProps } from \'./Sider\';\\ninterface LayoutType extends React.FC<BasicProps> {\\n    Header: typeof Header;\\n    Footer: typeof Footer;\\n    Content: typeof Content;\\n    Sider: typeof Sider;\\n}\\ndeclare const Layout: LayoutType;\\nexport default Layout;\\n","antd/layout/layout.d.ts":"import * as React from \'react\';\\nexport interface GeneratorProps {\\n    suffixCls: string;\\n    tagName: \'header\' | \'footer\' | \'main\' | \'section\';\\n    displayName: string;\\n}\\nexport interface BasicProps extends React.HTMLAttributes<HTMLDivElement> {\\n    prefixCls?: string;\\n    hasSider?: boolean;\\n}\\nexport interface LayoutContextProps {\\n    siderHook: {\\n        addSider: (id: string) => void;\\n        removeSider: (id: string) => void;\\n    };\\n}\\nexport declare const LayoutContext: React.Context<LayoutContextProps>;\\ndeclare const Layout: React.FC<BasicProps>;\\ndeclare const Header: React.FC<BasicProps>;\\ndeclare const Footer: React.FC<BasicProps>;\\ndeclare const Content: React.FC<BasicProps>;\\nexport { Header, Footer, Content };\\nexport default Layout;\\n","antd/layout/Sider.d.ts":"import * as React from \'react\';\\nexport interface SiderContextProps {\\n    siderCollapsed?: boolean;\\n    collapsedWidth?: number | string;\\n}\\nexport declare const SiderContext: React.Context<SiderContextProps>;\\nexport declare type CollapseType = \'clickTrigger\' | \'responsive\';\\nexport declare type SiderTheme = \'light\' | \'dark\';\\nexport interface SiderProps extends React.HTMLAttributes<HTMLDivElement> {\\n    prefixCls?: string;\\n    collapsible?: boolean;\\n    collapsed?: boolean;\\n    defaultCollapsed?: boolean;\\n    reverseArrow?: boolean;\\n    onCollapse?: (collapsed: boolean, type: CollapseType) => void;\\n    zeroWidthTriggerStyle?: React.CSSProperties;\\n    trigger?: React.ReactNode;\\n    width?: number | string;\\n    collapsedWidth?: number | string;\\n    breakpoint?: \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\' | \'xxl\';\\n    theme?: SiderTheme;\\n    onBreakpoint?: (broken: boolean) => void;\\n}\\nexport interface SiderState {\\n    collapsed?: boolean;\\n    below: boolean;\\n}\\ndeclare const Sider: React.FC<SiderProps>;\\nexport default Sider;\\n","antd/layout/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/list/index.d.ts":"import * as React from \'react\';\\nimport { SpinProps } from \'../spin\';\\nimport { PaginationConfig } from \'../pagination\';\\nexport { ListItemProps, ListItemMetaProps } from \'./Item\';\\nexport declare type ColumnCount = number;\\nexport declare type ColumnType = \'gutter\' | \'column\' | \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\' | \'xxl\';\\nexport interface ListGridType {\\n    gutter?: number;\\n    column?: ColumnCount;\\n    xs?: ColumnCount;\\n    sm?: ColumnCount;\\n    md?: ColumnCount;\\n    lg?: ColumnCount;\\n    xl?: ColumnCount;\\n    xxl?: ColumnCount;\\n}\\nexport declare type ListSize = \'small\' | \'default\' | \'large\';\\nexport declare type ListItemLayout = \'horizontal\' | \'vertical\';\\nexport interface ListProps<T> {\\n    bordered?: boolean;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    dataSource?: T[];\\n    extra?: React.ReactNode;\\n    grid?: ListGridType;\\n    id?: string;\\n    itemLayout?: ListItemLayout;\\n    loading?: boolean | SpinProps;\\n    loadMore?: React.ReactNode;\\n    pagination?: PaginationConfig | false;\\n    prefixCls?: string;\\n    rowKey?: ((item: T) => string) | string;\\n    renderItem?: (item: T, index: number) => React.ReactNode;\\n    size?: ListSize;\\n    split?: boolean;\\n    header?: React.ReactNode;\\n    footer?: React.ReactNode;\\n    locale?: ListLocale;\\n}\\nexport interface ListLocale {\\n    emptyText: React.ReactNode | (() => React.ReactNode);\\n}\\nexport interface ListConsumerProps {\\n    grid?: any;\\n    itemLayout?: string;\\n}\\nexport declare const ListContext: React.Context<ListConsumerProps>;\\nexport declare const ListConsumer: React.Consumer<ListConsumerProps>;\\ndeclare function List<T>({ pagination, prefixCls: customizePrefixCls, bordered, split, className, children, itemLayout, loadMore, grid, dataSource, size, header, footer, loading, rowKey, renderItem, locale, ...rest }: ListProps<T>): JSX.Element;\\ndeclare namespace List {\\n    var Item: import(\\"./Item\\").ListItemTypeProps;\\n}\\nexport default List;\\n","antd/list/Item.d.ts":"import * as React from \'react\';\\nimport { ListGridType } from \'./index\';\\nexport interface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\\n    className?: string;\\n    children?: React.ReactNode;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    extra?: React.ReactNode;\\n    actions?: React.ReactNode[];\\n    grid?: ListGridType;\\n    colStyle?: React.CSSProperties;\\n}\\nexport interface ListItemMetaProps {\\n    avatar?: React.ReactNode;\\n    className?: string;\\n    children?: React.ReactNode;\\n    description?: React.ReactNode;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    title?: React.ReactNode;\\n}\\nexport declare const Meta: React.FC<ListItemMetaProps>;\\nexport interface ListItemTypeProps extends React.FC<ListItemProps> {\\n    Meta: typeof Meta;\\n}\\ndeclare const Item: ListItemTypeProps;\\nexport default Item;\\n","antd/list/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../spin/style\';\\nimport \'../../pagination/style\';\\nimport \'../../grid/style\';\\n","antd/locale/ar_EG.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/az_AZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/bg_BG.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/by_BY.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ca_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/cs_CZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/da_DK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/default.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/de_DE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/el_GR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/en_GB.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/en_US.d.ts":"import defaultLocale from \'./default\';\\nexport default defaultLocale;\\n","antd/locale/es_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/et_EE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fa_IR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fi_FI.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fr_BE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fr_FR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ga_IE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/gl_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/he_IL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hi_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hr_HR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hu_HU.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hy_AM.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/id_ID.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/is_IS.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/it_IT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ja_JP.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kk_KZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kmr_IQ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kn_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ko_KR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ku_IQ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/lt_LT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/lv_LV.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/mk_MK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/mn_MN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ms_MY.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nb_NO.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ne_NP.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nl_BE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nl_NL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pl_PL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pt_BR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pt_PT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ro_RO.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ru_RU.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sk_SK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sl_SI.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sr_RS.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sv_SE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ta_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/th_TH.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/tr_TR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/uk_UA.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/vi_VN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_CN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_HK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_TW.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale-provider/ar_EG.d.ts":"import locale from \'../locale/ar_EG\';\\nexport default locale;\\n","antd/locale-provider/az_AZ.d.ts":"import locale from \'../locale/az_AZ\';\\nexport default locale;\\n","antd/locale-provider/bg_BG.d.ts":"import locale from \'../locale/bg_BG\';\\nexport default locale;\\n","antd/locale-provider/by_BY.d.ts":"import locale from \'../locale/by_BY\';\\nexport default locale;\\n","antd/locale-provider/ca_ES.d.ts":"import locale from \'../locale/ca_ES\';\\nexport default locale;\\n","antd/locale-provider/context.d.ts":"/// <reference types=\\"react\\" />\\nimport { Locale } from \'.\';\\ndeclare const LocaleContext: import(\\"react\\").Context<(Partial<Locale> & {\\n    exist?: boolean | undefined;\\n}) | undefined>;\\nexport default LocaleContext;\\n","antd/locale-provider/cs_CZ.d.ts":"import locale from \'../locale/cs_CZ\';\\nexport default locale;\\n","antd/locale-provider/da_DK.d.ts":"import locale from \'../locale/da_DK\';\\nexport default locale;\\n","antd/locale-provider/default.d.ts":"import locale from \'../locale/default\';\\nexport default locale;\\n","antd/locale-provider/de_DE.d.ts":"import locale from \'../locale/de_DE\';\\nexport default locale;\\n","antd/locale-provider/el_GR.d.ts":"import locale from \'../locale/el_GR\';\\nexport default locale;\\n","antd/locale-provider/en_GB.d.ts":"import locale from \'../locale/en_GB\';\\nexport default locale;\\n","antd/locale-provider/en_US.d.ts":"import locale from \'../locale/en_US\';\\nexport default locale;\\n","antd/locale-provider/es_ES.d.ts":"import locale from \'../locale/es_ES\';\\nexport default locale;\\n","antd/locale-provider/et_EE.d.ts":"import locale from \'../locale/et_EE\';\\nexport default locale;\\n","antd/locale-provider/fa_IR.d.ts":"import locale from \'../locale/fa_IR\';\\nexport default locale;\\n","antd/locale-provider/fi_FI.d.ts":"import locale from \'../locale/fi_FI\';\\nexport default locale;\\n","antd/locale-provider/fr_BE.d.ts":"import locale from \'../locale/fr_BE\';\\nexport default locale;\\n","antd/locale-provider/fr_FR.d.ts":"import locale from \'../locale/fr_FR\';\\nexport default locale;\\n","antd/locale-provider/ga_IE.d.ts":"import locale from \'../locale/ga_IE\';\\nexport default locale;\\n","antd/locale-provider/gl_ES.d.ts":"import locale from \'../locale/gl_ES\';\\nexport default locale;\\n","antd/locale-provider/he_IL.d.ts":"import locale from \'../locale/he_IL\';\\nexport default locale;\\n","antd/locale-provider/hi_IN.d.ts":"import locale from \'../locale/hi_IN\';\\nexport default locale;\\n","antd/locale-provider/hr_HR.d.ts":"import locale from \'../locale/hr_HR\';\\nexport default locale;\\n","antd/locale-provider/hu_HU.d.ts":"import locale from \'../locale/hu_HU\';\\nexport default locale;\\n","antd/locale-provider/hy_AM.d.ts":"import locale from \'../locale/hy_AM\';\\nexport default locale;\\n","antd/locale-provider/id_ID.d.ts":"import locale from \'../locale/id_ID\';\\nexport default locale;\\n","antd/locale-provider/index.d.ts":"import * as React from \'react\';\\nimport { ValidateMessages } from \'rc-field-form/lib/interface\';\\nimport { ModalLocale } from \'../modal/locale\';\\nimport { TransferLocale as TransferLocaleForEmpty } from \'../empty\';\\nimport { PaginationLocale } from \'../pagination/Pagination\';\\nimport { TableLocale } from \'../table/interface\';\\nimport { PopconfirmLocale } from \'../popconfirm\';\\nimport { UploadLocale } from \'../upload/interface\';\\nimport { TransferLocale } from \'../transfer\';\\nimport { PickerLocale as DatePickerLocale } from \'../date-picker/generatePicker\';\\nexport declare const ANT_MARK = \\"internalMark\\";\\nexport interface Locale {\\n    locale: string;\\n    Pagination?: PaginationLocale;\\n    DatePicker?: DatePickerLocale;\\n    TimePicker?: Object;\\n    Calendar?: Object;\\n    Table?: TableLocale;\\n    Modal?: ModalLocale;\\n    Popconfirm?: PopconfirmLocale;\\n    Transfer?: Partial<TransferLocale>;\\n    Select?: Object;\\n    Upload?: UploadLocale;\\n    Empty?: TransferLocaleForEmpty;\\n    global?: Object;\\n    PageHeader?: Object;\\n    Icon?: Object;\\n    Text?: Object;\\n    Form?: {\\n        optional?: string;\\n        defaultValidateMessages: ValidateMessages;\\n    };\\n    Image?: {\\n        preview: string;\\n    };\\n}\\nexport interface LocaleProviderProps {\\n    locale: Locale;\\n    children?: React.ReactNode;\\n    _ANT_MARK__?: string;\\n}\\nexport default class LocaleProvider extends React.Component<LocaleProviderProps, any> {\\n    static defaultProps: {\\n        locale: {};\\n    };\\n    constructor(props: LocaleProviderProps);\\n    componentDidUpdate(prevProps: LocaleProviderProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n}\\n","antd/locale-provider/is_IS.d.ts":"import locale from \'../locale/is_IS\';\\nexport default locale;\\n","antd/locale-provider/it_IT.d.ts":"import locale from \'../locale/it_IT\';\\nexport default locale;\\n","antd/locale-provider/ja_JP.d.ts":"import locale from \'../locale/ja_JP\';\\nexport default locale;\\n","antd/locale-provider/kk_KZ.d.ts":"import locale from \'../locale/kk_KZ\';\\nexport default locale;\\n","antd/locale-provider/kmr_IQ.d.ts":"import locale from \'../locale/kmr_IQ\';\\nexport default locale;\\n","antd/locale-provider/kn_IN.d.ts":"import locale from \'../locale/kn_IN\';\\nexport default locale;\\n","antd/locale-provider/ko_KR.d.ts":"import locale from \'../locale/ko_KR\';\\nexport default locale;\\n","antd/locale-provider/ku_IQ.d.ts":"import locale from \'../locale/ku_IQ\';\\nexport default locale;\\n","antd/locale-provider/LocaleReceiver.d.ts":"import * as React from \'react\';\\nimport { Locale } from \'.\';\\nexport interface LocaleReceiverProps {\\n    componentName?: string;\\n    defaultLocale?: object | Function;\\n    children: (locale: object, localeCode?: string, fullLocale?: object) => React.ReactNode;\\n}\\ninterface LocaleInterface {\\n    [key: string]: any;\\n}\\nexport interface LocaleReceiverContext {\\n    antLocale?: LocaleInterface;\\n}\\nexport default class LocaleReceiver extends React.Component<LocaleReceiverProps> {\\n    static defaultProps: {\\n        componentName: string;\\n    };\\n    static contextType: React.Context<(Partial<Locale> & {\\n        exist?: boolean | undefined;\\n    }) | undefined>;\\n    getLocale(): any;\\n    getLocaleCode(): any;\\n    render(): React.ReactNode;\\n}\\ndeclare type LocaleComponent = keyof Locale;\\nexport declare function useLocaleReceiver<T extends LocaleComponent>(componentName: T, defaultLocale?: Locale[T] | Function): [Locale[T]];\\nexport {};\\n","antd/locale-provider/lt_LT.d.ts":"import locale from \'../locale/lt_LT\';\\nexport default locale;\\n","antd/locale-provider/lv_LV.d.ts":"import locale from \'../locale/lv_LV\';\\nexport default locale;\\n","antd/locale-provider/mk_MK.d.ts":"import locale from \'../locale/mk_MK\';\\nexport default locale;\\n","antd/locale-provider/mn_MN.d.ts":"import locale from \'../locale/mn_MN\';\\nexport default locale;\\n","antd/locale-provider/ms_MY.d.ts":"import locale from \'../locale/ms_MY\';\\nexport default locale;\\n","antd/locale-provider/nb_NO.d.ts":"import locale from \'../locale/nb_NO\';\\nexport default locale;\\n","antd/locale-provider/ne_NP.d.ts":"import locale from \'../locale/ne_NP\';\\nexport default locale;\\n","antd/locale-provider/nl_BE.d.ts":"import locale from \'../locale/nl_BE\';\\nexport default locale;\\n","antd/locale-provider/nl_NL.d.ts":"import locale from \'../locale/nl_NL\';\\nexport default locale;\\n","antd/locale-provider/pl_PL.d.ts":"import locale from \'../locale/pl_PL\';\\nexport default locale;\\n","antd/locale-provider/pt_BR.d.ts":"import locale from \'../locale/pt_BR\';\\nexport default locale;\\n","antd/locale-provider/pt_PT.d.ts":"import locale from \'../locale/pt_PT\';\\nexport default locale;\\n","antd/locale-provider/ro_RO.d.ts":"import locale from \'../locale/ro_RO\';\\nexport default locale;\\n","antd/locale-provider/ru_RU.d.ts":"import locale from \'../locale/ru_RU\';\\nexport default locale;\\n","antd/locale-provider/sk_SK.d.ts":"import locale from \'../locale/sk_SK\';\\nexport default locale;\\n","antd/locale-provider/sl_SI.d.ts":"import locale from \'../locale/sl_SI\';\\nexport default locale;\\n","antd/locale-provider/sr_RS.d.ts":"import locale from \'../locale/sr_RS\';\\nexport default locale;\\n","antd/locale-provider/style/index.d.ts":"import \'./index.less\';\\n","antd/locale-provider/sv_SE.d.ts":"import locale from \'../locale/sv_SE\';\\nexport default locale;\\n","antd/locale-provider/ta_IN.d.ts":"import locale from \'../locale/ta_IN\';\\nexport default locale;\\n","antd/locale-provider/th_TH.d.ts":"import locale from \'../locale/th_TH\';\\nexport default locale;\\n","antd/locale-provider/tr_TR.d.ts":"import locale from \'../locale/tr_TR\';\\nexport default locale;\\n","antd/locale-provider/uk_UA.d.ts":"import locale from \'../locale/uk_UA\';\\nexport default locale;\\n","antd/locale-provider/vi_VN.d.ts":"import locale from \'../locale/vi_VN\';\\nexport default locale;\\n","antd/locale-provider/zh_CN.d.ts":"import locale from \'../locale/zh_CN\';\\nexport default locale;\\n","antd/locale-provider/zh_HK.d.ts":"import locale from \'../locale/zh_HK\';\\nexport default locale;\\n","antd/locale-provider/zh_TW.d.ts":"import locale from \'../locale/zh_TW\';\\nexport default locale;\\n","antd/mentions/index.d.ts":"import * as React from \'react\';\\nimport { MentionsProps as RcMentionsProps } from \'rc-mentions/lib/Mentions\';\\nexport declare const Option: React.SFC<import(\\"rc-mentions/lib/Option\\").OptionProps>;\\nexport declare type MentionPlacement = \'top\' | \'bottom\';\\nexport interface OptionProps {\\n    value: string;\\n    children: React.ReactNode;\\n    [key: string]: any;\\n}\\nexport interface MentionProps extends RcMentionsProps {\\n    loading?: boolean;\\n}\\nexport interface MentionState {\\n    focused: boolean;\\n}\\ninterface MentionsConfig {\\n    prefix?: string | string[];\\n    split?: string;\\n}\\ninterface MentionsEntity {\\n    prefix: string;\\n    value: string;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<MentionProps & React.RefAttributes<HTMLElement>> {\\n    Option: typeof Option;\\n    getMentions: (value: string, config?: MentionsConfig) => MentionsEntity[];\\n}\\ndeclare const Mentions: CompoundedComponent;\\nexport default Mentions;\\n","antd/mentions/style/index.d.ts":"import \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../spin/style\';\\n","antd/menu/index.d.ts":"import * as React from \'react\';\\nimport { ItemGroup, MenuProps as RcMenuProps } from \'rc-menu\';\\nimport SubMenu, { SubMenuProps } from \'./SubMenu\';\\nimport Item, { MenuItemProps } from \'./MenuItem\';\\nimport { MenuTheme } from \'./MenuContext\';\\nexport { MenuItemGroupProps } from \'rc-menu\';\\nexport declare type MenuMode = \'vertical\' | \'vertical-left\' | \'vertical-right\' | \'horizontal\' | \'inline\';\\nexport interface MenuProps extends RcMenuProps {\\n    theme?: MenuTheme;\\n    inlineIndent?: number;\\n    focusable?: boolean;\\n}\\ndeclare class Menu extends React.Component<MenuProps, {}> {\\n    static Divider: React.FC<import(\\"rc-menu/lib/Divider\\").DividerProps>;\\n    static Item: typeof Item;\\n    static SubMenu: typeof SubMenu;\\n    static ItemGroup: typeof ItemGroup;\\n    render(): JSX.Element;\\n}\\nexport { MenuTheme, SubMenuProps, MenuItemProps };\\nexport default Menu;\\n","antd/menu/MenuContext.d.ts":"/// <reference types=\\"react\\" />\\nimport { DirectionType } from \'../config-provider\';\\nexport declare type MenuTheme = \'light\' | \'dark\';\\nexport interface MenuContextProps {\\n    inlineCollapsed: boolean;\\n    antdMenuTheme?: MenuTheme;\\n    direction?: DirectionType;\\n}\\ndeclare const MenuContext: import(\\"react\\").Context<MenuContextProps>;\\nexport default MenuContext;\\n","antd/menu/MenuItem.d.ts":"import * as React from \'react\';\\nimport { MenuItemProps as RcMenuItemProps } from \'rc-menu\';\\nimport { SiderContextProps } from \'../layout/Sider\';\\nexport interface MenuItemProps extends Omit<RcMenuItemProps, \'title\'> {\\n    icon?: React.ReactNode;\\n    danger?: boolean;\\n    title?: React.ReactNode;\\n}\\nexport default class MenuItem extends React.Component<MenuItemProps> {\\n    static isMenuItem: boolean;\\n    renderItemChildren(inlineCollapsed: boolean): {} | null | undefined;\\n    renderItem: ({ siderCollapsed }: SiderContextProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\n","antd/menu/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/menu/SubMenu.d.ts":"import * as React from \'react\';\\nimport { MenuContextProps } from \'./MenuContext\';\\ninterface TitleEventEntity {\\n    key: string;\\n    domEvent: Event;\\n}\\nexport interface SubMenuProps {\\n    rootPrefixCls?: string;\\n    className?: string;\\n    disabled?: boolean;\\n    level?: number;\\n    title?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    onTitleClick?: (e: TitleEventEntity) => void;\\n    onTitleMouseEnter?: (e: TitleEventEntity) => void;\\n    onTitleMouseLeave?: (e: TitleEventEntity) => void;\\n    popupOffset?: [number, number];\\n    popupClassName?: string;\\n}\\ndeclare class SubMenu extends React.Component<SubMenuProps, any> {\\n    static contextType: React.Context<MenuContextProps>;\\n    static isSubMenu: number;\\n    renderTitle(inlineCollapsed: boolean): {} | null | undefined;\\n    render(): JSX.Element;\\n}\\nexport default SubMenu;\\n","antd/message/hooks/useMessage.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance, NoticeContent as RCNoticeContent } from \'rc-notification/lib/Notification\';\\nimport { MessageInstance, ArgsProps } from \'..\';\\nexport default function createUseMessage(getRcNotificationInstance: (args: ArgsProps, callback: (info: {\\n    prefixCls: string;\\n    instance: RCNotificationInstance;\\n}) => void) => void, getRCNoticeProps: (args: ArgsProps, prefixCls: string) => RCNoticeContent): () => [MessageInstance, React.ReactElement];\\n","antd/message/index.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance } from \'rc-notification/lib/Notification\';\\ndeclare type NoticeType = \'info\' | \'success\' | \'error\' | \'warning\' | \'loading\';\\nexport declare function getKeyThenIncreaseKey(): number;\\nexport interface ConfigOptions {\\n    top?: number;\\n    duration?: number;\\n    prefixCls?: string;\\n    getContainer?: () => HTMLElement;\\n    transitionName?: string;\\n    maxCount?: number;\\n    rtl?: boolean;\\n}\\nexport interface ThenableArgument {\\n    (val: any): void;\\n}\\nexport interface MessageType extends PromiseLike<any> {\\n    (): void;\\n}\\nexport interface ArgsProps {\\n    content: React.ReactNode;\\n    duration: number | null;\\n    type: NoticeType;\\n    prefixCls?: string;\\n    onClose?: () => void;\\n    icon?: React.ReactNode;\\n    key?: string | number;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\\n}\\ndeclare type ConfigContent = React.ReactNode | string;\\ndeclare type ConfigDuration = number | (() => void);\\ndeclare type JointContent = ConfigContent | ArgsProps;\\nexport declare type ConfigOnClose = () => void;\\nexport declare function attachTypeApi(originalApi: any, type: string): void;\\nexport interface MessageInstance {\\n    info(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    success(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    error(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    warning(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    loading(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    open(args: ArgsProps): MessageType;\\n}\\nexport interface MessageApi extends MessageInstance {\\n    warn(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    config(options: ConfigOptions): void;\\n    destroy(messageKey?: React.Key): void;\\n    useMessage(): [MessageInstance, React.ReactElement];\\n}\\n/** @private test only function. Not work on production */\\nexport declare const getInstance: () => RCNotificationInstance | null;\\ndeclare const _default: MessageApi;\\nexport default _default;\\n","antd/message/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/modal/ActionButton.d.ts":"import * as React from \'react\';\\nimport { LegacyButtonType, ButtonProps } from \'../button/button\';\\nexport interface ActionButtonProps {\\n    type?: LegacyButtonType;\\n    actionFn?: (...args: any[]) => any | PromiseLike<any>;\\n    closeModal: Function;\\n    autoFocus?: boolean;\\n    prefixCls: string;\\n    buttonProps?: ButtonProps;\\n}\\ndeclare const ActionButton: React.FC<ActionButtonProps>;\\nexport default ActionButton;\\n","antd/modal/confirm.d.ts":"import { ModalFuncProps } from \'./Modal\';\\ndeclare type ConfigUpdate = ModalFuncProps | ((prevConfig: ModalFuncProps) => ModalFuncProps);\\nexport declare type ModalFunc = (props: ModalFuncProps) => {\\n    destroy: () => void;\\n    update: (configUpdate: ConfigUpdate) => void;\\n};\\nexport declare type ModalStaticFunctions = Record<NonNullable<ModalFuncProps[\'type\']>, ModalFunc>;\\nexport default function confirm(config: ModalFuncProps): {\\n    destroy: (...args: any[]) => void;\\n    update: (configUpdate: ConfigUpdate) => void;\\n};\\nexport declare function withWarn(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withInfo(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withSuccess(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withError(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withConfirm(props: ModalFuncProps): ModalFuncProps;\\nexport declare function globalConfig({ rootPrefixCls }: {\\n    rootPrefixCls?: string;\\n}): void;\\nexport {};\\n","antd/modal/ConfirmDialog.d.ts":"/// <reference types=\\"react\\" />\\nimport { ModalFuncProps } from \'./Modal\';\\ninterface ConfirmDialogProps extends ModalFuncProps {\\n    afterClose?: () => void;\\n    close: (...args: any[]) => void;\\n    autoFocusButton?: null | \'ok\' | \'cancel\';\\n    rootPrefixCls?: string;\\n}\\ndeclare const ConfirmDialog: (props: ConfirmDialogProps) => JSX.Element;\\nexport default ConfirmDialog;\\n","antd/modal/index.d.ts":"import OriginModal from \'./Modal\';\\nimport { ModalStaticFunctions, globalConfig } from \'./confirm\';\\nexport { ActionButtonProps } from \'./ActionButton\';\\nexport { ModalProps, ModalFuncProps } from \'./Modal\';\\ndeclare type ModalType = typeof OriginModal & ModalStaticFunctions & {\\n    destroyAll: () => void;\\n    config: typeof globalConfig;\\n};\\ndeclare const Modal: ModalType;\\nexport default Modal;\\n","antd/modal/locale.d.ts":"export interface ModalLocale {\\n    okText: string;\\n    cancelText: string;\\n    justOkText: string;\\n}\\nexport declare function changeConfirmLocale(newLocale?: ModalLocale): void;\\nexport declare function getConfirmLocale(): ModalLocale;\\n","antd/modal/Modal.d.ts":"import * as React from \'react\';\\nimport useModal from \'./useModal\';\\nimport { LegacyButtonType, ButtonProps } from \'../button/button\';\\nimport { DirectionType } from \'../config-provider\';\\nexport declare const destroyFns: Array<() => void>;\\nexport interface ModalProps {\\n    /** \u5bf9\u8bdd\u6846\u662f\u5426\u53ef\u89c1 */\\n    visible?: boolean;\\n    /** \u786e\u5b9a\u6309\u94ae loading */\\n    confirmLoading?: boolean;\\n    /** \u6807\u9898 */\\n    title?: React.ReactNode | string;\\n    /** \u662f\u5426\u663e\u793a\u53f3\u4e0a\u89d2\u7684\u5173\u95ed\u6309\u94ae */\\n    closable?: boolean;\\n    /** \u70b9\u51fb\u786e\u5b9a\u56de\u8c03 */\\n    onOk?: (e: React.MouseEvent<HTMLElement>) => void;\\n    /** \u70b9\u51fb\u6a21\u6001\u6846\u53f3\u4e0a\u89d2\u53c9\u3001\u53d6\u6d88\u6309\u94ae\u3001Props.maskClosable \u503c\u4e3a true \u65f6\u7684\u906e\u7f69\u5c42\u6216\u952e\u76d8\u6309\u4e0b Esc \u65f6\u7684\u56de\u8c03 */\\n    onCancel?: (e: React.MouseEvent<HTMLElement>) => void;\\n    afterClose?: () => void;\\n    /** \u5782\u76f4\u5c45\u4e2d */\\n    centered?: boolean;\\n    /** \u5bbd\u5ea6 */\\n    width?: string | number;\\n    /** \u5e95\u90e8\u5185\u5bb9 */\\n    footer?: React.ReactNode;\\n    /** \u786e\u8ba4\u6309\u94ae\u6587\u5b57 */\\n    okText?: React.ReactNode;\\n    /** \u786e\u8ba4\u6309\u94ae\u7c7b\u578b */\\n    okType?: LegacyButtonType;\\n    /** \u53d6\u6d88\u6309\u94ae\u6587\u5b57 */\\n    cancelText?: React.ReactNode;\\n    /** \u70b9\u51fb\u8499\u5c42\u662f\u5426\u5141\u8bb8\u5173\u95ed */\\n    maskClosable?: boolean;\\n    /** \u5f3a\u5236\u6e32\u67d3 Modal */\\n    forceRender?: boolean;\\n    okButtonProps?: ButtonProps;\\n    cancelButtonProps?: ButtonProps;\\n    destroyOnClose?: boolean;\\n    style?: React.CSSProperties;\\n    wrapClassName?: string;\\n    maskTransitionName?: string;\\n    transitionName?: string;\\n    className?: string;\\n    getContainer?: string | HTMLElement | getContainerFunc | false | null;\\n    zIndex?: number;\\n    bodyStyle?: React.CSSProperties;\\n    maskStyle?: React.CSSProperties;\\n    mask?: boolean;\\n    keyboard?: boolean;\\n    wrapProps?: any;\\n    prefixCls?: string;\\n    closeIcon?: React.ReactNode;\\n    modalRender?: (node: React.ReactNode) => React.ReactNode;\\n    focusTriggerAfterClose?: boolean;\\n}\\ndeclare type getContainerFunc = () => HTMLElement;\\nexport interface ModalFuncProps {\\n    prefixCls?: string;\\n    className?: string;\\n    visible?: boolean;\\n    title?: React.ReactNode;\\n    closable?: boolean;\\n    content?: React.ReactNode;\\n    onOk?: (...args: any[]) => any;\\n    onCancel?: (...args: any[]) => any;\\n    afterClose?: () => void;\\n    okButtonProps?: ButtonProps;\\n    cancelButtonProps?: ButtonProps;\\n    centered?: boolean;\\n    width?: string | number;\\n    okText?: React.ReactNode;\\n    okType?: LegacyButtonType;\\n    cancelText?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    mask?: boolean;\\n    maskClosable?: boolean;\\n    zIndex?: number;\\n    okCancel?: boolean;\\n    style?: React.CSSProperties;\\n    maskStyle?: React.CSSProperties;\\n    type?: \'info\' | \'success\' | \'error\' | \'warn\' | \'warning\' | \'confirm\';\\n    keyboard?: boolean;\\n    getContainer?: string | HTMLElement | getContainerFunc | false | null;\\n    autoFocusButton?: null | \'ok\' | \'cancel\';\\n    transitionName?: string;\\n    maskTransitionName?: string;\\n    direction?: DirectionType;\\n    bodyStyle?: React.CSSProperties;\\n    closeIcon?: React.ReactNode;\\n    modalRender?: (node: React.ReactNode) => React.ReactNode;\\n    focusTriggerAfterClose?: boolean;\\n}\\nexport interface ModalLocale {\\n    okText: string;\\n    cancelText: string;\\n    justOkText: string;\\n}\\ninterface ModalInterface extends React.FC<ModalProps> {\\n    useModal: typeof useModal;\\n}\\ndeclare const Modal: ModalInterface;\\nexport default Modal;\\n","antd/modal/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/modal/useModal/HookModal.d.ts":"import * as React from \'react\';\\nimport { ModalFuncProps } from \'../Modal\';\\nexport interface HookModalProps {\\n    afterClose: () => void;\\n    config: ModalFuncProps;\\n}\\nexport interface HookModalRef {\\n    destroy: () => void;\\n    update: (config: ModalFuncProps) => void;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<HookModalProps & React.RefAttributes<HookModalRef>>;\\nexport default _default;\\n","antd/modal/useModal/index.d.ts":"import * as React from \'react\';\\nimport { ModalStaticFunctions } from \'../confirm\';\\nexport default function useModal(): [Omit<ModalStaticFunctions, \'warn\'>, React.ReactElement];\\n","antd/notification/hooks/useNotification.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance, NoticeContent as RCNoticeContent } from \'rc-notification/lib/Notification\';\\nimport { NotificationInstance, ArgsProps } from \'..\';\\nexport default function createUseNotification(getNotificationInstance: (args: ArgsProps, callback: (info: {\\n    prefixCls: string;\\n    instance: RCNotificationInstance;\\n}) => void) => void, getRCNoticeProps: (args: ArgsProps, prefixCls: string) => RCNoticeContent): () => [NotificationInstance, React.ReactElement];\\n","antd/notification/index.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance } from \'rc-notification/lib/Notification\';\\nexport declare type NotificationPlacement = \'topLeft\' | \'topRight\' | \'bottomLeft\' | \'bottomRight\';\\nexport declare type IconType = \'success\' | \'info\' | \'error\' | \'warning\';\\nexport interface ConfigProps {\\n    top?: number;\\n    bottom?: number;\\n    duration?: number;\\n    prefixCls?: string;\\n    placement?: NotificationPlacement;\\n    getContainer?: () => HTMLElement;\\n    closeIcon?: React.ReactNode;\\n    rtl?: boolean;\\n}\\nexport interface ArgsProps {\\n    message: React.ReactNode;\\n    description?: React.ReactNode;\\n    btn?: React.ReactNode;\\n    key?: string;\\n    onClose?: () => void;\\n    duration?: number | null;\\n    icon?: React.ReactNode;\\n    placement?: NotificationPlacement;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    readonly type?: IconType;\\n    onClick?: () => void;\\n    top?: number;\\n    bottom?: number;\\n    getContainer?: () => HTMLElement;\\n    closeIcon?: React.ReactNode;\\n}\\nexport interface NotificationInstance {\\n    success(args: ArgsProps): void;\\n    error(args: ArgsProps): void;\\n    info(args: ArgsProps): void;\\n    warning(args: ArgsProps): void;\\n    open(args: ArgsProps): void;\\n}\\nexport interface NotificationApi extends NotificationInstance {\\n    warn(args: ArgsProps): void;\\n    close(key: string): void;\\n    config(options: ConfigProps): void;\\n    destroy(): void;\\n    useNotification: () => [NotificationInstance, React.ReactElement];\\n}\\n/** @private test only function. Not work on production */\\nexport declare const getInstance: (cacheKey: string) => Promise<RCNotificationInstance | null>;\\ndeclare const _default: NotificationApi;\\nexport default _default;\\n","antd/notification/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/page-header/index.d.ts":"import * as React from \'react\';\\nimport { TagType } from \'../tag\';\\nimport { BreadcrumbProps } from \'../breadcrumb\';\\nimport { AvatarProps } from \'../avatar\';\\nexport interface PageHeaderProps {\\n    backIcon?: React.ReactNode;\\n    prefixCls?: string;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    breadcrumb?: BreadcrumbProps;\\n    breadcrumbRender?: (props: PageHeaderProps, defaultDom: React.ReactNode) => React.ReactNode;\\n    tags?: React.ReactElement<TagType> | React.ReactElement<TagType>[];\\n    footer?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    avatar?: AvatarProps;\\n    onBack?: (e: React.MouseEvent<HTMLDivElement>) => void;\\n    className?: string;\\n    ghost?: boolean;\\n}\\ndeclare const PageHeader: React.FC<PageHeaderProps>;\\nexport default PageHeader;\\n","antd/page-header/style/index.d.ts":"import \'./index.less\';\\nimport \'../../breadcrumb/style\';\\nimport \'../../avatar/style\';\\n","antd/pagination/index.d.ts":"import Pagination from \'./Pagination\';\\nexport { PaginationProps, PaginationConfig } from \'./Pagination\';\\nexport default Pagination;\\n","antd/pagination/MiniSelect.d.ts":"import * as React from \'react\';\\nimport Select from \'../select\';\\ninterface MiniSelectInterface extends React.FC<any> {\\n    Option: typeof Select.Option;\\n}\\ndeclare const MiniSelect: MiniSelectInterface;\\nexport default MiniSelect;\\n","antd/pagination/Pagination.d.ts":"import * as React from \'react\';\\nexport interface PaginationProps {\\n    total?: number;\\n    defaultCurrent?: number;\\n    disabled?: boolean;\\n    current?: number;\\n    defaultPageSize?: number;\\n    pageSize?: number;\\n    onChange?: (page: number, pageSize?: number) => void;\\n    hideOnSinglePage?: boolean;\\n    showSizeChanger?: boolean;\\n    pageSizeOptions?: string[];\\n    onShowSizeChange?: (current: number, size: number) => void;\\n    showQuickJumper?: boolean | {\\n        goButton?: React.ReactNode;\\n    };\\n    showTitle?: boolean;\\n    showTotal?: (total: number, range: [number, number]) => React.ReactNode;\\n    size?: \'default\' | \'small\';\\n    responsive?: boolean;\\n    simple?: boolean;\\n    style?: React.CSSProperties;\\n    locale?: Object;\\n    className?: string;\\n    prefixCls?: string;\\n    selectPrefixCls?: string;\\n    itemRender?: (page: number, type: \'page\' | \'prev\' | \'next\' | \'jump-prev\' | \'jump-next\', originalElement: React.ReactElement<HTMLElement>) => React.ReactNode;\\n    role?: string;\\n    showLessItems?: boolean;\\n}\\nexport declare type PaginationPosition = \'top\' | \'bottom\' | \'both\';\\nexport interface PaginationConfig extends PaginationProps {\\n    position?: PaginationPosition;\\n}\\nexport declare type PaginationLocale = any;\\ndeclare const Pagination: React.FC<PaginationProps>;\\nexport default Pagination;\\n","antd/pagination/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\n","antd/popconfirm/index.d.ts":"import * as React from \'react\';\\nimport { AbstractTooltipProps } from \'../tooltip\';\\nimport { LegacyButtonType, NativeButtonProps } from \'../button/button\';\\nimport { RenderFunction } from \'../_util/getRenderPropValue\';\\nexport interface PopconfirmProps extends AbstractTooltipProps {\\n    title: React.ReactNode | RenderFunction;\\n    disabled?: boolean;\\n    onConfirm?: (e?: React.MouseEvent<HTMLElement>) => void;\\n    onCancel?: (e?: React.MouseEvent<HTMLElement>) => void;\\n    okText?: React.ReactNode;\\n    okType?: LegacyButtonType;\\n    cancelText?: React.ReactNode;\\n    okButtonProps?: NativeButtonProps;\\n    cancelButtonProps?: NativeButtonProps;\\n    icon?: React.ReactNode;\\n    onVisibleChange?: (visible: boolean, e?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLDivElement>) => void;\\n}\\nexport interface PopconfirmState {\\n    visible?: boolean;\\n}\\nexport interface PopconfirmLocale {\\n    okText: string;\\n    cancelText: string;\\n}\\ndeclare const Popconfirm: React.ForwardRefExoticComponent<PopconfirmProps & React.RefAttributes<unknown>>;\\nexport default Popconfirm;\\n","antd/popconfirm/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../popover/style\';\\nimport \'../../button/style\';\\nimport \'./index.less\';\\n","antd/popover/index.d.ts":"import * as React from \'react\';\\nimport { AbstractTooltipProps } from \'../tooltip\';\\nimport { RenderFunction } from \'../_util/getRenderPropValue\';\\nexport interface PopoverProps extends AbstractTooltipProps {\\n    title?: React.ReactNode | RenderFunction;\\n    content?: React.ReactNode | RenderFunction;\\n}\\ndeclare const Popover: React.ForwardRefExoticComponent<PopoverProps & React.RefAttributes<unknown>>;\\nexport default Popover;\\n","antd/popover/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/progress/Circle.d.ts":"import * as React from \'react\';\\nimport { ProgressProps } from \'./progress\';\\ninterface CircleProps extends ProgressProps {\\n    prefixCls: string;\\n    children: React.ReactNode;\\n    progressStatus: string;\\n}\\ndeclare const Circle: React.FC<CircleProps>;\\nexport default Circle;\\n","antd/progress/index.d.ts":"import Progress from \'./progress\';\\nexport { ProgressProps } from \'./progress\';\\nexport default Progress;\\n","antd/progress/Line.d.ts":"import * as React from \'react\';\\nimport { ProgressGradient, ProgressProps, StringGradients } from \'./progress\';\\nimport { DirectionType } from \'../config-provider\';\\ninterface LineProps extends ProgressProps {\\n    prefixCls: string;\\n    direction?: DirectionType;\\n    children: React.ReactNode;\\n}\\n/**\\n * @example\\n *   {\\n *     \\"0%\\": \\"#afc163\\",\\n *     \\"75%\\": \\"#009900\\",\\n *     \\"50%\\": \\"green\\", // ====> \'#afc163 0%, #66FF00 25%, #00CC00 50%, #009900 75%, #ffffff 100%\'\\n *     \\"25%\\": \\"#66FF00\\",\\n *     \\"100%\\": \\"#ffffff\\"\\n *   }\\n */\\nexport declare const sortGradient: (gradients: StringGradients) => string;\\n/**\\n * Then this man came to realize the truth: Besides six pence, there is the moon. Besides bread and\\n * butter, there is the bug. And... Besides women, there is the code.\\n *\\n * @example\\n *   {\\n *     \\"0%\\": \\"#afc163\\",\\n *     \\"25%\\": \\"#66FF00\\",\\n *     \\"50%\\": \\"#00CC00\\", // ====>  linear-gradient(to right, #afc163 0%, #66FF00 25%,\\n *     \\"75%\\": \\"#009900\\", //        #00CC00 50%, #009900 75%, #ffffff 100%)\\n *     \\"100%\\": \\"#ffffff\\"\\n *   }\\n */\\nexport declare const handleGradient: (strokeColor: ProgressGradient, directionConfig: DirectionType) => {\\n    backgroundImage: string;\\n};\\ndeclare const Line: React.FC<LineProps>;\\nexport default Line;\\n","antd/progress/progress.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\ndeclare const ProgressTypes: [\\"line\\", \\"circle\\", \\"dashboard\\"];\\nexport declare type ProgressType = typeof ProgressTypes[number];\\ndeclare const ProgressStatuses: [\\"normal\\", \\"exception\\", \\"active\\", \\"success\\"];\\nexport declare type ProgressSize = \'default\' | \'small\';\\nexport declare type StringGradients = {\\n    [percentage: string]: string;\\n};\\ndeclare type FromToGradients = {\\n    from: string;\\n    to: string;\\n};\\nexport declare type ProgressGradient = {\\n    direction?: string;\\n} & (StringGradients | FromToGradients);\\nexport interface SuccessProps {\\n    percent?: number;\\n    /** @deprecated Use `percent` instead */\\n    progress?: number;\\n    strokeColor?: string;\\n}\\nexport interface ProgressProps {\\n    prefixCls?: string;\\n    className?: string;\\n    type?: ProgressType;\\n    percent?: number;\\n    format?: (percent?: number, successPercent?: number) => React.ReactNode;\\n    status?: typeof ProgressStatuses[number];\\n    showInfo?: boolean;\\n    strokeWidth?: number;\\n    strokeLinecap?: \'butt\' | \'square\' | \'round\';\\n    strokeColor?: string | ProgressGradient;\\n    trailColor?: string;\\n    width?: number;\\n    success?: SuccessProps;\\n    style?: React.CSSProperties;\\n    gapDegree?: number;\\n    gapPosition?: \'top\' | \'bottom\' | \'left\' | \'right\';\\n    size?: ProgressSize;\\n    steps?: number;\\n    /** @deprecated Use `success` instead */\\n    successPercent?: number;\\n}\\nexport default class Progress extends React.Component<ProgressProps> {\\n    static defaultProps: {\\n        type: \\"circle\\" | \\"line\\" | \\"dashboard\\" | undefined;\\n        percent: number;\\n        showInfo: boolean;\\n        trailColor: null;\\n        size: \\"small\\" | \\"default\\" | undefined;\\n        gapDegree: undefined;\\n        strokeLinecap: \\"round\\" | \\"butt\\" | \\"square\\" | undefined;\\n    };\\n    getPercentNumber(): number;\\n    getProgressStatus(): \\"success\\" | \\"normal\\" | \\"active\\" | \\"exception\\";\\n    renderProcessInfo(prefixCls: string, progressStatus: typeof ProgressStatuses[number]): JSX.Element | null;\\n    renderProgress: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport {};\\n","antd/progress/Steps.d.ts":"import * as React from \'react\';\\nimport { ProgressProps, ProgressSize } from \'./progress\';\\ninterface StepsProps extends ProgressProps {\\n    steps: number;\\n    size?: ProgressSize;\\n    strokeColor?: string;\\n    trailColor?: string;\\n}\\ndeclare const Steps: React.FC<StepsProps>;\\nexport default Steps;\\n","antd/progress/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/progress/utils.d.ts":"export declare function validProgress(progress: number | undefined): number;\\nexport declare function getSuccessPercent({ success, successPercent, }: {\\n    success?: {\\n        progress?: number;\\n        percent?: number;\\n    };\\n    successPercent?: number;\\n}): number | undefined;\\n","antd/radio/context.d.ts":"import * as React from \'react\';\\nimport { RadioGroupContextProps } from \'./interface\';\\ndeclare const RadioGroupContext: React.Context<RadioGroupContextProps | null>;\\nexport declare const RadioGroupContextProvider: React.Provider<RadioGroupContextProps | null>;\\nexport default RadioGroupContext;\\n","antd/radio/group.d.ts":"import * as React from \'react\';\\nimport { RadioGroupProps } from \'./interface\';\\ndeclare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<RadioGroupProps & React.RefAttributes<HTMLDivElement>>>;\\nexport default _default;\\n","antd/radio/index.d.ts":"import * as React from \'react\';\\nimport Group from \'./group\';\\nimport Button from \'./radioButton\';\\nimport { RadioProps } from \'./interface\';\\nexport { RadioGroupButtonStyle, RadioGroupOptionType, RadioGroupProps, RadioGroupContextProps, RadioProps, RadioChangeEventTarget, RadioChangeEvent, } from \'./interface\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<RadioProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n    Button: typeof Button;\\n}\\ndeclare const Radio: CompoundedComponent;\\nexport { Button, Group };\\nexport default Radio;\\n","antd/radio/interface.d.ts":"import * as React from \'react\';\\nimport { AbstractCheckboxGroupProps } from \'../checkbox/Group\';\\nimport { AbstractCheckboxProps } from \'../checkbox/Checkbox\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type RadioGroupButtonStyle = \'outline\' | \'solid\';\\nexport declare type RadioGroupOptionType = \'default\' | \'button\';\\nexport interface RadioGroupProps extends AbstractCheckboxGroupProps {\\n    defaultValue?: any;\\n    value?: any;\\n    onChange?: (e: RadioChangeEvent) => void;\\n    size?: SizeType;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n    name?: string;\\n    children?: React.ReactNode;\\n    id?: string;\\n    optionType?: RadioGroupOptionType;\\n    buttonStyle?: RadioGroupButtonStyle;\\n}\\nexport interface RadioGroupContextProps {\\n    onChange: (e: RadioChangeEvent) => void;\\n    value: any;\\n    disabled?: boolean;\\n    name?: string;\\n}\\nexport declare type RadioProps = AbstractCheckboxProps<RadioChangeEvent>;\\nexport interface RadioChangeEventTarget extends RadioProps {\\n    checked: boolean;\\n}\\nexport interface RadioChangeEvent {\\n    target: RadioChangeEventTarget;\\n    stopPropagation: () => void;\\n    preventDefault: () => void;\\n    nativeEvent: MouseEvent;\\n}\\n","antd/radio/radio.d.ts":"import * as React from \'react\';\\nimport { RadioProps } from \'./interface\';\\ndeclare const Radio: React.ForwardRefExoticComponent<RadioProps & React.RefAttributes<unknown>>;\\nexport default Radio;\\n","antd/radio/radioButton.d.ts":"import * as React from \'react\';\\nimport { RadioChangeEvent } from \'./interface\';\\nimport { AbstractCheckboxProps } from \'../checkbox/Checkbox\';\\nexport declare type RadioButtonProps = AbstractCheckboxProps<RadioChangeEvent>;\\ndeclare const _default: React.ForwardRefExoticComponent<RadioButtonProps & React.RefAttributes<any>>;\\nexport default _default;\\n","antd/radio/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/rate/index.d.ts":"import * as React from \'react\';\\nexport interface RateProps {\\n    prefixCls?: string;\\n    count?: number;\\n    value?: number;\\n    defaultValue?: number;\\n    allowHalf?: boolean;\\n    allowClear?: boolean;\\n    disabled?: boolean;\\n    tooltips?: Array<string>;\\n    onChange?: (value: number) => void;\\n    onHoverChange?: (value: number) => void;\\n    character?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\ndeclare const Rate: React.ForwardRefExoticComponent<RateProps & React.RefAttributes<unknown>>;\\nexport default Rate;\\n","antd/rate/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/result/index.d.ts":"import * as React from \'react\';\\nexport declare const IconMap: {\\n    success: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    error: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    info: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    warning: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n};\\nexport declare const ExceptionMap: {\\n    \'404\': () => JSX.Element;\\n    \'500\': () => JSX.Element;\\n    \'403\': () => JSX.Element;\\n};\\nexport declare type ExceptionStatusType = 403 | 404 | 500 | \'403\' | \'404\' | \'500\';\\nexport declare type ResultStatusType = ExceptionStatusType | keyof typeof IconMap;\\nexport interface ResultProps {\\n    icon?: React.ReactNode;\\n    status?: ResultStatusType;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport interface ResultType extends React.FC<ResultProps> {\\n    PRESENTED_IMAGE_404: React.ReactNode;\\n    PRESENTED_IMAGE_403: React.ReactNode;\\n    PRESENTED_IMAGE_500: React.ReactNode;\\n}\\ndeclare const Result: ResultType;\\nexport default Result;\\n","antd/result/noFound.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const NoFound: () => JSX.Element;\\nexport default NoFound;\\n","antd/result/serverError.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const ServerError: () => JSX.Element;\\nexport default ServerError;\\n","antd/result/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/result/unauthorized.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Unauthorized: () => JSX.Element;\\nexport default Unauthorized;\\n","antd/row/index.d.ts":"import { Row, RowProps } from \'../grid\';\\nexport { RowProps };\\nexport default Row;\\n","antd/row/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../grid/style\';\\n","antd/select/index.d.ts":"import * as React from \'react\';\\nimport { Option, OptGroup, SelectProps as RcSelectProps } from \'rc-select\';\\nimport { OptionProps } from \'rc-select/lib/Option\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare type RawValue = string | number;\\nexport { OptionProps };\\nexport declare type OptionType = typeof Option;\\nexport interface LabeledValue {\\n    key?: string;\\n    value: RawValue;\\n    label: React.ReactNode;\\n}\\nexport declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];\\nexport interface InternalSelectProps<VT> extends Omit<RcSelectProps<VT>, \'mode\'> {\\n    suffixIcon?: React.ReactNode;\\n    size?: SizeType;\\n    mode?: \'multiple\' | \'tags\' | \'SECRET_COMBOBOX_MODE_DO_NOT_USE\';\\n    bordered?: boolean;\\n}\\nexport interface SelectProps<VT> extends Omit<InternalSelectProps<VT>, \'inputIcon\' | \'mode\' | \'getInputElement\' | \'backfill\'> {\\n    mode?: \'multiple\' | \'tags\';\\n}\\nexport interface RefSelectProps {\\n    focus: () => void;\\n    blur: () => void;\\n}\\ndeclare const SelectRef: <VT extends SelectValue = SelectValue>(props: SelectProps<VT> & {\\n    ref?: ((instance: RefSelectProps | null) => void) | React.RefObject<RefSelectProps> | null | undefined;\\n}) => React.ReactElement;\\ndeclare type InternalSelectType = typeof SelectRef;\\ninterface SelectInterface extends InternalSelectType {\\n    SECRET_COMBOBOX_MODE_DO_NOT_USE: string;\\n    Option: typeof Option;\\n    OptGroup: typeof OptGroup;\\n}\\ndeclare const Select: SelectInterface;\\nexport default Select;\\n","antd/select/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\n","antd/select/utils/iconUtil.d.ts":"import * as React from \'react\';\\nexport default function getIcons({ suffixIcon, clearIcon, menuItemSelectedIcon, removeIcon, loading, multiple, prefixCls, }: {\\n    suffixIcon?: React.ReactNode;\\n    clearIcon?: React.ReactNode;\\n    menuItemSelectedIcon?: React.ReactNode;\\n    removeIcon?: React.ReactNode;\\n    loading?: boolean;\\n    multiple?: boolean;\\n    prefixCls: string;\\n}): {\\n    clearIcon: React.ReactNode;\\n    suffixIcon: {} | null;\\n    itemIcon: {} | null;\\n    removeIcon: {} | null;\\n};\\n","antd/skeleton/Avatar.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface AvatarProps extends Omit<SkeletonElementProps, \'shape\'> {\\n    shape?: \'circle\' | \'square\';\\n}\\ndeclare const SkeletonAvatar: {\\n    (props: AvatarProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n        shape: string;\\n    };\\n};\\nexport default SkeletonAvatar;\\n","antd/skeleton/Button.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonButtonProps extends Omit<SkeletonElementProps, \'size\'> {\\n    size?: \'large\' | \'small\' | \'default\';\\n}\\ndeclare const SkeletonButton: {\\n    (props: SkeletonButtonProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n    };\\n};\\nexport default SkeletonButton;\\n","antd/skeleton/Element.d.ts":"import * as React from \'react\';\\nexport interface SkeletonElementProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    size?: \'large\' | \'small\' | \'default\' | number;\\n    shape?: \'circle\' | \'square\' | \'round\';\\n    active?: boolean;\\n}\\ndeclare const Element: (props: SkeletonElementProps) => JSX.Element;\\nexport default Element;\\n","antd/skeleton/Image.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonImageProps extends Omit<SkeletonElementProps, \'size\' | \'shape\' | \'active\'> {\\n}\\ndeclare const SkeletonImage: (props: SkeletonImageProps) => JSX.Element;\\nexport default SkeletonImage;\\n","antd/skeleton/index.d.ts":"import Skeleton from \'./Skeleton\';\\nexport { SkeletonProps } from \'./Skeleton\';\\nexport default Skeleton;\\n","antd/skeleton/Input.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonInputProps extends Omit<SkeletonElementProps, \'size\' | \'shape\'> {\\n    size?: \'large\' | \'small\' | \'default\';\\n}\\ndeclare const SkeletonInput: {\\n    (props: SkeletonInputProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n    };\\n};\\nexport default SkeletonInput;\\n","antd/skeleton/Paragraph.d.ts":"import * as React from \'react\';\\ndeclare type widthUnit = number | string;\\nexport interface SkeletonParagraphProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    width?: widthUnit | Array<widthUnit>;\\n    rows?: number;\\n}\\ndeclare const Paragraph: (props: SkeletonParagraphProps) => JSX.Element;\\nexport default Paragraph;\\n","antd/skeleton/Skeleton.d.ts":"import * as React from \'react\';\\nimport { SkeletonTitleProps } from \'./Title\';\\nimport { SkeletonParagraphProps } from \'./Paragraph\';\\nimport { AvatarProps } from \'./Avatar\';\\ninterface SkeletonAvatarProps extends Omit<AvatarProps, \'active\'> {\\n}\\nexport interface SkeletonProps {\\n    active?: boolean;\\n    loading?: boolean;\\n    prefixCls?: string;\\n    className?: string;\\n    children?: React.ReactNode;\\n    avatar?: SkeletonAvatarProps | boolean;\\n    title?: SkeletonTitleProps | boolean;\\n    paragraph?: SkeletonParagraphProps | boolean;\\n    round?: boolean;\\n}\\ndeclare const Skeleton: {\\n    (props: SkeletonProps): JSX.Element;\\n    defaultProps: {\\n        avatar: boolean;\\n        title: boolean;\\n        paragraph: boolean;\\n    };\\n    Button: {\\n        (props: import(\\"./Button\\").SkeletonButtonProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n        };\\n    };\\n    Avatar: {\\n        (props: AvatarProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n            shape: string;\\n        };\\n    };\\n    Input: {\\n        (props: import(\\"./Input\\").SkeletonInputProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n        };\\n    };\\n    Image: (props: import(\\"./Image\\").SkeletonImageProps) => JSX.Element;\\n};\\nexport default Skeleton;\\n","antd/skeleton/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/skeleton/Title.d.ts":"import * as React from \'react\';\\nexport interface SkeletonTitleProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    width?: number | string;\\n}\\ndeclare const Title: ({ prefixCls, className, width, style }: SkeletonTitleProps) => JSX.Element;\\nexport default Title;\\n","antd/slider/index.d.ts":"import * as React from \'react\';\\nimport { TooltipPlacement } from \'../tooltip\';\\nexport interface SliderMarks {\\n    [key: number]: React.ReactNode | {\\n        style: React.CSSProperties;\\n        label: React.ReactNode;\\n    };\\n}\\ninterface HandleGeneratorInfo {\\n    value?: number;\\n    dragging?: boolean;\\n    index: number;\\n}\\nexport declare type HandleGeneratorFn = (config: {\\n    tooltipPrefixCls?: string;\\n    prefixCls?: string;\\n    info: HandleGeneratorInfo;\\n}) => React.ReactElement;\\nexport interface SliderBaseProps {\\n    prefixCls?: string;\\n    tooltipPrefixCls?: string;\\n    reverse?: boolean;\\n    min?: number;\\n    max?: number;\\n    step?: null | number;\\n    marks?: SliderMarks;\\n    dots?: boolean;\\n    included?: boolean;\\n    disabled?: boolean;\\n    vertical?: boolean;\\n    tipFormatter?: null | ((value?: number) => React.ReactNode);\\n    className?: string;\\n    id?: string;\\n    style?: React.CSSProperties;\\n    tooltipVisible?: boolean;\\n    tooltipPlacement?: TooltipPlacement;\\n    getTooltipPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    autoFocus?: boolean;\\n}\\nexport interface SliderSingleProps extends SliderBaseProps {\\n    range?: false;\\n    value?: number;\\n    defaultValue?: number;\\n    onChange?: (value: number) => void;\\n    onAfterChange?: (value: number) => void;\\n    handleStyle?: React.CSSProperties;\\n    trackStyle?: React.CSSProperties;\\n}\\nexport interface SliderRangeProps extends SliderBaseProps {\\n    range: true | SliderRange;\\n    value?: [number, number];\\n    defaultValue?: [number, number];\\n    onChange?: (value: [number, number]) => void;\\n    onAfterChange?: (value: [number, number]) => void;\\n    handleStyle?: React.CSSProperties[];\\n    trackStyle?: React.CSSProperties[];\\n}\\ninterface SliderRange {\\n    draggableTrack?: boolean;\\n}\\nexport declare type Visibles = {\\n    [index: number]: boolean;\\n};\\ndeclare const Slider: React.ForwardRefExoticComponent<(SliderSingleProps & React.RefAttributes<unknown>) | (SliderRangeProps & React.RefAttributes<unknown>)>;\\nexport default Slider;\\n","antd/slider/SliderTooltip.d.ts":"import * as React from \'react\';\\ndeclare const SliderTooltip: React.ForwardRefExoticComponent<(import(\\"../tooltip\\").TooltipPropsWithOverlay & React.RefAttributes<unknown>) | (import(\\"../tooltip\\").TooltipPropsWithTitle & React.RefAttributes<unknown>)>;\\nexport default SliderTooltip;\\n","antd/slider/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/space/index.d.ts":"import * as React from \'react\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare const SpaceContext: React.Context<{\\n    latestIndex: number;\\n    horizontalSize: number;\\n    verticalSize: number;\\n}>;\\nexport declare type SpaceSize = SizeType | number;\\nexport interface SpaceProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    size?: SpaceSize | [SpaceSize, SpaceSize];\\n    direction?: \'horizontal\' | \'vertical\';\\n    align?: \'start\' | \'end\' | \'center\' | \'baseline\';\\n    split?: React.ReactNode;\\n    wrap?: boolean;\\n}\\ndeclare const Space: React.FC<SpaceProps>;\\nexport default Space;\\n","antd/space/Item.d.ts":"import * as React from \'react\';\\nexport interface ItemProps {\\n    className: string;\\n    children: React.ReactNode;\\n    index: number;\\n    direction?: \'horizontal\' | \'vertical\';\\n    marginDirection: \'marginLeft\' | \'marginRight\';\\n    split?: string | React.ReactNode;\\n    wrap?: boolean;\\n}\\nexport default function Item({ className, direction, index, marginDirection, children, split, wrap, }: ItemProps): JSX.Element | null;\\n","antd/space/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/spin/index.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\ndeclare const SpinSizes: [\\"small\\", \\"default\\", \\"large\\"];\\nexport declare type SpinSize = typeof SpinSizes[number];\\nexport declare type SpinIndicator = React.ReactElement<HTMLElement>;\\nexport interface SpinProps {\\n    prefixCls?: string;\\n    className?: string;\\n    spinning?: boolean;\\n    style?: React.CSSProperties;\\n    size?: SpinSize;\\n    tip?: string;\\n    delay?: number;\\n    wrapperClassName?: string;\\n    indicator?: SpinIndicator;\\n}\\nexport interface SpinState {\\n    spinning?: boolean;\\n    notCssAnimationSupported?: boolean;\\n}\\ndeclare class Spin extends React.Component<SpinProps, SpinState> {\\n    static defaultProps: {\\n        spinning: boolean;\\n        size: \\"small\\" | \\"large\\" | \\"default\\";\\n        wrapperClassName: string;\\n    };\\n    static setDefaultIndicator(indicator: React.ReactNode): void;\\n    originalUpdateSpinning: () => void;\\n    constructor(props: SpinProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    debouncifyUpdateSpinning: (props?: SpinProps | undefined) => void;\\n    updateSpinning: () => void;\\n    cancelExistingSpin(): void;\\n    isNestedPattern(): boolean;\\n    renderSpin: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Spin;\\n","antd/spin/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/statistic/Countdown.d.ts":"import * as React from \'react\';\\nimport { StatisticProps } from \'./Statistic\';\\nimport { countdownValueType, FormatConfig } from \'./utils\';\\ninterface CountdownProps extends StatisticProps {\\n    value?: countdownValueType;\\n    format?: string;\\n    onFinish?: () => void;\\n}\\ndeclare class Countdown extends React.Component<CountdownProps, {}> {\\n    static defaultProps: Partial<CountdownProps>;\\n    countdownId?: number;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    syncTimer: () => void;\\n    startTimer: () => void;\\n    stopTimer: () => void;\\n    formatCountdown: (value: countdownValueType, config: FormatConfig) => string;\\n    valueRender: (node: React.ReactElement<HTMLDivElement>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;\\n    render(): JSX.Element;\\n}\\nexport default Countdown;\\n","antd/statistic/index.d.ts":"import Statistic, { StatisticProps } from \'./Statistic\';\\nexport { StatisticProps };\\nexport default Statistic;\\n","antd/statistic/Number.d.ts":"import * as React from \'react\';\\nimport { valueType, FormatConfig } from \'./utils\';\\ninterface NumberProps extends FormatConfig {\\n    value: valueType;\\n}\\ndeclare const StatisticNumber: React.FC<NumberProps>;\\nexport default StatisticNumber;\\n","antd/statistic/Statistic.d.ts":"import * as React from \'react\';\\nimport Countdown from \'./Countdown\';\\nimport { valueType, FormatConfig } from \'./utils\';\\ninterface StatisticComponent {\\n    Countdown: typeof Countdown;\\n}\\nexport interface StatisticProps extends FormatConfig {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    value?: valueType;\\n    valueStyle?: React.CSSProperties;\\n    valueRender?: (node: React.ReactNode) => React.ReactNode;\\n    title?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    suffix?: React.ReactNode;\\n    loading?: boolean;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n}\\ndeclare const WrapperStatistic: React.FC<StatisticProps> & StatisticComponent;\\nexport default WrapperStatistic;\\n","antd/statistic/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../skeleton/style\';\\n","antd/statistic/utils.d.ts":"import * as React from \'react\';\\nexport declare type valueType = number | string;\\nexport declare type countdownValueType = valueType | string;\\nexport declare type Formatter = false | \'number\' | \'countdown\' | ((value: valueType, config?: FormatConfig) => React.ReactNode);\\nexport interface FormatConfig {\\n    formatter?: Formatter;\\n    decimalSeparator?: string;\\n    groupSeparator?: string;\\n    precision?: number;\\n    prefixCls?: string;\\n}\\nexport interface CountdownFormatConfig extends FormatConfig {\\n    format?: string;\\n}\\nexport declare function formatTimeStr(duration: number, format: string): string;\\nexport declare function formatCountdown(value: countdownValueType, config: CountdownFormatConfig): string;\\n","antd/steps/index.d.ts":"import * as React from \'react\';\\nexport interface StepsProps {\\n    type?: \'default\' | \'navigation\';\\n    className?: string;\\n    current?: number;\\n    direction?: \'horizontal\' | \'vertical\';\\n    iconPrefix?: string;\\n    initial?: number;\\n    labelPlacement?: \'horizontal\' | \'vertical\';\\n    prefixCls?: string;\\n    progressDot?: boolean | Function;\\n    responsive?: boolean;\\n    size?: \'default\' | \'small\';\\n    status?: \'wait\' | \'process\' | \'finish\' | \'error\';\\n    style?: React.CSSProperties;\\n    percent?: number;\\n    onChange?: (current: number) => void;\\n}\\nexport interface StepProps {\\n    className?: string;\\n    description?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    status?: \'wait\' | \'process\' | \'finish\' | \'error\';\\n    disabled?: boolean;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    style?: React.CSSProperties;\\n}\\ninterface StepsType extends React.FC<StepsProps> {\\n    Step: React.ClassicComponentClass<StepProps>;\\n}\\ndeclare const Steps: StepsType;\\nexport default Steps;\\n","antd/steps/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../progress/style\';\\n","antd/style/index.d.ts":"import \'./index.less\';\\n","antd/switch/index.d.ts":"import * as React from \'react\';\\nexport declare type SwitchSize = \'small\' | \'default\';\\nexport declare type SwitchChangeEventHandler = (checked: boolean, event: MouseEvent) => void;\\nexport declare type SwitchClickEventHandler = SwitchChangeEventHandler;\\nexport interface SwitchProps {\\n    prefixCls?: string;\\n    size?: SwitchSize;\\n    className?: string;\\n    checked?: boolean;\\n    defaultChecked?: boolean;\\n    onChange?: SwitchChangeEventHandler;\\n    onClick?: SwitchClickEventHandler;\\n    checkedChildren?: React.ReactNode;\\n    unCheckedChildren?: React.ReactNode;\\n    disabled?: boolean;\\n    loading?: boolean;\\n    autoFocus?: boolean;\\n    style?: React.CSSProperties;\\n    title?: string;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<SwitchProps & React.RefAttributes<HTMLElement>> {\\n    __ANT_SWITCH: boolean;\\n}\\ndeclare const Switch: CompoundedComponent;\\nexport default Switch;\\n","antd/switch/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/table/Column.d.ts":"import { ColumnType } from \'./interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/** This is a syntactic sugar for `columns` prop. So HOC will not work on this. */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): null;\\nexport default Column;\\n","antd/table/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnType } from \'./interface\';\\nimport { ColumnProps } from \'./Column\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/** This is a syntactic sugar for `columns` prop. So HOC will not work on this. */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): null;\\nexport default ColumnGroup;\\n","antd/table/ExpandIcon.d.ts":"import * as React from \'react\';\\nimport { TableLocale } from \'./interface\';\\ninterface DefaultExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    onExpand: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n    record: RecordType;\\n    expanded: boolean;\\n    expandable: boolean;\\n}\\ndeclare function renderExpandIcon(locale: TableLocale): <RecordType>({ prefixCls, onExpand, record, expanded, expandable, }: DefaultExpandIconProps<RecordType>) => JSX.Element;\\nexport default renderExpandIcon;\\n","antd/table/hooks/useFilter/FilterDropdown.d.ts":"import * as React from \'react\';\\nimport { ColumnType, Key, TableLocale, GetPopupContainer } from \'../../interface\';\\nimport { FilterState } from \'.\';\\nexport interface FilterDropdownProps<RecordType> {\\n    prefixCls: string;\\n    dropdownPrefixCls: string;\\n    column: ColumnType<RecordType>;\\n    filterState?: FilterState<RecordType>;\\n    filterMultiple: boolean;\\n    columnKey: Key;\\n    children: React.ReactNode;\\n    triggerFilter: (filterState: FilterState<RecordType>) => void;\\n    locale: TableLocale;\\n    getPopupContainer?: GetPopupContainer;\\n}\\ndeclare function FilterDropdown<RecordType>(props: FilterDropdownProps<RecordType>): JSX.Element;\\nexport default FilterDropdown;\\n","antd/table/hooks/useFilter/FilterWrapper.d.ts":"import * as React from \'react\';\\nexport interface FilterDropdownMenuWrapperProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n}\\ndeclare const FilterDropdownMenuWrapper: (props: FilterDropdownMenuWrapperProps) => JSX.Element;\\nexport default FilterDropdownMenuWrapper;\\n","antd/table/hooks/useFilter/index.d.ts":"import { TransformColumns, ColumnsType, ColumnType, Key, TableLocale, GetPopupContainer } from \'../../interface\';\\nexport interface FilterState<RecordType> {\\n    column: ColumnType<RecordType>;\\n    key: Key;\\n    filteredKeys?: Key[] | null;\\n    forceFiltered?: boolean;\\n}\\nexport declare function getFilterData<RecordType>(data: RecordType[], filterStates: FilterState<RecordType>[]): RecordType[];\\ninterface FilterConfig<RecordType> {\\n    prefixCls: string;\\n    dropdownPrefixCls: string;\\n    mergedColumns: ColumnsType<RecordType>;\\n    locale: TableLocale;\\n    onFilterChange: (filters: Record<string, (Key | boolean)[] | null>, filterStates: FilterState<RecordType>[]) => void;\\n    getPopupContainer?: GetPopupContainer;\\n}\\ndeclare function useFilter<RecordType>({ prefixCls, dropdownPrefixCls, mergedColumns, onFilterChange, getPopupContainer, locale: tableLocale, }: FilterConfig<RecordType>): [\\n    TransformColumns<RecordType>,\\n    FilterState<RecordType>[],\\n    () => Record<string, (Key | boolean)[] | null>\\n];\\nexport default useFilter;\\n","antd/table/hooks/useLazyKVMap.d.ts":"import { Key, GetRowKey } from \'../interface\';\\nexport default function useLazyKVMap<RecordType>(data: readonly RecordType[], childrenColumnName: string, getRowKey: GetRowKey<RecordType>): ((key: Key) => RecordType)[];\\n","antd/table/hooks/usePagination.d.ts":"import { TablePaginationConfig } from \'../interface\';\\nexport declare const DEFAULT_PAGE_SIZE = 10;\\nexport declare function getPaginationParam(pagination: TablePaginationConfig | boolean | undefined, mergedPagination: TablePaginationConfig): any;\\nexport default function usePagination(total: number, pagination: TablePaginationConfig | false | undefined, onChange: (current: number, pageSize: number) => void): [TablePaginationConfig, () => void];\\n","antd/table/hooks/useSelection.d.ts":"import { TableRowSelection, Key, GetRowKey, TableLocale, SelectionItem, TransformColumns, ExpandType, GetPopupContainer } from \'../interface\';\\nexport declare const SELECTION_ALL: \\"SELECT_ALL\\";\\nexport declare const SELECTION_INVERT: \\"SELECT_INVERT\\";\\nexport declare const SELECTION_NONE: \\"SELECT_NONE\\";\\ninterface UseSelectionConfig<RecordType> {\\n    prefixCls: string;\\n    pageData: RecordType[];\\n    data: RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    getRecordByKey: (key: Key) => RecordType;\\n    expandType: ExpandType;\\n    childrenColumnName: string;\\n    expandIconColumnIndex?: number;\\n    locale: TableLocale;\\n    getPopupContainer?: GetPopupContainer;\\n}\\nexport declare type INTERNAL_SELECTION_ITEM = SelectionItem | typeof SELECTION_ALL | typeof SELECTION_INVERT | typeof SELECTION_NONE;\\nexport default function useSelection<RecordType>(rowSelection: TableRowSelection<RecordType> | undefined, config: UseSelectionConfig<RecordType>): [TransformColumns<RecordType>, Set<Key>];\\nexport {};\\n","antd/table/hooks/useSorter.d.ts":"import { TransformColumns, ColumnsType, Key, ColumnType, SortOrder, ColumnTitleProps, SorterResult, TableLocale } from \'../interface\';\\nimport { TooltipProps } from \'../../tooltip\';\\nexport interface SortState<RecordType> {\\n    column: ColumnType<RecordType>;\\n    key: Key;\\n    sortOrder: SortOrder | null;\\n    multiplePriority: number | false;\\n}\\nexport declare function getSortData<RecordType>(data: readonly RecordType[], sortStates: SortState<RecordType>[], childrenColumnName: string): RecordType[];\\ninterface SorterConfig<RecordType> {\\n    prefixCls: string;\\n    mergedColumns: ColumnsType<RecordType>;\\n    onSorterChange: (sorterResult: SorterResult<RecordType> | SorterResult<RecordType>[], sortStates: SortState<RecordType>[]) => void;\\n    sortDirections: SortOrder[];\\n    tableLocale?: TableLocale;\\n    showSorterTooltip?: boolean | TooltipProps;\\n}\\nexport default function useFilterSorter<RecordType>({ prefixCls, mergedColumns, onSorterChange, sortDirections, tableLocale, showSorterTooltip, }: SorterConfig<RecordType>): [\\n    TransformColumns<RecordType>,\\n    SortState<RecordType>[],\\n    ColumnTitleProps<RecordType>,\\n    () => SorterResult<RecordType> | SorterResult<RecordType>[]\\n];\\nexport {};\\n","antd/table/hooks/useTitleColumns.d.ts":"import { TransformColumns, ColumnTitleProps } from \'../interface\';\\nexport default function useTitleColumns<RecordType>(columnTitleProps: ColumnTitleProps<RecordType>): [TransformColumns<RecordType>];\\n","antd/table/index.d.ts":"import Table, { TableProps, TablePaginationConfig } from \'./Table\';\\nexport { ColumnProps } from \'./Column\';\\nexport { ColumnsType, ColumnType, ColumnGroupType } from \'./interface\';\\nexport { TableProps, TablePaginationConfig };\\nexport default Table;\\n","antd/table/interface.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, ColumnType as RcColumnType, RenderedCell as RcRenderedCell, ExpandableConfig } from \'rc-table/lib/interface\';\\nimport { TooltipProps } from \'../tooltip\';\\nimport { CheckboxProps } from \'../checkbox\';\\nimport { PaginationProps } from \'../pagination\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\nimport { INTERNAL_SELECTION_ITEM } from \'./hooks/useSelection\';\\nexport { GetRowKey, ExpandableConfig };\\nexport declare type Key = React.Key;\\nexport declare type RowSelectionType = \'checkbox\' | \'radio\';\\nexport declare type SelectionItemSelectFn = (currentRowKeys: Key[]) => void;\\nexport declare type ExpandType = null | \'row\' | \'nest\';\\nexport interface TableLocale {\\n    filterTitle?: string;\\n    filterConfirm?: React.ReactNode;\\n    filterReset?: React.ReactNode;\\n    filterEmptyText?: React.ReactNode;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    selectAll?: React.ReactNode;\\n    selectNone?: React.ReactNode;\\n    selectInvert?: React.ReactNode;\\n    selectionAll?: React.ReactNode;\\n    sortTitle?: string;\\n    expand?: string;\\n    collapse?: string;\\n    triggerDesc?: string;\\n    triggerAsc?: string;\\n    cancelSort?: string;\\n}\\nexport declare type SortOrder = \'descend\' | \'ascend\' | null;\\ndeclare const TableActions: [\\"paginate\\", \\"sort\\", \\"filter\\"];\\nexport declare type TableAction = typeof TableActions[number];\\nexport declare type CompareFn<T> = (a: T, b: T, sortOrder?: SortOrder) => number;\\nexport interface ColumnFilterItem {\\n    text: React.ReactNode;\\n    value: string | number | boolean;\\n    children?: ColumnFilterItem[];\\n}\\nexport interface ColumnTitleProps<RecordType> {\\n    /** @deprecated Please use `sorterColumns` instead. */\\n    sortOrder?: SortOrder;\\n    /** @deprecated Please use `sorterColumns` instead. */\\n    sortColumn?: ColumnType<RecordType>;\\n    sortColumns?: {\\n        column: ColumnType<RecordType>;\\n        order: SortOrder;\\n    }[];\\n    filters?: Record<string, string[]>;\\n}\\nexport declare type ColumnTitle<RecordType> = React.ReactNode | ((props: ColumnTitleProps<RecordType>) => React.ReactNode);\\nexport interface FilterConfirmProps {\\n    closeDropdown: boolean;\\n}\\nexport interface FilterDropdownProps {\\n    prefixCls: string;\\n    setSelectedKeys: (selectedKeys: React.Key[]) => void;\\n    selectedKeys: React.Key[];\\n    confirm: (param: FilterConfirmProps) => void;\\n    clearFilters?: () => void;\\n    filters?: ColumnFilterItem[];\\n    visible: boolean;\\n}\\nexport interface ColumnType<RecordType> extends RcColumnType<RecordType> {\\n    title?: ColumnTitle<RecordType>;\\n    sorter?: boolean | CompareFn<RecordType> | {\\n        compare?: CompareFn<RecordType>;\\n        /** Config multiple sorter order priority */\\n        multiple?: number;\\n    };\\n    sortOrder?: SortOrder;\\n    defaultSortOrder?: SortOrder;\\n    sortDirections?: SortOrder[];\\n    showSorterTooltip?: boolean | TooltipProps;\\n    filtered?: boolean;\\n    filters?: ColumnFilterItem[];\\n    filterDropdown?: React.ReactNode | ((props: FilterDropdownProps) => React.ReactNode);\\n    filterMultiple?: boolean;\\n    filteredValue?: Key[] | null;\\n    defaultFilteredValue?: Key[] | null;\\n    filterIcon?: React.ReactNode | ((filtered: boolean) => React.ReactNode);\\n    onFilter?: (value: string | number | boolean, record: RecordType) => boolean;\\n    filterDropdownVisible?: boolean;\\n    onFilterDropdownVisibleChange?: (visible: boolean) => void;\\n    responsive?: Breakpoint[];\\n}\\nexport interface ColumnGroupType<RecordType> extends Omit<ColumnType<RecordType>, \'dataIndex\'> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport interface SelectionItem {\\n    key: string;\\n    text: React.ReactNode;\\n    onSelect?: SelectionItemSelectFn;\\n}\\nexport declare type SelectionSelectFn<T> = (record: T, selected: boolean, selectedRows: T[], nativeEvent: Event) => void;\\nexport interface TableRowSelection<T> {\\n    /** Keep the selection keys in list even the key not exist in `dataSource` anymore */\\n    preserveSelectedRowKeys?: boolean;\\n    type?: RowSelectionType;\\n    selectedRowKeys?: Key[];\\n    onChange?: (selectedRowKeys: Key[], selectedRows: T[]) => void;\\n    getCheckboxProps?: (record: T) => Partial<Omit<CheckboxProps, \'checked\' | \'defaultChecked\'>>;\\n    onSelect?: SelectionSelectFn<T>;\\n    onSelectMultiple?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;\\n    /** @deprecated This function is meaningless and should use `onChange` instead */\\n    onSelectAll?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;\\n    /** @deprecated This function is meaningless and should use `onChange` instead */\\n    onSelectInvert?: (selectedRowKeys: Key[]) => void;\\n    onSelectNone?: () => void;\\n    selections?: INTERNAL_SELECTION_ITEM[] | boolean;\\n    hideSelectAll?: boolean;\\n    fixed?: boolean;\\n    columnWidth?: string | number;\\n    columnTitle?: string | React.ReactNode;\\n    checkStrictly?: boolean;\\n    renderCell?: (value: boolean, record: T, index: number, originNode: React.ReactNode) => React.ReactNode | RcRenderedCell<T>;\\n}\\nexport declare type TransformColumns<RecordType> = (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\nexport interface TableCurrentDataSource<RecordType> {\\n    currentDataSource: RecordType[];\\n    action: TableAction;\\n}\\nexport interface SorterResult<RecordType> {\\n    column?: ColumnType<RecordType>;\\n    order?: SortOrder;\\n    field?: Key | readonly Key[];\\n    columnKey?: Key;\\n}\\nexport declare type GetPopupContainer = (triggerNode: HTMLElement) => HTMLElement;\\ndeclare type TablePaginationPosition = \'topLeft\' | \'topCenter\' | \'topRight\' | \'bottomLeft\' | \'bottomCenter\' | \'bottomRight\';\\nexport interface TablePaginationConfig extends PaginationProps {\\n    position?: TablePaginationPosition[];\\n}\\n","antd/table/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\nimport \'../../empty/style\';\\nimport \'../../radio/style\';\\nimport \'../../checkbox/style\';\\nimport \'../../dropdown/style\';\\nimport \'../../spin/style\';\\nimport \'../../pagination/style\';\\nimport \'../../tooltip/style\';\\n","antd/table/Table.d.ts":"/// <reference types=\\"react\\" />\\nimport { TableProps as RcTableProps } from \'rc-table/lib/Table\';\\nimport { SpinProps } from \'../spin\';\\nimport { TooltipProps } from \'../tooltip\';\\nimport { TableRowSelection, ColumnsType, TableCurrentDataSource, SorterResult, Key, GetPopupContainer, TablePaginationConfig, SortOrder, TableLocale } from \'./interface\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport { ColumnsType, TablePaginationConfig };\\nexport interface TableProps<RecordType> extends Omit<RcTableProps<RecordType>, \'transformColumns\' | \'internalHooks\' | \'internalRefs\' | \'data\' | \'columns\' | \'scroll\' | \'emptyText\'> {\\n    dropdownPrefixCls?: string;\\n    dataSource?: RcTableProps<RecordType>[\'data\'];\\n    columns?: ColumnsType<RecordType>;\\n    pagination?: false | TablePaginationConfig;\\n    loading?: boolean | SpinProps;\\n    size?: SizeType;\\n    bordered?: boolean;\\n    locale?: TableLocale;\\n    onChange?: (pagination: TablePaginationConfig, filters: Record<string, (Key | boolean)[] | null>, sorter: SorterResult<RecordType> | SorterResult<RecordType>[], extra: TableCurrentDataSource<RecordType>) => void;\\n    rowSelection?: TableRowSelection<RecordType>;\\n    getPopupContainer?: GetPopupContainer;\\n    scroll?: RcTableProps<RecordType>[\'scroll\'] & {\\n        scrollToFirstRowOnChange?: boolean;\\n    };\\n    sortDirections?: SortOrder[];\\n    showSorterTooltip?: boolean | TooltipProps;\\n}\\ndeclare function Table<RecordType extends object = any>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var defaultProps: {\\n        rowKey: string;\\n    };\\n    var SELECTION_ALL: \\"SELECT_ALL\\";\\n    var SELECTION_INVERT: \\"SELECT_INVERT\\";\\n    var SELECTION_NONE: \\"SELECT_NONE\\";\\n    var Column: typeof import(\\"./Column\\").default;\\n    var ColumnGroup: typeof import(\\"./ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"rc-table/lib/Footer/Cell\\").default;\\n        Row: typeof import(\\"rc-table/lib/Footer/Row\\").default;\\n    };\\n}\\nexport default Table;\\n","antd/table/util.d.ts":"import { ColumnType, ColumnTitle, ColumnTitleProps, Key } from \'./interface\';\\nexport declare function getColumnKey<RecordType>(column: ColumnType<RecordType>, defaultKey: string): Key;\\nexport declare function getColumnPos(index: number, pos?: string): string;\\nexport declare function renderColumnTitle<RecordType>(title: ColumnTitle<RecordType>, props: ColumnTitleProps<RecordType>): any;\\n","antd/tabs/index.d.ts":"import * as React from \'react\';\\nimport { TabsProps as RcTabsProps, TabPaneProps } from \'rc-tabs\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type TabsType = \'line\' | \'card\' | \'editable-card\';\\nexport declare type TabsPosition = \'top\' | \'right\' | \'bottom\' | \'left\';\\nexport { TabPaneProps };\\nexport interface TabsProps extends Omit<RcTabsProps, \'editable\'> {\\n    type?: TabsType;\\n    size?: SizeType;\\n    hideAdd?: boolean;\\n    centered?: boolean;\\n    addIcon?: React.ReactNode;\\n    onEdit?: (e: React.MouseEvent | React.KeyboardEvent | string, action: \'add\' | \'remove\') => void;\\n}\\ndeclare function Tabs({ type, className, size, onEdit, hideAdd, centered, addIcon, ...props }: TabsProps): JSX.Element;\\ndeclare namespace Tabs {\\n    var TabPane: typeof import(\\"rc-tabs\\").TabPane;\\n}\\nexport default Tabs;\\n","antd/tabs/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/tag/CheckableTag.d.ts":"import * as React from \'react\';\\nexport interface CheckableTagProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    /**\\n     * It is an absolute controlled component and has no uncontrolled mode.\\n     *\\n     * .zh-cn \u8be5\u7ec4\u4ef6\u4e3a\u5b8c\u5168\u53d7\u63a7\u7ec4\u4ef6\uff0c\u4e0d\u652f\u6301\u975e\u53d7\u63a7\u7528\u6cd5\u3002\\n     */\\n    checked: boolean;\\n    onChange?: (checked: boolean) => void;\\n    onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\\n}\\ndeclare const CheckableTag: React.FC<CheckableTagProps>;\\nexport default CheckableTag;\\n","antd/tag/index.d.ts":"import * as React from \'react\';\\nimport CheckableTag from \'./CheckableTag\';\\nimport { PresetColorType, PresetStatusColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { CheckableTagProps } from \'./CheckableTag\';\\nexport interface TagProps extends React.HTMLAttributes<HTMLSpanElement> {\\n    prefixCls?: string;\\n    className?: string;\\n    color?: LiteralUnion<PresetColorType | PresetStatusColorType, string>;\\n    closable?: boolean;\\n    closeIcon?: React.ReactNode;\\n    visible?: boolean;\\n    onClose?: (e: React.MouseEvent<HTMLElement>) => void;\\n    style?: React.CSSProperties;\\n    icon?: React.ReactNode;\\n}\\nexport interface TagType extends React.ForwardRefExoticComponent<TagProps & React.RefAttributes<HTMLElement>> {\\n    CheckableTag: typeof CheckableTag;\\n}\\ndeclare const Tag: TagType;\\nexport default Tag;\\n","antd/tag/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/time-picker/index.d.ts":"import { Moment } from \'moment\';\\nimport * as React from \'react\';\\nimport { PickerTimeProps, RangePickerTimeProps } from \'../date-picker/generatePicker\';\\nimport { Omit } from \'../_util/type\';\\nexport interface TimePickerLocale {\\n    placeholder?: string;\\n    rangePlaceholder?: [string, string];\\n}\\nexport interface TimeRangePickerProps extends Omit<RangePickerTimeProps<Moment>, \'picker\'> {\\n}\\ndeclare const RangePicker: React.ForwardRefExoticComponent<TimeRangePickerProps & React.RefAttributes<any>>;\\nexport interface TimePickerProps extends Omit<PickerTimeProps<Moment>, \'picker\'> {\\n    addon?: () => React.ReactNode;\\n    popupClassName?: string;\\n}\\ndeclare const TimePicker: React.ForwardRefExoticComponent<TimePickerProps & React.RefAttributes<any>>;\\ndeclare type MergedTimePicker = typeof TimePicker & {\\n    RangePicker: typeof RangePicker;\\n};\\ndeclare const _default: MergedTimePicker;\\nexport default _default;\\n","antd/time-picker/locale/ar_EG.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/az_AZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/bg_BG.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/by_BY.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ca_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/cs_CZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/da_DK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/de_DE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/el_GR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/en_GB.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/en_US.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/es_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/et_EE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fa_IR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fi_FI.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fr_BE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fr_FR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ga_IE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/gl_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/he_IL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hi_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hr_HR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hu_HU.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/id_ID.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/is_IS.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/it_IT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ja_JP.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kk_KZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kmr_IQ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kn_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ko_KR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/lt_LT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/lv_LV.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/mk_MK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/mn_MN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ms_MY.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nb_NO.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nl_BE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nl_NL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pl_PL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pt_BR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pt_PT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ro_RO.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ru_RU.d.ts":"/** Created by Andrey Gayvoronsky on 13/04/16. */\\nimport { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sk_SK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sl_SI.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sr_RS.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sv_SE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ta_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/th_TH.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/tr_TR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/uk_UA.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/vi_VN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/zh_CN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/zh_TW.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../date-picker/style\';\\n","antd/timeline/index.d.ts":"import Timeline from \'./Timeline\';\\nexport { TimelineProps } from \'./Timeline\';\\nexport { TimelineItemProps } from \'./TimelineItem\';\\nexport default Timeline;\\n","antd/timeline/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/timeline/Timeline.d.ts":"import * as React from \'react\';\\nimport { TimelineItemProps } from \'./TimelineItem\';\\nexport interface TimelineProps {\\n    prefixCls?: string;\\n    className?: string;\\n    /** \u6307\u5b9a\u6700\u540e\u4e00\u4e2a\u5e7d\u7075\u8282\u70b9\u662f\u5426\u5b58\u5728\u6216\u5185\u5bb9 */\\n    pending?: React.ReactNode;\\n    pendingDot?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    reverse?: boolean;\\n    mode?: \'left\' | \'alternate\' | \'right\';\\n}\\ninterface TimelineType extends React.FC<TimelineProps> {\\n    Item: React.FC<TimelineItemProps>;\\n}\\ndeclare const Timeline: TimelineType;\\nexport default Timeline;\\n","antd/timeline/TimelineItem.d.ts":"import * as React from \'react\';\\nexport interface TimelineItemProps {\\n    prefixCls?: string;\\n    className?: string;\\n    color?: string;\\n    dot?: React.ReactNode;\\n    pending?: boolean;\\n    position?: string;\\n    style?: React.CSSProperties;\\n    label?: React.ReactNode;\\n}\\nexport interface TimeLineItemProps extends TimelineItemProps {\\n    __deprecated_do_not_use_it__?: any;\\n}\\ndeclare const TimelineItem: React.FC<TimelineItemProps>;\\nexport default TimelineItem;\\n","antd/tooltip/index.d.ts":"import * as React from \'react\';\\nimport { TooltipProps as RcTooltipProps } from \'rc-tooltip/lib/Tooltip\';\\nimport { placements as Placements } from \'rc-tooltip/lib/placements\';\\nimport { AdjustOverflow, PlacementsConfig } from \'./placements\';\\nimport { PresetColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { AdjustOverflow, PlacementsConfig };\\nexport declare type TooltipPlacement = \'top\' | \'left\' | \'right\' | \'bottom\' | \'topLeft\' | \'topRight\' | \'bottomLeft\' | \'bottomRight\' | \'leftTop\' | \'leftBottom\' | \'rightTop\' | \'rightBottom\';\\nexport interface TooltipAlignConfig {\\n    points?: [string, string];\\n    offset?: [number | string, number | string];\\n    targetOffset?: [number | string, number | string];\\n    overflow?: {\\n        adjustX: boolean;\\n        adjustY: boolean;\\n    };\\n    useCssRight?: boolean;\\n    useCssBottom?: boolean;\\n    useCssTransform?: boolean;\\n}\\nexport interface AbstractTooltipProps extends Partial<Omit<RcTooltipProps, \'children\'>> {\\n    style?: React.CSSProperties;\\n    className?: string;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    placement?: TooltipPlacement;\\n    builtinPlacements?: typeof Placements;\\n    openClassName?: string;\\n    arrowPointAtCenter?: boolean;\\n    autoAdjustOverflow?: boolean | AdjustOverflow;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    children?: React.ReactNode;\\n}\\nexport declare type RenderFunction = () => React.ReactNode;\\nexport interface TooltipPropsWithOverlay extends AbstractTooltipProps {\\n    title?: React.ReactNode | RenderFunction;\\n    overlay: React.ReactNode | RenderFunction;\\n}\\nexport interface TooltipPropsWithTitle extends AbstractTooltipProps {\\n    title: React.ReactNode | RenderFunction;\\n    overlay?: React.ReactNode | RenderFunction;\\n}\\nexport declare type TooltipProps = TooltipPropsWithTitle | TooltipPropsWithOverlay;\\ndeclare const Tooltip: React.ForwardRefExoticComponent<(TooltipPropsWithOverlay & React.RefAttributes<unknown>) | (TooltipPropsWithTitle & React.RefAttributes<unknown>)>;\\nexport default Tooltip;\\n","antd/tooltip/placements.d.ts":"import { BuildInPlacements } from \'rc-trigger\';\\nexport interface AdjustOverflow {\\n    adjustX?: 0 | 1;\\n    adjustY?: 0 | 1;\\n}\\nexport interface PlacementsConfig {\\n    arrowWidth?: number;\\n    horizontalArrowShift?: number;\\n    verticalArrowShift?: number;\\n    arrowPointAtCenter?: boolean;\\n    autoAdjustOverflow?: boolean | AdjustOverflow;\\n}\\nexport declare function getOverflowOptions(autoAdjustOverflow?: boolean | AdjustOverflow): {\\n    adjustX: number;\\n    adjustY: number;\\n};\\nexport default function getPlacements(config: PlacementsConfig): BuildInPlacements;\\n","antd/tooltip/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/transfer/index.d.ts":"import * as React from \'react\';\\nimport List, { TransferListProps } from \'./list\';\\nimport Search from \'./search\';\\nimport { RenderEmptyHandler } from \'../config-provider\';\\nimport { TransferListBodyProps } from \'./ListBody\';\\nimport { PaginationType } from \'./interface\';\\nexport { TransferListProps } from \'./list\';\\nexport { TransferOperationProps } from \'./operation\';\\nexport { TransferSearchProps } from \'./search\';\\nexport declare type TransferDirection = \'left\' | \'right\';\\nexport interface RenderResultObject {\\n    label: React.ReactElement;\\n    value: string;\\n}\\nexport declare type RenderResult = React.ReactElement | RenderResultObject | string | null;\\nexport interface TransferItem {\\n    key?: string;\\n    title?: string;\\n    description?: string;\\n    disabled?: boolean;\\n    [name: string]: any;\\n}\\nexport declare type KeyWise<T> = T & {\\n    key: string;\\n};\\nexport declare type KeyWiseTransferItem = KeyWise<TransferItem>;\\ndeclare type TransferRender<RecordType> = (item: RecordType) => RenderResult;\\nexport interface ListStyle {\\n    direction: TransferDirection;\\n}\\nexport declare type SelectAllLabel = React.ReactNode | ((info: {\\n    selectedCount: number;\\n    totalCount: number;\\n}) => React.ReactNode);\\nexport interface TransferLocale {\\n    titles: React.ReactNode[];\\n    notFoundContent?: React.ReactNode;\\n    searchPlaceholder: string;\\n    itemUnit: string;\\n    itemsUnit: string;\\n    remove: string;\\n    selectAll: string;\\n    selectCurrent: string;\\n    selectInvert: string;\\n    removeAll: string;\\n    removeCurrent: string;\\n}\\nexport interface TransferProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    disabled?: boolean;\\n    dataSource: RecordType[];\\n    targetKeys?: string[];\\n    selectedKeys?: string[];\\n    render?: TransferRender<RecordType>;\\n    onChange?: (targetKeys: string[], direction: TransferDirection, moveKeys: string[]) => void;\\n    onSelectChange?: (sourceSelectedKeys: string[], targetSelectedKeys: string[]) => void;\\n    style?: React.CSSProperties;\\n    listStyle: ((style: ListStyle) => React.CSSProperties) | React.CSSProperties;\\n    operationStyle?: React.CSSProperties;\\n    titles?: React.ReactNode[];\\n    operations?: string[];\\n    showSearch?: boolean;\\n    filterOption?: (inputValue: string, item: RecordType) => boolean;\\n    locale?: Partial<TransferLocale>;\\n    footer?: (props: TransferListProps<RecordType>) => React.ReactNode;\\n    rowKey?: (record: RecordType) => string;\\n    onSearch?: (direction: TransferDirection, value: string) => void;\\n    onScroll?: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    children?: (props: TransferListBodyProps<RecordType>) => React.ReactNode;\\n    showSelectAll?: boolean;\\n    selectAllLabels?: SelectAllLabel[];\\n    oneWay?: boolean;\\n    pagination?: PaginationType;\\n}\\ninterface TransferState {\\n    sourceSelectedKeys: string[];\\n    targetSelectedKeys: string[];\\n}\\ndeclare class Transfer<RecordType extends TransferItem = TransferItem> extends React.Component<TransferProps<RecordType>, TransferState> {\\n    static List: typeof List;\\n    static Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: import(\\"./operation\\").TransferOperationProps) => JSX.Element;\\n    static Search: typeof Search;\\n    static defaultProps: {\\n        dataSource: never[];\\n        locale: {};\\n        showSearch: boolean;\\n        listStyle: () => void;\\n    };\\n    static getDerivedStateFromProps<T>({ selectedKeys, targetKeys, pagination, children, }: TransferProps<T>): {\\n        sourceSelectedKeys: string[];\\n        targetSelectedKeys: string[];\\n    } | null;\\n    separatedDataSource: {\\n        leftDataSource: RecordType[];\\n        rightDataSource: RecordType[];\\n    } | null;\\n    constructor(props: TransferProps<RecordType>);\\n    setStateKeys: (direction: TransferDirection, keys: string[] | ((prevKeys: string[]) => string[])) => void;\\n    getTitles(transferLocale: TransferLocale): React.ReactNode[];\\n    getLocale: (transferLocale: TransferLocale, renderEmpty: RenderEmptyHandler) => {\\n        titles: React.ReactNode[];\\n        notFoundContent: React.ReactNode;\\n        searchPlaceholder: string;\\n        itemUnit: string;\\n        itemsUnit: string;\\n        remove: string;\\n        selectAll: string;\\n        selectCurrent: string;\\n        selectInvert: string;\\n        removeAll: string;\\n        removeCurrent: string;\\n    };\\n    moveTo: (direction: TransferDirection) => void;\\n    moveToLeft: () => void;\\n    moveToRight: () => void;\\n    onItemSelectAll: (direction: TransferDirection, selectedKeys: string[], checkAll: boolean) => void;\\n    onLeftItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;\\n    onRightItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;\\n    handleFilter: (direction: TransferDirection, e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleLeftFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleRightFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleClear: (direction: TransferDirection) => void;\\n    handleLeftClear: () => void;\\n    handleRightClear: () => void;\\n    onItemSelect: (direction: TransferDirection, selectedKey: string, checked: boolean) => void;\\n    onLeftItemSelect: (selectedKey: string, checked: boolean) => void;\\n    onRightItemSelect: (selectedKey: string, checked: boolean) => void;\\n    onRightItemRemove: (selectedKeys: string[]) => void;\\n    handleScroll: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleLeftScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleRightScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleSelectChange(direction: TransferDirection, holder: string[]): void;\\n    handleListStyle: (listStyle: React.CSSProperties | ((style: ListStyle) => React.CSSProperties), direction: TransferDirection) => React.CSSProperties;\\n    separateDataSource(): {\\n        leftDataSource: KeyWise<RecordType>[];\\n        rightDataSource: KeyWise<RecordType>[];\\n    };\\n    renderTransfer: (transferLocale: TransferLocale) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Transfer;\\n","antd/transfer/interface.d.ts":"export declare type PaginationType = boolean | {\\n    pageSize?: number;\\n};\\n","antd/transfer/list.d.ts":"import * as React from \'react\';\\nimport { TransferDirection, RenderResult, SelectAllLabel, TransferLocale, KeyWiseTransferItem } from \'./index\';\\nimport DefaultListBody, { TransferListBodyProps } from \'./ListBody\';\\nimport { PaginationType } from \'./interface\';\\nexport interface RenderedItem<RecordType> {\\n    renderedText: string;\\n    renderedEl: React.ReactNode;\\n    item: RecordType;\\n}\\ndeclare type RenderListFunction<T> = (props: TransferListBodyProps<T>) => React.ReactNode;\\nexport interface TransferListProps<RecordType> extends TransferLocale {\\n    prefixCls: string;\\n    titleText: React.ReactNode;\\n    dataSource: RecordType[];\\n    filterOption?: (filterText: string, item: RecordType) => boolean;\\n    style?: React.CSSProperties;\\n    checkedKeys: string[];\\n    handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    onItemSelect: (key: string, check: boolean) => void;\\n    onItemSelectAll: (dataSource: string[], checkAll: boolean) => void;\\n    onItemRemove?: (keys: string[]) => void;\\n    handleClear: () => void;\\n    /** Render item */\\n    render?: (item: RecordType) => RenderResult;\\n    showSearch?: boolean;\\n    searchPlaceholder: string;\\n    itemUnit: string;\\n    itemsUnit: string;\\n    renderList?: RenderListFunction<RecordType>;\\n    footer?: (props: TransferListProps<RecordType>) => React.ReactNode;\\n    onScroll: (e: React.UIEvent<HTMLUListElement>) => void;\\n    disabled?: boolean;\\n    direction: TransferDirection;\\n    showSelectAll?: boolean;\\n    selectAllLabel?: SelectAllLabel;\\n    showRemove?: boolean;\\n    pagination?: PaginationType;\\n}\\ninterface TransferListState {\\n    /** Filter input value */\\n    filterValue: string;\\n}\\nexport default class TransferList<RecordType extends KeyWiseTransferItem> extends React.PureComponent<TransferListProps<RecordType>, TransferListState> {\\n    static defaultProps: {\\n        dataSource: never[];\\n        titleText: string;\\n        showSearch: boolean;\\n    };\\n    timer: number;\\n    triggerScrollTimer: number;\\n    defaultListBodyRef: React.RefObject<DefaultListBody<RecordType>>;\\n    constructor(props: TransferListProps<RecordType>);\\n    componentWillUnmount(): void;\\n    getCheckStatus(filteredItems: RecordType[]): \\"none\\" | \\"all\\" | \\"part\\";\\n    getFilteredItems(dataSource: RecordType[], filterValue: string): {\\n        filteredItems: RecordType[];\\n        filteredRenderItems: RenderedItem<RecordType>[];\\n    };\\n    handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleClear: () => void;\\n    matchFilter: (text: string, item: RecordType) => boolean;\\n    getCurrentPageItems: () => void;\\n    renderListBody: (renderList: RenderListFunction<RecordType> | undefined, props: TransferListBodyProps<RecordType>) => {\\n        customize: boolean;\\n        bodyContent: {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null | undefined;\\n    };\\n    getListBody(prefixCls: string, searchPlaceholder: string, filterValue: string, filteredItems: RecordType[], notFoundContent: React.ReactNode, filteredRenderItems: RenderedItem<RecordType>[], checkedKeys: string[], renderList?: RenderListFunction<RecordType>, showSearch?: boolean, disabled?: boolean): React.ReactNode;\\n    getCheckBox(filteredItems: RecordType[], onItemSelectAll: (dataSource: string[], checkAll: boolean) => void, showSelectAll?: boolean, disabled?: boolean): false | JSX.Element;\\n    renderItem: (item: RecordType) => RenderedItem<RecordType>;\\n    getSelectAllLabel: (selectedCount: number, totalCount: number) => React.ReactNode;\\n    render(): JSX.Element;\\n}\\nexport {};\\n","antd/transfer/ListBody.d.ts":"import * as React from \'react\';\\nimport { ElementOf, Omit } from \'../_util/type\';\\nimport { TransferListProps, RenderedItem } from \'./list\';\\nimport { KeyWiseTransferItem } from \'.\';\\nexport declare const OmitProps: [\\"handleFilter\\", \\"handleClear\\", \\"checkedKeys\\"];\\nexport declare type OmitProp = ElementOf<typeof OmitProps>;\\ndeclare type PartialTransferListProps<RecordType> = Omit<TransferListProps<RecordType>, OmitProp>;\\nexport interface TransferListBodyProps<RecordType> extends PartialTransferListProps<RecordType> {\\n    filteredItems: RecordType[];\\n    filteredRenderItems: RenderedItem<RecordType>[];\\n    selectedKeys: string[];\\n}\\ninterface TransferListBodyState {\\n    current: number;\\n}\\ndeclare class ListBody<RecordType extends KeyWiseTransferItem> extends React.Component<TransferListBodyProps<RecordType>, TransferListBodyState> {\\n    state: {\\n        current: number;\\n    };\\n    static getDerivedStateFromProps<T>({ filteredRenderItems, pagination }: TransferListBodyProps<T>, { current }: TransferListBodyState): {\\n        current: number;\\n    } | null;\\n    onItemSelect: (item: RecordType) => void;\\n    onItemRemove: (item: RecordType) => void;\\n    onPageChange: (current: number) => void;\\n    getItems: () => RenderedItem<RecordType>[];\\n    render(): JSX.Element;\\n}\\nexport default ListBody;\\n","antd/transfer/ListItem.d.ts":"import * as React from \'react\';\\ndeclare type ListItemProps<RecordType> = {\\n    renderedText?: string | number;\\n    renderedEl: React.ReactNode;\\n    disabled?: boolean;\\n    checked?: boolean;\\n    prefixCls: string;\\n    onClick: (item: RecordType) => void;\\n    onRemove?: (item: RecordType) => void;\\n    item: RecordType;\\n    showRemove?: boolean;\\n};\\ndeclare const _default: React.MemoExoticComponent<(<RecordType extends import(\\".\\").KeyWise<import(\\".\\").TransferItem>>(props: ListItemProps<RecordType>) => JSX.Element)>;\\nexport default _default;\\n","antd/transfer/operation.d.ts":"import * as React from \'react\';\\nimport { DirectionType } from \'../config-provider\';\\nexport interface TransferOperationProps {\\n    className?: string;\\n    leftArrowText?: string;\\n    rightArrowText?: string;\\n    moveToLeft?: React.MouseEventHandler<HTMLButtonElement>;\\n    moveToRight?: React.MouseEventHandler<HTMLButtonElement>;\\n    leftActive?: boolean;\\n    rightActive?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    direction?: DirectionType;\\n    oneWay?: boolean;\\n}\\ndeclare const Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: TransferOperationProps) => JSX.Element;\\nexport default Operation;\\n","antd/transfer/search.d.ts":"import * as React from \'react\';\\nexport interface TransferSearchProps {\\n    prefixCls?: string;\\n    placeholder?: string;\\n    onChange?: (e: React.FormEvent<HTMLElement>) => void;\\n    handleClear?: (e: React.MouseEvent<HTMLElement>) => void;\\n    value?: string;\\n    disabled?: boolean;\\n}\\nexport default function Search(props: TransferSearchProps): JSX.Element;\\n","antd/transfer/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../checkbox/style\';\\nimport \'../../button/style\';\\nimport \'../../input/style\';\\nimport \'../../menu/style\';\\nimport \'../../dropdown/style\';\\nimport \'../../pagination/style\';\\n","antd/tree/DirectoryTree.d.ts":"import * as React from \'react\';\\nimport RcTree from \'rc-tree\';\\nimport { Key } from \'rc-tree/lib/interface\';\\nimport { TreeProps } from \'./Tree\';\\nexport declare type ExpandAction = false | \'click\' | \'doubleClick\';\\nexport interface DirectoryTreeProps extends TreeProps {\\n    expandAction?: ExpandAction;\\n}\\nexport interface DirectoryTreeState {\\n    expandedKeys?: Key[];\\n    selectedKeys?: Key[];\\n}\\ndeclare const ForwardDirectoryTree: React.ForwardRefExoticComponent<DirectoryTreeProps & React.RefAttributes<RcTree>>;\\nexport default ForwardDirectoryTree;\\n","antd/tree/index.d.ts":"import Tree from \'./Tree\';\\nexport { EventDataNode, DataNode } from \'rc-tree/lib/interface\';\\nexport { TreeProps, AntTreeNode, AntTreeNodeMouseEvent, AntTreeNodeExpandedEvent, AntTreeNodeCheckedEvent, AntTreeNodeSelectedEvent, AntdTreeNodeAttribute, AntTreeNodeProps, } from \'./Tree\';\\nexport { ExpandAction as DirectoryTreeExpandAction, DirectoryTreeProps } from \'./DirectoryTree\';\\nexport default Tree;\\n","antd/tree/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/tree/Tree.d.ts":"import * as React from \'react\';\\nimport RcTree, { TreeNode, TreeProps as RcTreeProps } from \'rc-tree\';\\nimport { DataNode, Key } from \'rc-tree/lib/interface\';\\nimport DirectoryTree from \'./DirectoryTree\';\\nexport interface AntdTreeNodeAttribute {\\n    eventKey: string;\\n    prefixCls: string;\\n    className: string;\\n    expanded: boolean;\\n    selected: boolean;\\n    checked: boolean;\\n    halfChecked: boolean;\\n    children: React.ReactNode;\\n    title: React.ReactNode;\\n    pos: string;\\n    dragOver: boolean;\\n    dragOverGapTop: boolean;\\n    dragOverGapBottom: boolean;\\n    isLeaf: boolean;\\n    selectable: boolean;\\n    disabled: boolean;\\n    disableCheckbox: boolean;\\n}\\nexport interface AntTreeNodeProps {\\n    className?: string;\\n    checkable?: boolean;\\n    disabled?: boolean;\\n    disableCheckbox?: boolean;\\n    title?: string | React.ReactNode;\\n    key?: Key;\\n    eventKey?: string;\\n    isLeaf?: boolean;\\n    checked?: boolean;\\n    expanded?: boolean;\\n    loading?: boolean;\\n    selected?: boolean;\\n    selectable?: boolean;\\n    icon?: ((treeNode: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;\\n    children?: React.ReactNode;\\n    [customProp: string]: any;\\n}\\nexport interface AntTreeNode extends React.Component<AntTreeNodeProps, {}> {\\n}\\nexport interface AntTreeNodeBaseEvent {\\n    node: AntTreeNode;\\n    nativeEvent: MouseEvent;\\n}\\nexport interface AntTreeNodeCheckedEvent extends AntTreeNodeBaseEvent {\\n    event: \'check\';\\n    checked?: boolean;\\n    checkedNodes?: AntTreeNode[];\\n}\\nexport interface AntTreeNodeSelectedEvent extends AntTreeNodeBaseEvent {\\n    event: \'select\';\\n    selected?: boolean;\\n    selectedNodes?: DataNode[];\\n}\\nexport interface AntTreeNodeExpandedEvent extends AntTreeNodeBaseEvent {\\n    expanded?: boolean;\\n}\\nexport interface AntTreeNodeMouseEvent {\\n    node: AntTreeNode;\\n    event: React.DragEvent<HTMLElement>;\\n}\\nexport interface AntTreeNodeDragEnterEvent extends AntTreeNodeMouseEvent {\\n    expandedKeys: Key[];\\n}\\nexport interface AntTreeNodeDropEvent {\\n    node: AntTreeNode;\\n    dragNode: AntTreeNode;\\n    dragNodesKeys: Key[];\\n    dropPosition: number;\\n    dropToGap?: boolean;\\n    event: React.MouseEvent<HTMLElement>;\\n}\\nexport declare type TreeNodeNormal = DataNode;\\nexport interface TreeProps extends Omit<RcTreeProps, \'prefixCls\' | \'showLine\' | \'direction\'> {\\n    showLine?: boolean | {\\n        showLeafIcon: boolean;\\n    };\\n    className?: string;\\n    /** \u662f\u5426\u652f\u6301\u591a\u9009 */\\n    multiple?: boolean;\\n    /** \u662f\u5426\u81ea\u52a8\u5c55\u5f00\u7236\u8282\u70b9 */\\n    autoExpandParent?: boolean;\\n    /** Checkable\u72b6\u6001\u4e0b\u8282\u70b9\u9009\u62e9\u5b8c\u5168\u53d7\u63a7\uff08\u7236\u5b50\u8282\u70b9\u9009\u4e2d\u72b6\u6001\u4e0d\u518d\u5173\u8054\uff09 */\\n    checkStrictly?: boolean;\\n    /** \u662f\u5426\u652f\u6301\u9009\u4e2d */\\n    checkable?: boolean;\\n    /** \u662f\u5426\u7981\u7528\u6811 */\\n    disabled?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u6240\u6709\u6811\u8282\u70b9 */\\n    defaultExpandAll?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u5bf9\u5e94\u6811\u8282\u70b9 */\\n    defaultExpandParent?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9 */\\n    defaultExpandedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9 */\\n    expandedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9 */\\n    checkedKeys?: Key[] | {\\n        checked: Key[];\\n        halfChecked: Key[];\\n    };\\n    /** \u9ed8\u8ba4\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9 */\\n    defaultCheckedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u8bbe\u7f6e\u9009\u4e2d\u7684\u6811\u8282\u70b9 */\\n    selectedKeys?: Key[];\\n    /** \u9ed8\u8ba4\u9009\u4e2d\u7684\u6811\u8282\u70b9 */\\n    defaultSelectedKeys?: Key[];\\n    selectable?: boolean;\\n    /** \u70b9\u51fb\u6811\u8282\u70b9\u89e6\u53d1 */\\n    filterAntTreeNode?: (node: AntTreeNode) => boolean;\\n    loadedKeys?: Key[];\\n    /** \u8bbe\u7f6e\u8282\u70b9\u53ef\u62d6\u62fd\uff08IE>8\uff09 */\\n    draggable?: ((node: DataNode) => boolean) | boolean;\\n    style?: React.CSSProperties;\\n    showIcon?: boolean;\\n    icon?: ((nodeProps: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;\\n    switcherIcon?: React.ReactElement<any>;\\n    prefixCls?: string;\\n    children?: React.ReactNode;\\n    blockNode?: boolean;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<TreeProps & React.RefAttributes<RcTree>> {\\n    TreeNode: typeof TreeNode;\\n    DirectoryTree: typeof DirectoryTree;\\n}\\ndeclare const Tree: CompoundedComponent;\\nexport default Tree;\\n","antd/tree/utils/dictUtil.d.ts":"import { DataNode, Key } from \'rc-tree/lib/interface\';\\n/** \u8ba1\u7b97\u9009\u4e2d\u8303\u56f4\uff0c\u53ea\u8003\u8651expanded\u60c5\u51b5\u4ee5\u4f18\u5316\u6027\u80fd */\\nexport declare function calcRangeKeys({ treeData, expandedKeys, startKey, endKey, }: {\\n    treeData: DataNode[];\\n    expandedKeys: Key[];\\n    startKey?: Key;\\n    endKey?: Key;\\n}): Key[];\\nexport declare function convertDirectoryKeysToNodes(treeData: DataNode[], keys: Key[]): DataNode[];\\n","antd/tree/utils/dropIndicator.d.ts":"/// <reference types=\\"react\\" />\\nexport declare const offset = 4;\\nexport default function dropIndicatorRender(props: {\\n    dropPosition: -1 | 0 | 1;\\n    dropLevelOffset: number;\\n    indent: number;\\n    prefixCls: string;\\n    direction: \'ltr\' | \'rtl\';\\n}): JSX.Element;\\n","antd/tree/utils/iconUtil.d.ts":"import * as React from \'react\';\\nimport { AntTreeNodeProps } from \'../Tree\';\\nexport default function renderSwitcherIcon(prefixCls: string, switcherIcon: React.ReactNode | null | undefined, showLine: boolean | {\\n    showLeafIcon: boolean;\\n} | undefined, { isLeaf, expanded, loading }: AntTreeNodeProps): {} | null;\\n","antd/tree-select/index.d.ts":"import * as React from \'react\';\\nimport { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, TreeSelectProps as RcTreeSelectProps } from \'rc-tree-select\';\\nimport { DefaultValueType } from \'rc-tree-select/lib/interface\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare type RawValue = string | number;\\nexport interface LabeledValue {\\n    key?: string;\\n    value: RawValue;\\n    label: React.ReactNode;\\n}\\nexport declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];\\nexport interface TreeSelectProps<T> extends Omit<RcTreeSelectProps<T>, \'showTreeIcon\' | \'treeMotion\' | \'inputIcon\' | \'mode\' | \'getInputElement\' | \'backfill\'> {\\n    suffixIcon?: React.ReactNode;\\n    size?: SizeType;\\n    bordered?: boolean;\\n}\\nexport interface RefTreeSelectProps {\\n    focus: () => void;\\n    blur: () => void;\\n}\\ndeclare const TreeSelectRef: <T extends DefaultValueType>(props: TreeSelectProps<T> & {\\n    ref?: ((instance: RefTreeSelectProps | null) => void) | React.RefObject<RefTreeSelectProps> | null | undefined;\\n}) => React.ReactElement;\\ndeclare type InternalTreeSelectType = typeof TreeSelectRef;\\ninterface TreeSelectInterface extends InternalTreeSelectType {\\n    TreeNode: typeof TreeNode;\\n    SHOW_ALL: typeof SHOW_ALL;\\n    SHOW_PARENT: typeof SHOW_PARENT;\\n    SHOW_CHILD: typeof SHOW_CHILD;\\n}\\ndeclare const TreeSelect: TreeSelectInterface;\\nexport { TreeNode };\\nexport default TreeSelect;\\n","antd/tree-select/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\nimport \'../../empty/style\';\\n","antd/typography/Base.d.ts":"import * as React from \'react\';\\nimport { AutoSizeType } from \'rc-textarea/lib/ResizableTextArea\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nimport { TypographyProps } from \'./Typography\';\\nexport declare type BaseType = \'secondary\' | \'success\' | \'warning\' | \'danger\';\\ninterface CopyConfig {\\n    text?: string;\\n    onCopy?: () => void;\\n    icon?: React.ReactNode;\\n    tooltips?: boolean | React.ReactNode;\\n}\\ninterface EditConfig {\\n    editing?: boolean;\\n    icon?: React.ReactNode;\\n    tooltip?: boolean | React.ReactNode;\\n    onStart?: () => void;\\n    onChange?: (value: string) => void;\\n    maxLength?: number;\\n    autoSize?: boolean | AutoSizeType;\\n}\\nexport interface EllipsisConfig {\\n    rows?: number;\\n    expandable?: boolean;\\n    suffix?: string;\\n    symbol?: React.ReactNode;\\n    onExpand?: React.MouseEventHandler<HTMLElement>;\\n    onEllipsis?: (ellipsis: boolean) => void;\\n    tooltip?: React.ReactNode;\\n}\\nexport interface BlockProps extends TypographyProps {\\n    title?: string;\\n    editable?: boolean | EditConfig;\\n    copyable?: boolean | CopyConfig;\\n    type?: BaseType;\\n    disabled?: boolean;\\n    ellipsis?: boolean | EllipsisConfig;\\n    code?: boolean;\\n    mark?: boolean;\\n    underline?: boolean;\\n    delete?: boolean;\\n    strong?: boolean;\\n    keyboard?: boolean;\\n}\\ninterface InternalBlockProps extends BlockProps {\\n    component: string;\\n}\\ninterface BaseState {\\n    edit: boolean;\\n    copied: boolean;\\n    ellipsisText: string;\\n    ellipsisContent: React.ReactNode;\\n    isEllipsis: boolean;\\n    expanded: boolean;\\n    clientRendered: boolean;\\n}\\ndeclare class Base extends React.Component<InternalBlockProps, BaseState> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    static defaultProps: {\\n        children: string;\\n    };\\n    static getDerivedStateFromProps(nextProps: BlockProps): {};\\n    context: ConfigConsumerProps;\\n    editIcon?: HTMLDivElement;\\n    contentRef: React.RefObject<HTMLElement>;\\n    copyId?: number;\\n    rafId?: number;\\n    expandStr?: string;\\n    copyStr?: string;\\n    copiedStr?: string;\\n    editStr?: string;\\n    state: BaseState;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: BlockProps): void;\\n    componentWillUnmount(): void;\\n    getPrefixCls: () => string;\\n    onExpandClick: React.MouseEventHandler<HTMLElement>;\\n    onEditClick: () => void;\\n    onEditChange: (value: string) => void;\\n    onEditCancel: () => void;\\n    onCopyClick: (e: React.MouseEvent<HTMLDivElement>) => void;\\n    getEditable(props?: BlockProps): EditConfig;\\n    getEllipsis(props?: BlockProps): EllipsisConfig;\\n    setEditRef: (node: HTMLDivElement) => void;\\n    triggerEdit: (edit: boolean) => void;\\n    resizeOnNextFrame: () => void;\\n    canUseCSSEllipsis(): boolean;\\n    syncEllipsis(): void;\\n    renderExpand(forceRender?: boolean): JSX.Element | null;\\n    renderEdit(): JSX.Element | undefined;\\n    renderCopy(): JSX.Element | undefined;\\n    renderEditInput(): JSX.Element;\\n    renderOperations(forceRenderExpanded?: boolean): (JSX.Element | null | undefined)[];\\n    renderContent(): JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Base;\\n","antd/typography/Editable.d.ts":"import * as React from \'react\';\\nimport { AutoSizeType } from \'rc-textarea/lib/ResizableTextArea\';\\nimport { DirectionType } from \'../config-provider\';\\ninterface EditableProps {\\n    prefixCls?: string;\\n    value: string;\\n    [\'aria-label\']?: string;\\n    onSave: (value: string) => void;\\n    onCancel: () => void;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    direction?: DirectionType;\\n    maxLength?: number;\\n    autoSize?: boolean | AutoSizeType;\\n}\\ndeclare const Editable: React.FC<EditableProps>;\\nexport default Editable;\\n","antd/typography/index.d.ts":"import OriginTypography from \'./Typography\';\\nimport Text from \'./Text\';\\nimport Link from \'./Link\';\\nimport Title from \'./Title\';\\nimport Paragraph from \'./Paragraph\';\\nexport declare type TypographyProps = typeof OriginTypography & {\\n    Text: typeof Text;\\n    Link: typeof Link;\\n    Title: typeof Title;\\n    Paragraph: typeof Paragraph;\\n};\\ndeclare const Typography: TypographyProps;\\nexport default Typography;\\n","antd/typography/Link.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nexport interface LinkProps extends BlockProps, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \'type\'> {\\n    ellipsis?: boolean;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<LinkProps & React.RefAttributes<HTMLElement>>;\\nexport default _default;\\n","antd/typography/Paragraph.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nexport interface ParagraphProps extends BlockProps {\\n}\\ndeclare const Paragraph: React.FC<ParagraphProps>;\\nexport default Paragraph;\\n","antd/typography/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\nimport \'../../input/style\';\\n","antd/typography/Text.d.ts":"import * as React from \'react\';\\nimport { BlockProps, EllipsisConfig } from \'./Base\';\\nexport interface TextProps extends BlockProps {\\n    ellipsis?: boolean | Omit<EllipsisConfig, \'expandable\' | \'rows\' | \'onExpand\'>;\\n}\\ndeclare const Text: React.FC<TextProps>;\\nexport default Text;\\n","antd/typography/Title.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nimport { Omit } from \'../_util/type\';\\ndeclare const TITLE_ELE_LIST: [1, 2, 3, 4, 5];\\nexport declare type TitleProps = Omit<BlockProps & {\\n    level?: typeof TITLE_ELE_LIST[number];\\n}, \'strong\'>;\\ndeclare const Title: React.FC<TitleProps>;\\nexport default Title;\\n","antd/typography/Typography.d.ts":"import * as React from \'react\';\\nexport interface TypographyProps {\\n    id?: string;\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    [\'aria-label\']?: string;\\n}\\ndeclare const ExportTypography: React.FC<TypographyProps>;\\nexport default ExportTypography;\\n","antd/typography/util.d.ts":"import * as React from \'react\';\\ninterface Option {\\n    rows: number;\\n    suffix?: string;\\n}\\ndeclare const _default: (originEle: HTMLElement, option: Option, content: React.ReactNode, fixedContent: React.ReactNode[], ellipsisStr: string) => {\\n    content: React.ReactNode;\\n    text: string;\\n    ellipsis: boolean;\\n};\\nexport default _default;\\n","antd/upload/Dragger.d.ts":"import * as React from \'react\';\\nimport { UploadProps } from \'./interface\';\\nexport declare type DraggerProps = UploadProps & {\\n    height?: number;\\n};\\ndeclare const Dragger: React.FC<DraggerProps>;\\nexport default Dragger;\\n","antd/upload/index.d.ts":"import Upload from \'./Upload\';\\nexport { UploadProps, UploadListProps, UploadChangeParam, RcFile } from \'./interface\';\\nexport { DraggerProps } from \'./Dragger\';\\nexport default Upload;\\n","antd/upload/interface.d.ts":"import * as React from \'react\';\\nimport { UploadRequestOption as RcCustomRequestOptions } from \'rc-upload/lib/interface\';\\nimport { ProgressProps } from \'../progress\';\\nexport declare type UploadFileStatus = \'error\' | \'success\' | \'done\' | \'uploading\' | \'removed\';\\nexport interface HttpRequestHeader {\\n    [key: string]: string;\\n}\\nexport interface RcFile extends File {\\n    uid: string;\\n    readonly lastModifiedDate: Date;\\n    readonly webkitRelativePath: string;\\n}\\nexport interface UploadFile<T = any> {\\n    uid: string;\\n    size: number;\\n    name: string;\\n    fileName?: string;\\n    lastModified?: number;\\n    lastModifiedDate?: Date;\\n    url?: string;\\n    status?: UploadFileStatus;\\n    percent?: number;\\n    thumbUrl?: string;\\n    originFileObj?: File | Blob;\\n    response?: T;\\n    error?: any;\\n    linkProps?: any;\\n    type: string;\\n    xhr?: T;\\n    preview?: string;\\n}\\nexport interface UploadChangeParam<T extends object = UploadFile> {\\n    file: T;\\n    fileList: Array<UploadFile>;\\n    event?: {\\n        percent: number;\\n    };\\n}\\nexport interface ShowUploadListInterface {\\n    showRemoveIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n}\\nexport interface UploadLocale {\\n    uploading?: string;\\n    removeFile?: string;\\n    downloadFile?: string;\\n    uploadError?: string;\\n    previewFile?: string;\\n}\\nexport declare type UploadType = \'drag\' | \'select\';\\nexport declare type UploadListType = \'text\' | \'picture\' | \'picture-card\';\\nexport declare type UploadListProgressProps = Omit<ProgressProps, \'percent\' | \'type\'>;\\nexport declare type ItemRender<T = any> = (originNode: React.ReactElement, file: UploadFile, fileList?: Array<UploadFile<T>>) => React.ReactNode;\\ndeclare type PreviewFileHandler = (file: File | Blob) => PromiseLike<string>;\\ndeclare type TransformFileHandler = (file: RcFile) => string | Blob | File | PromiseLike<string | Blob | File>;\\nexport interface UploadProps<T = any> {\\n    type?: UploadType;\\n    name?: string;\\n    defaultFileList?: Array<UploadFile<T>>;\\n    fileList?: Array<UploadFile<T>>;\\n    action?: string | ((file: RcFile) => string) | ((file: RcFile) => PromiseLike<string>);\\n    directory?: boolean;\\n    data?: object | ((file: UploadFile<T>) => object);\\n    method?: \'POST\' | \'PUT\' | \'PATCH\' | \'post\' | \'put\' | \'patch\';\\n    headers?: HttpRequestHeader;\\n    showUploadList?: boolean | ShowUploadListInterface;\\n    multiple?: boolean;\\n    accept?: string;\\n    beforeUpload?: (file: RcFile, FileList: RcFile[]) => boolean | Promise<void | Blob | File>;\\n    onChange?: (info: UploadChangeParam) => void;\\n    listType?: UploadListType;\\n    className?: string;\\n    onPreview?: (file: UploadFile<T>) => void;\\n    onDownload?: (file: UploadFile<T>) => void;\\n    onRemove?: (file: UploadFile<T>) => void | boolean | Promise<void | boolean>;\\n    supportServerRender?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    prefixCls?: string;\\n    customRequest?: (options: RcCustomRequestOptions) => void;\\n    withCredentials?: boolean;\\n    openFileDialogOnClick?: boolean;\\n    locale?: UploadLocale;\\n    id?: string;\\n    previewFile?: PreviewFileHandler;\\n    /** @deprecated Please use `beforeUpload` directly */\\n    transformFile?: TransformFileHandler;\\n    iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;\\n    isImageUrl?: (file: UploadFile) => boolean;\\n    progress?: UploadListProgressProps;\\n    itemRender?: ItemRender<T>;\\n    /** Config max count of `fileList`. Will replace current one when `maxCount` is 1 */\\n    maxCount?: number;\\n}\\nexport interface UploadState<T = any> {\\n    fileList: UploadFile<T>[];\\n    dragState: string;\\n}\\nexport interface UploadListProps<T = any> {\\n    listType?: UploadListType;\\n    onPreview?: (file: UploadFile<T>) => void;\\n    onDownload?: (file: UploadFile<T>) => void;\\n    onRemove?: (file: UploadFile<T>) => void | boolean;\\n    items?: Array<UploadFile<T>>;\\n    progress?: UploadListProgressProps;\\n    prefixCls?: string;\\n    showRemoveIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    locale: UploadLocale;\\n    previewFile?: PreviewFileHandler;\\n    iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;\\n    isImageUrl?: (file: UploadFile) => boolean;\\n    appendAction?: React.ReactNode;\\n    itemRender?: ItemRender<T>;\\n}\\nexport {};\\n","antd/upload/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\nimport \'../../progress/style\';\\nimport \'../../tooltip/style\';\\n","antd/upload/Upload.d.ts":"import * as React from \'react\';\\nimport Dragger from \'./Dragger\';\\nimport { UploadProps } from \'./interface\';\\nexport { UploadProps };\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<React.PropsWithChildren<UploadProps> & React.RefAttributes<any>> {\\n    Dragger: typeof Dragger;\\n}\\ndeclare const Upload: CompoundedComponent;\\nexport default Upload;\\n","antd/upload/UploadList/index.d.ts":"import * as React from \'react\';\\nimport { UploadListProps } from \'../interface\';\\ndeclare const UploadList: React.ForwardRefExoticComponent<UploadListProps<any> & React.RefAttributes<unknown>>;\\nexport default UploadList;\\n","antd/upload/UploadList/ListItem.d.ts":"import * as React from \'react\';\\nimport { ItemRender, UploadFile, UploadListProgressProps, UploadListType, UploadLocale } from \'../interface\';\\nexport interface ListItemProps {\\n    prefixCls: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    locale: UploadLocale;\\n    file: UploadFile;\\n    items: UploadFile[];\\n    listType?: UploadListType;\\n    isImgUrl?: (file: UploadFile) => boolean;\\n    showRemoveIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    iconRender: (file: UploadFile) => React.ReactNode;\\n    actionIconRender: (customIcon: React.ReactNode, callback: () => void, prefixCls: string, title?: string | undefined) => React.ReactNode;\\n    itemRender?: ItemRender;\\n    onPreview: (file: UploadFile, e: React.SyntheticEvent<HTMLElement>) => void;\\n    onClose: (file: UploadFile) => void;\\n    onDownload: (file: UploadFile) => void;\\n    progress?: UploadListProgressProps;\\n}\\ndeclare const ListItem: React.ForwardRefExoticComponent<ListItemProps & React.RefAttributes<HTMLDivElement>>;\\nexport default ListItem;\\n","antd/upload/useFreshState.d.ts":"export default function useFreshState<T>(defaultValue: T, propValue?: T): [(displayValue?: boolean) => T, (newValue: T) => void];\\n","antd/upload/utils.d.ts":"import { RcFile, UploadFile } from \'./interface\';\\nexport declare function T(): boolean;\\nexport declare function fileToObject(file: RcFile): UploadFile;\\nexport declare function getFileItem(file: UploadFile, fileList: UploadFile[]): UploadFile<any>;\\nexport declare function removeFileItem(file: UploadFile, fileList: UploadFile[]): UploadFile<any>[] | null;\\nexport declare const isImageUrl: (file: UploadFile) => boolean;\\nexport declare function previewImage(file: File | Blob): Promise<string>;\\n","antd/version/index.d.ts":"import version from \'./version\';\\nexport default version;\\n","antd/version/style/index.d.ts":"import \'../../style/index.less\';\\n","antd/version/version.d.ts":"declare const _default: \\"4.12.0\\";\\nexport default _default;\\n","antd/_util/colors.d.ts":"import { ElementOf } from \'./type\';\\nexport declare const PresetStatusColorTypes: [\\"success\\", \\"processing\\", \\"error\\", \\"default\\", \\"warning\\"];\\nexport declare const PresetColorTypes: [\\"pink\\", \\"red\\", \\"yellow\\", \\"orange\\", \\"cyan\\", \\"green\\", \\"blue\\", \\"purple\\", \\"geekblue\\", \\"magenta\\", \\"volcano\\", \\"gold\\", \\"lime\\"];\\nexport declare type PresetColorType = ElementOf<typeof PresetColorTypes>;\\nexport declare type PresetStatusColorType = ElementOf<typeof PresetStatusColorTypes>;\\n","antd/_util/devWarning.d.ts":"import { resetWarned } from \'rc-util/lib/warning\';\\nexport { resetWarned };\\ndeclare const _default: (valid: boolean, component: string, message: string) => void;\\nexport default _default;\\n","antd/_util/easings.d.ts":"export declare function easeInOutCubic(t: number, b: number, c: number, d: number): number;\\n","antd/_util/getDataOrAriaProps.d.ts":"export default function getDataOrAriaProps(props: any): any;\\n","antd/_util/getRenderPropValue.d.ts":"import * as React from \'react\';\\nexport declare type RenderFunction = () => React.ReactNode;\\nexport declare const getRenderPropValue: (propValue?: React.ReactNode | RenderFunction) => React.ReactNode;\\n","antd/_util/getScroll.d.ts":"export declare function isWindow(obj: any): boolean;\\nexport default function getScroll(target: HTMLElement | Window | Document | null, top: boolean): number;\\n","antd/_util/hooks/useForceUpdate.d.ts":"import * as React from \'react\';\\nexport default function useForceUpdate(): React.DispatchWithoutAction;\\n","antd/_util/hooks/usePatchElement.d.ts":"import * as React from \'react\';\\nexport default function usePatchElement(): [\\n    React.ReactElement[],\\n    (element: React.ReactElement) => Function\\n];\\n","antd/_util/hooks/useSyncState.d.ts":"declare type UseSyncStateProps<T> = [() => T, (newValue: T) => void];\\nexport default function useSyncState<T>(initialValue: T): UseSyncStateProps<T>;\\nexport {};\\n","antd/_util/isNumeric.d.ts":"declare const isNumeric: (value: any) => boolean;\\nexport default isNumeric;\\n","antd/_util/motion.d.ts":"import { CSSMotionProps } from \'rc-motion\';\\ndeclare const collapseMotion: CSSMotionProps;\\nexport default collapseMotion;\\n","antd/_util/raf.d.ts":"interface RafMap {\\n    [id: number]: number;\\n}\\ndeclare function wrapperRaf(callback: () => void, delayFrames?: number): number;\\ndeclare namespace wrapperRaf {\\n    var cancel: (pid?: number | undefined) => void;\\n    var ids: RafMap;\\n}\\nexport default wrapperRaf;\\n","antd/_util/reactNode.d.ts":"import * as React from \'react\';\\nexport declare const isValidElement: typeof React.isValidElement;\\ndeclare type AnyObject = Record<any, any>;\\ndeclare type RenderProps = undefined | AnyObject | ((originProps: AnyObject) => AnyObject | undefined);\\nexport declare function replaceElement(element: React.ReactNode, replacement: React.ReactNode, props: RenderProps): React.ReactNode;\\nexport declare function cloneElement(element: React.ReactNode, props?: RenderProps): React.ReactElement;\\nexport {};\\n","antd/_util/responsiveObserve.d.ts":"export declare type Breakpoint = \'xxl\' | \'xl\' | \'lg\' | \'md\' | \'sm\' | \'xs\';\\nexport declare type BreakpointMap = Record<Breakpoint, string>;\\nexport declare type ScreenMap = Partial<Record<Breakpoint, boolean>>;\\nexport declare type ScreenSizeMap = Partial<Record<Breakpoint, number>>;\\nexport declare const responsiveArray: Breakpoint[];\\nexport declare const responsiveMap: BreakpointMap;\\ndeclare type SubscribeFunc = (screens: ScreenMap) => void;\\ndeclare const responsiveObserve: {\\n    matchHandlers: {\\n        [prop: string]: {\\n            mql: MediaQueryList;\\n            listener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\\n        };\\n    };\\n    dispatch(pointMap: ScreenMap): boolean;\\n    subscribe(func: SubscribeFunc): number;\\n    unsubscribe(token: number): void;\\n    unregister(): void;\\n    register(): void;\\n};\\nexport default responsiveObserve;\\n","antd/_util/scrollTo.d.ts":"interface ScrollToOptions {\\n    /** Scroll container, default as window */\\n    getContainer?: () => HTMLElement | Window | Document;\\n    /** Scroll end callback */\\n    callback?: () => any;\\n    /** Animation duration, default as 450 */\\n    duration?: number;\\n}\\nexport default function scrollTo(y: number, options?: ScrollToOptions): void;\\nexport {};\\n","antd/_util/styleChecker.d.ts":"export declare const canUseDocElement: () => false | HTMLElement;\\nexport declare const isStyleSupport: (styleName: string | Array<string>) => boolean;\\nexport declare const isFlexSupported: boolean;\\nexport declare const isFlexGapSupported: boolean;\\n","antd/_util/throttleByAnimationFrame.d.ts":"export declare function throttleByAnimationFrame(fn: (...args: any[]) => void): (...args: any[]) => void;\\nexport declare function throttleByAnimationFrameDecorator(): (target: any, key: string, descriptor: any) => {\\n    configurable: boolean;\\n    get(): any;\\n};\\n","antd/_util/transButton.d.ts":"/**\\n * Wrap of sub component which need use as Button capacity (like Icon component).\\n *\\n * This helps accessibility reader to tread as a interactive button to operation.\\n */\\nimport * as React from \'react\';\\ninterface TransButtonProps extends React.HTMLAttributes<HTMLDivElement> {\\n    onClick?: (e?: React.MouseEvent<HTMLDivElement>) => void;\\n    noStyle?: boolean;\\n    autoFocus?: boolean;\\n    disabled?: boolean;\\n}\\ndeclare const TransButton: React.ForwardRefExoticComponent<TransButtonProps & React.RefAttributes<HTMLDivElement>>;\\nexport default TransButton;\\n","antd/_util/type.d.ts":"export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\\nexport declare const tuple: <T extends string[]>(...args: T) => T;\\nexport declare const tupleNum: <T extends number[]>(...args: T) => T;\\n/**\\n * https://stackoverflow.com/a/59187769 Extract the type of an element of an array/tuple without\\n * performing indexing\\n */\\nexport declare type ElementOf<T> = T extends (infer E)[] ? E : T extends readonly (infer F)[] ? F : never;\\n/** https://github.com/Microsoft/TypeScript/issues/29729 */\\nexport declare type LiteralUnion<T extends U, U> = T | (U & {});\\n","antd/_util/unreachableException.d.ts":"export default class UnreachableException {\\n    constructor(value: never);\\n}\\n","antd/_util/wave.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport default class Wave extends React.Component<{\\n    insertExtraNode?: boolean;\\n}> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    private instance?;\\n    private containerRef;\\n    private extraNode;\\n    private clickWaveTimeoutId;\\n    private animationStartId;\\n    private animationStart;\\n    private destroyed;\\n    private csp?;\\n    context: ConfigConsumerProps;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    onClick: (node: HTMLElement, waveColor: string) => void;\\n    onTransitionStart: (e: AnimationEvent) => void;\\n    onTransitionEnd: (e: AnimationEvent) => void;\\n    getAttributeName(): string;\\n    bindAnimationEvent: (node: HTMLElement) => {\\n        cancel: () => void;\\n    } | undefined;\\n    resetEffect(node: HTMLElement): void;\\n    renderWave: ({ csp }: ConfigConsumerProps) => {} | null | undefined;\\n    render(): JSX.Element;\\n}\\n","rc-table/es/Body/BodyRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent, GetComponentProps, Key, GetRowKey } from \'../interface\';\\nexport interface BodyRowProps<RecordType> {\\n    record: RecordType;\\n    index: number;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    recordKey: Key;\\n    expandedKeys: Set<Key>;\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    indent?: number;\\n    rowKey: React.Key;\\n    getRowKey: GetRowKey<RecordType>;\\n    childrenColumnName: string;\\n}\\ndeclare function BodyRow<RecordType extends {\\n    children?: readonly RecordType[];\\n}>(props: BodyRowProps<RecordType>): JSX.Element;\\ndeclare namespace BodyRow {\\n    var displayName: string;\\n}\\nexport default BodyRow;\\n","rc-table/es/Body/ExpandedRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent } from \'../interface\';\\nexport interface ExpandedRowProps {\\n    prefixCls: string;\\n    component: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    componentWidth: number;\\n    className: string;\\n    expanded: boolean;\\n    children: React.ReactNode;\\n    colSpan: number;\\n}\\ndeclare function ExpandedRow({ prefixCls, children, component: Component, cellComponent, fixHeader, fixColumn, horizonScroll, className, expanded, componentWidth, colSpan, }: ExpandedRowProps): JSX.Element;\\nexport default ExpandedRow;\\n","rc-table/es/Body/index.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, Key, GetComponentProps } from \'../interface\';\\nexport interface BodyProps<RecordType> {\\n    data: readonly RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    measureColumnWidth: boolean;\\n    expandedKeys: Set<Key>;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    emptyNode: React.ReactNode;\\n    childrenColumnName: string;\\n}\\ndeclare function Body<RecordType>({ data, getRowKey, measureColumnWidth, expandedKeys, onRow, rowExpandable, emptyNode, childrenColumnName, }: BodyProps<RecordType>): JSX.Element;\\ndeclare const MemoBody: React.MemoExoticComponent<typeof Body>;\\nexport default MemoBody;\\n","rc-table/es/Body/MeasureCell.d.ts":"import * as React from \'react\';\\nexport interface MeasureCellProps {\\n    columnKey: React.Key;\\n    onColumnResize: (key: React.Key, width: number) => void;\\n}\\nexport default function MeasureCell({ columnKey, onColumnResize }: MeasureCellProps): JSX.Element;\\n","rc-table/es/Cell/index.d.ts":"import * as React from \'react\';\\nimport { DataIndex, ColumnType, CustomizeComponent, DefaultRecordType, AlignType, CellEllipsisType } from \'../interface\';\\nexport interface CellProps<RecordType extends DefaultRecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    record?: RecordType;\\n    /** `record` index. Not `column` index. */\\n    index?: number;\\n    dataIndex?: DataIndex;\\n    render?: ColumnType<RecordType>[\'render\'];\\n    component?: CustomizeComponent;\\n    children?: React.ReactNode;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    fixLeft?: number | false;\\n    fixRight?: number | false;\\n    firstFixLeft?: boolean;\\n    lastFixLeft?: boolean;\\n    firstFixRight?: boolean;\\n    lastFixRight?: boolean;\\n    /** @private Used for `expandable` with nest tree */\\n    appendNode?: React.ReactNode;\\n    additionalProps?: React.HTMLAttributes<HTMLElement>;\\n    rowType?: \'header\' | \'body\' | \'footer\';\\n    isSticky?: boolean;\\n}\\ndeclare const MemoCell: React.MemoExoticComponent<React.ForwardRefExoticComponent<CellProps<any> & React.RefAttributes<any>>>;\\nexport default MemoCell;\\n","rc-table/es/ColGroup.d.ts":"/// <reference types=\\"react\\" />\\nimport { ColumnType } from \'./interface\';\\nexport interface ColGroupProps<RecordType> {\\n    colWidths: readonly (number | string)[];\\n    columns?: readonly ColumnType<RecordType>[];\\n    columCount?: number;\\n}\\ndeclare function ColGroup<RecordType>({ colWidths, columns, columCount }: ColGroupProps<RecordType>): JSX.Element;\\nexport default ColGroup;\\n","rc-table/es/context/BodyContext.d.ts":"import * as React from \'react\';\\nimport { ColumnType, DefaultRecordType, ColumnsType, TableLayout, RenderExpandIcon, ExpandableType, RowClassName, TriggerEventHandler, ExpandedRowRender } from \'../interface\';\\nexport interface BodyContextProps<RecordType = DefaultRecordType> {\\n    rowClassName: string | RowClassName<RecordType>;\\n    expandedRowClassName: RowClassName<RecordType>;\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    componentWidth: number;\\n    tableLayout: TableLayout;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    indentSize: number;\\n    expandableType: ExpandableType;\\n    expandRowByClick: boolean;\\n    expandedRowRender: ExpandedRowRender<RecordType>;\\n    expandIcon: RenderExpandIcon<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIconColumnIndex: number;\\n}\\ndeclare const BodyContext: React.Context<BodyContextProps<Record<string, any>>>;\\nexport default BodyContext;\\n","rc-table/es/context/ResizeContext.d.ts":"import * as React from \'react\';\\ninterface ResizeContextProps {\\n    onColumnResize: (columnKey: React.Key, width: number) => void;\\n}\\ndeclare const ResizeContext: React.Context<ResizeContextProps>;\\nexport default ResizeContext;\\n","rc-table/es/context/TableContext.d.ts":"import * as React from \'react\';\\nimport { GetComponent } from \'../interface\';\\nimport { FixedInfo } from \'../utils/fixUtil\';\\nexport interface TableContextProps {\\n    prefixCls: string;\\n    getComponent: GetComponent;\\n    scrollbarSize: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixedInfoList: readonly FixedInfo[];\\n    isSticky: boolean;\\n}\\ndeclare const TableContext: React.Context<TableContextProps>;\\nexport default TableContext;\\n","rc-table/es/Footer/Cell.d.ts":"import * as React from \'react\';\\nimport { AlignType } from \'../interface\';\\nexport interface SummaryCellProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    index: number;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    align?: AlignType;\\n}\\nexport default function SummaryCell({ className, index, children, colSpan, rowSpan, align, }: SummaryCellProps): JSX.Element;\\n","rc-table/es/Footer/index.d.ts":"import * as React from \'react\';\\nimport Cell from \'./Cell\';\\nimport Row from \'./Row\';\\nexport interface FooterProps {\\n    children: React.ReactNode;\\n}\\ndeclare function Footer({ children }: FooterProps): JSX.Element;\\nexport default Footer;\\nexport declare const FooterComponents: {\\n    Cell: typeof Cell;\\n    Row: typeof Row;\\n};\\n","rc-table/es/Footer/Row.d.ts":"import * as React from \'react\';\\nexport interface FooterRowProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport default function FooterRow(props: FooterRowProps): JSX.Element;\\n","rc-table/es/Header/FixedHeader.d.ts":"import * as React from \'react\';\\nimport { HeaderProps } from \'./Header\';\\nexport interface FixedHeaderProps<RecordType> extends HeaderProps<RecordType> {\\n    noData: boolean;\\n    colWidths: readonly number[];\\n    columCount: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixHeader: boolean;\\n    offsetHeader: number;\\n    stickyClassName?: string;\\n    onScroll: (info: {\\n        currentTarget: HTMLDivElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}\\ndeclare const FixedHeader: React.ForwardRefExoticComponent<FixedHeaderProps<unknown> & React.RefAttributes<HTMLDivElement>>;\\nexport default FixedHeader;\\n","rc-table/es/Header/Header.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, StickyOffsets, ColumnType, GetComponentProps } from \'../interface\';\\nexport interface HeaderProps<RecordType> {\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n}\\ndeclare function Header<RecordType>({ stickyOffsets, columns, flattenColumns, onHeaderRow, }: HeaderProps<RecordType>): React.ReactElement;\\nexport default Header;\\n","rc-table/es/Header/HeaderRow.d.ts":"/// <reference types=\\"react\\" />\\nimport { CellType, StickyOffsets, ColumnType, CustomizeComponent, GetComponentProps } from \'../interface\';\\nexport interface RowProps<RecordType> {\\n    cells: readonly CellType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    index: number;\\n}\\ndeclare function HeaderRow<RecordType>({ cells, stickyOffsets, flattenColumns, rowComponent: RowComponent, cellComponent: CellComponent, onHeaderRow, index, }: RowProps<RecordType>): JSX.Element;\\ndeclare namespace HeaderRow {\\n    var displayName: string;\\n}\\nexport default HeaderRow;\\n","rc-table/es/hooks/useColumns.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, ColumnType, Key, GetRowKey, TriggerEventHandler, RenderExpandIcon } from \'../interface\';\\nexport declare function convertChildrenToColumns<RecordType>(children: React.ReactNode): ColumnsType<RecordType>;\\n/**\\n * Parse `columns` & `children` into `columns`.\\n */\\ndeclare function useColumns<RecordType>({ prefixCls, columns, children, expandable, expandedKeys, getRowKey, onTriggerExpand, expandIcon, rowExpandable, expandIconColumnIndex, direction, expandRowByClick, columnWidth, }: {\\n    prefixCls?: string;\\n    columns?: ColumnsType<RecordType>;\\n    children?: React.ReactNode;\\n    expandable: boolean;\\n    expandedKeys: Set<Key>;\\n    getRowKey: GetRowKey<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    expandIconColumnIndex?: number;\\n    direction?: \'ltr\' | \'rtl\';\\n    expandRowByClick?: boolean;\\n    columnWidth?: number | string;\\n}, transformColumns: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>): [ColumnsType<RecordType>, readonly ColumnType<RecordType>[]];\\nexport default useColumns;\\n","rc-table/es/hooks/useFrame.d.ts":"export declare type Updater<State> = (prev: State) => State;\\n/**\\n * Execute code before next frame but async\\n */\\nexport declare function useLayoutState<State>(defaultState: State): [State, (updater: Updater<State>) => void];\\n/** Lock frame, when frame pass reset the lock. */\\nexport declare function useTimeoutLock<State>(defaultState?: State): [(state: State) => void, () => State | null];\\n","rc-table/es/hooks/useSticky.d.ts":"import { TableSticky } from \'../interface\';\\n/** Sticky header hooks */\\nexport default function useSticky(sticky: boolean | TableSticky, prefixCls: string): {\\n    isSticky: boolean;\\n    offsetHeader: number;\\n    offsetScroll: number;\\n    stickyClassName: string;\\n    container: Window | HTMLElement;\\n};\\n","rc-table/es/hooks/useStickyOffsets.d.ts":"import { StickyOffsets } from \'../interface\';\\n/**\\n * Get sticky column offset width\\n */\\ndeclare function useStickyOffsets(colWidths: number[], columnCount: number, direction: \'ltr\' | \'rtl\'): StickyOffsets;\\nexport default useStickyOffsets;\\n","rc-table/es/index.d.ts":"import Table from \'./Table\';\\nimport { FooterComponents as Summary } from \'./Footer\';\\nimport Column from \'./sugar/Column\';\\nimport ColumnGroup from \'./sugar/ColumnGroup\';\\nimport { INTERNAL_COL_DEFINE } from \'./utils/legacyUtil\';\\nexport { Summary, Column, ColumnGroup, INTERNAL_COL_DEFINE };\\nexport default Table;\\n","rc-table/es/interface.d.ts":"import * as React from \'react\';\\n/**\\n * ColumnType which applied in antd: https://ant.design/components/table-cn/#Column\\n * - defaultSortOrder\\n * - filterDropdown\\n * - filterDropdownVisible\\n * - filtered\\n * - filteredValue\\n * - filterIcon\\n * - filterMultiple\\n * - filters\\n * - sorter\\n * - sortOrder\\n * - sortDirections\\n * - onFilter\\n * - onFilterDropdownVisibleChange\\n */\\nexport declare type Key = React.Key;\\nexport declare type FixedType = \'left\' | \'right\' | boolean;\\nexport declare type DefaultRecordType = Record<string, any>;\\nexport declare type TableLayout = \'auto\' | \'fixed\';\\nexport declare type RowClassName<RecordType> = (record: RecordType, index: number, indent: number) => string;\\nexport interface CellType<RecordType> {\\n    key?: Key;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    column?: ColumnsType<RecordType>[number];\\n    colSpan?: number;\\n    rowSpan?: number;\\n    /** Only used for table header */\\n    hasSubColumns?: boolean;\\n    colStart?: number;\\n    colEnd?: number;\\n}\\nexport interface RenderedCell<RecordType> {\\n    props?: CellType<RecordType>;\\n    children?: React.ReactNode;\\n}\\nexport declare type DataIndex = string | number | readonly (string | number)[];\\nexport declare type CellEllipsisType = {\\n    showTitle?: boolean;\\n} | boolean;\\ninterface ColumnSharedType<RecordType> {\\n    title?: React.ReactNode;\\n    key?: Key;\\n    className?: string;\\n    fixed?: FixedType;\\n    onHeaderCell?: GetComponentProps<ColumnsType<RecordType>[number]>;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n}\\nexport interface ColumnGroupType<RecordType> extends ColumnSharedType<RecordType> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type AlignType = \'left\' | \'center\' | \'right\';\\nexport interface ColumnType<RecordType> extends ColumnSharedType<RecordType> {\\n    colSpan?: number;\\n    dataIndex?: DataIndex;\\n    render?: (value: any, record: RecordType, index: number) => React.ReactNode | RenderedCell<RecordType>;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    rowSpan?: number;\\n    width?: number | string;\\n    onCell?: GetComponentProps<RecordType>;\\n    /** @deprecated Please use `onCell` instead */\\n    onCellClick?: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = readonly (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport declare type GetRowKey<RecordType> = (record: RecordType, index?: number) => Key;\\nexport interface StickyOffsets {\\n    left: readonly number[];\\n    right: readonly number[];\\n    isSticky?: boolean;\\n}\\nexport declare type GetComponentProps<DataType> = (data: DataType, index?: number) => React.HTMLAttributes<HTMLElement>;\\ndeclare type Component<P> = React.ComponentType<P> | React.ForwardRefExoticComponent<P> | React.FC<P> | keyof React.ReactHTML;\\nexport declare type CustomizeComponent = Component<any>;\\nexport declare type CustomizeScrollBody<RecordType> = (data: readonly RecordType[], info: {\\n    scrollbarSize: number;\\n    ref: React.Ref<{\\n        scrollLeft: number;\\n    }>;\\n    onScroll: (info: {\\n        currentTarget?: HTMLElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}) => React.ReactNode;\\nexport interface TableComponents<RecordType> {\\n    table?: CustomizeComponent;\\n    header?: {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n    body?: CustomizeScrollBody<RecordType> | {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n}\\nexport declare type GetComponent = (path: readonly string[], defaultComponent?: CustomizeComponent) => CustomizeComponent;\\nexport declare type ExpandableType = false | \'row\' | \'nest\';\\nexport interface LegacyExpandableProps<RecordType> {\\n    /** @deprecated Use `expandable.expandedRowKeys` instead */\\n    expandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.defaultExpandedRowKeys` instead */\\n    defaultExpandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.expandedRowRender` instead */\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    /** @deprecated Use `expandable.expandRowByClick` instead */\\n    expandRowByClick?: boolean;\\n    /** @deprecated Use `expandable.expandIcon` instead */\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    /** @deprecated Use `expandable.onExpand` instead */\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    /** @deprecated Use `expandable.onExpandedRowsChange` instead */\\n    onExpandedRowsChange?: (expandedKeys: Key[]) => void;\\n    /** @deprecated Use `expandable.defaultExpandAllRows` instead */\\n    defaultExpandAllRows?: boolean;\\n    /** @deprecated Use `expandable.indentSize` instead */\\n    indentSize?: number;\\n    /** @deprecated Use `expandable.expandIconColumnIndex` instead */\\n    expandIconColumnIndex?: number;\\n    /** @deprecated Use `expandable.expandedRowClassName` instead */\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    /** @deprecated Use `expandable.childrenColumnName` instead */\\n    childrenColumnName?: string;\\n}\\nexport declare type ExpandedRowRender<ValueType> = (record: ValueType, index: number, indent: number, expanded: boolean) => React.ReactNode;\\nexport interface RenderExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    expanded: boolean;\\n    record: RecordType;\\n    expandable: boolean;\\n    onExpand: TriggerEventHandler<RecordType>;\\n}\\nexport declare type RenderExpandIcon<RecordType> = (props: RenderExpandIconProps<RecordType>) => React.ReactNode;\\nexport interface ExpandableConfig<RecordType> {\\n    expandedRowKeys?: readonly Key[];\\n    defaultExpandedRowKeys?: readonly Key[];\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    expandRowByClick?: boolean;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    onExpandedRowsChange?: (expandedKeys: readonly Key[]) => void;\\n    defaultExpandAllRows?: boolean;\\n    indentSize?: number;\\n    expandIconColumnIndex?: number;\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    childrenColumnName?: string;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    columnWidth?: number | string;\\n}\\nexport declare type PanelRender<RecordType> = (data: readonly RecordType[]) => React.ReactNode;\\nexport declare type TriggerEventHandler<RecordType> = (record: RecordType, event: React.MouseEvent<HTMLElement>) => void;\\nexport interface TableSticky {\\n    offsetHeader?: number;\\n    offsetScroll?: number;\\n    getContainer?: () => Window | HTMLElement;\\n}\\nexport {};\\n","rc-table/es/Panel/index.d.ts":"import * as React from \'react\';\\nexport interface TitleProps {\\n    className: string;\\n    children: React.ReactNode;\\n}\\ndeclare function Panel({ className, children }: TitleProps): JSX.Element;\\nexport default Panel;\\n","rc-table/es/stickyScrollBar.d.ts":"import * as React from \'react\';\\ninterface StickyScrollBarProps {\\n    scrollBodyRef: React.RefObject<HTMLDivElement>;\\n    onScroll: (params: {\\n        scrollLeft?: number;\\n    }) => void;\\n    offsetScroll: number;\\n    container: HTMLElement | Window;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<StickyScrollBarProps & React.RefAttributes<unknown>>;\\nexport default _default;\\n","rc-table/es/sugar/Column.d.ts":"import { ColumnType } from \'../interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): any;\\nexport default Column;\\n","rc-table/es/sugar/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnProps } from \'./Column\';\\nimport { ColumnType } from \'../interface\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | readonly React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): any;\\nexport default ColumnGroup;\\n","rc-table/es/Table.d.ts":"/**\\n * Feature:\\n *  - fixed not need to set width\\n *  - support `rowExpandable` to config row expand logic\\n *  - add `summary` to support `() => ReactNode`\\n *\\n * Update:\\n *  - `dataIndex` is `array[]` now\\n *  - `expandable` wrap all the expand related props\\n *\\n * Removed:\\n *  - expandIconAsCell\\n *  - useFixedHeader\\n *  - rowRef\\n *  - columns[number].onCellClick\\n *  - onRowClick\\n *  - onRowDoubleClick\\n *  - onRowMouseEnter\\n *  - onRowMouseLeave\\n *  - getBodyWrapper\\n *  - bodyStyle\\n *\\n * Deprecated:\\n *  - All expanded props, move into expandable\\n */\\nimport * as React from \'react\';\\nimport { GetRowKey, ColumnsType, TableComponents, DefaultRecordType, GetComponentProps, ExpandableConfig, LegacyExpandableProps, PanelRender, TableLayout, RowClassName, ColumnType, TableSticky } from \'./interface\';\\nexport declare const INTERNAL_HOOKS = \\"rc-table-internal-hook\\";\\nexport interface TableProps<RecordType = unknown> extends LegacyExpandableProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    data?: readonly RecordType[];\\n    columns?: ColumnsType<RecordType>;\\n    rowKey?: string | GetRowKey<RecordType>;\\n    tableLayout?: TableLayout;\\n    scroll?: {\\n        x?: number | true | string;\\n        y?: number | string;\\n    };\\n    /** Config expand rows */\\n    expandable?: ExpandableConfig<RecordType>;\\n    indentSize?: number;\\n    rowClassName?: string | RowClassName<RecordType>;\\n    title?: PanelRender<RecordType>;\\n    footer?: PanelRender<RecordType>;\\n    summary?: (data: readonly RecordType[]) => React.ReactNode;\\n    id?: string;\\n    showHeader?: boolean;\\n    components?: TableComponents<RecordType>;\\n    onRow?: GetComponentProps<RecordType>;\\n    onHeaderRow?: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    direction?: \'ltr\' | \'rtl\';\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalHooks?: string;\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    transformColumns?: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\n    /**\\n     * @private Internal usage, may remove by refactor.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalRefs?: {\\n        body: React.MutableRefObject<HTMLDivElement>;\\n    };\\n    sticky?: boolean | TableSticky;\\n}\\ndeclare function Table<RecordType extends DefaultRecordType>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var Column: typeof import(\\"./sugar/Column\\").default;\\n    var ColumnGroup: typeof import(\\"./sugar/ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"./Footer/Cell\\").default;\\n        Row: typeof import(\\"./Footer/Row\\").default;\\n    };\\n    var defaultProps: {\\n        rowKey: string;\\n        prefixCls: string;\\n        emptyText: () => string;\\n    };\\n}\\nexport default Table;\\n","rc-table/es/utils/expandUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { RenderExpandIconProps, Key, GetRowKey } from \'../interface\';\\nexport declare function renderExpandIcon<RecordType>({ prefixCls, record, onExpand, expanded, expandable, }: RenderExpandIconProps<RecordType>): JSX.Element;\\nexport declare function findAllChildrenKeys<RecordType>(data: readonly RecordType[], getRowKey: GetRowKey<RecordType>, childrenColumnName: string): Key[];\\n","rc-table/es/utils/fixUtil.d.ts":"import { StickyOffsets, FixedType } from \'../interface\';\\nexport interface FixedInfo {\\n    fixLeft: number | false;\\n    fixRight: number | false;\\n    lastFixLeft: boolean;\\n    firstFixRight: boolean;\\n    lastFixRight: boolean;\\n    firstFixLeft: boolean;\\n    isSticky: boolean;\\n}\\nexport declare function getCellFixedInfo(colStart: number, colEnd: number, columns: readonly {\\n    fixed?: FixedType;\\n}[], stickyOffsets: StickyOffsets, direction: \'ltr\' | \'rtl\'): FixedInfo;\\n","rc-table/es/utils/legacyUtil.d.ts":"import { ExpandableConfig, LegacyExpandableProps } from \'../interface\';\\nexport declare const INTERNAL_COL_DEFINE = \\"RC_TABLE_INTERNAL_COL_DEFINE\\";\\nexport declare function getExpandableProps<RecordType>(props: LegacyExpandableProps<RecordType> & {\\n    expandable?: ExpandableConfig<RecordType>;\\n}): ExpandableConfig<RecordType>;\\n/**\\n * Returns only data- and aria- key/value pairs\\n * @param {object} props\\n */\\nexport declare function getDataAndAriaProps(props: object): {};\\n","rc-table/es/utils/valueUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { Key, DataIndex } from \'../interface\';\\nexport declare function getPathValue<ValueType, ObjectType extends object>(record: ObjectType, path: DataIndex): ValueType;\\ninterface GetColumnKeyColumn {\\n    key?: Key;\\n    dataIndex?: DataIndex;\\n}\\nexport declare function getColumnsKey(columns: readonly GetColumnKeyColumn[]): import(\\"react\\").Key[];\\nexport declare function mergeObject<ReturnObject extends object>(...objects: Partial<ReturnObject>[]): ReturnObject;\\nexport declare function validateValue<T>(val: T): boolean;\\nexport {};\\n","rc-table/lib/Body/BodyRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent, GetComponentProps, Key, GetRowKey } from \'../interface\';\\nexport interface BodyRowProps<RecordType> {\\n    record: RecordType;\\n    index: number;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    recordKey: Key;\\n    expandedKeys: Set<Key>;\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    indent?: number;\\n    rowKey: React.Key;\\n    getRowKey: GetRowKey<RecordType>;\\n    childrenColumnName: string;\\n}\\ndeclare function BodyRow<RecordType extends {\\n    children?: readonly RecordType[];\\n}>(props: BodyRowProps<RecordType>): JSX.Element;\\ndeclare namespace BodyRow {\\n    var displayName: string;\\n}\\nexport default BodyRow;\\n","rc-table/lib/Body/ExpandedRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent } from \'../interface\';\\nexport interface ExpandedRowProps {\\n    prefixCls: string;\\n    component: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    componentWidth: number;\\n    className: string;\\n    expanded: boolean;\\n    children: React.ReactNode;\\n    colSpan: number;\\n}\\ndeclare function ExpandedRow({ prefixCls, children, component: Component, cellComponent, fixHeader, fixColumn, horizonScroll, className, expanded, componentWidth, colSpan, }: ExpandedRowProps): JSX.Element;\\nexport default ExpandedRow;\\n","rc-table/lib/Body/index.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, Key, GetComponentProps } from \'../interface\';\\nexport interface BodyProps<RecordType> {\\n    data: readonly RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    measureColumnWidth: boolean;\\n    expandedKeys: Set<Key>;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    emptyNode: React.ReactNode;\\n    childrenColumnName: string;\\n}\\ndeclare function Body<RecordType>({ data, getRowKey, measureColumnWidth, expandedKeys, onRow, rowExpandable, emptyNode, childrenColumnName, }: BodyProps<RecordType>): JSX.Element;\\ndeclare const MemoBody: React.MemoExoticComponent<typeof Body>;\\nexport default MemoBody;\\n","rc-table/lib/Body/MeasureCell.d.ts":"import * as React from \'react\';\\nexport interface MeasureCellProps {\\n    columnKey: React.Key;\\n    onColumnResize: (key: React.Key, width: number) => void;\\n}\\nexport default function MeasureCell({ columnKey, onColumnResize }: MeasureCellProps): JSX.Element;\\n","rc-table/lib/Cell/index.d.ts":"import * as React from \'react\';\\nimport { DataIndex, ColumnType, CustomizeComponent, DefaultRecordType, AlignType, CellEllipsisType } from \'../interface\';\\nexport interface CellProps<RecordType extends DefaultRecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    record?: RecordType;\\n    /** `record` index. Not `column` index. */\\n    index?: number;\\n    dataIndex?: DataIndex;\\n    render?: ColumnType<RecordType>[\'render\'];\\n    component?: CustomizeComponent;\\n    children?: React.ReactNode;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    fixLeft?: number | false;\\n    fixRight?: number | false;\\n    firstFixLeft?: boolean;\\n    lastFixLeft?: boolean;\\n    firstFixRight?: boolean;\\n    lastFixRight?: boolean;\\n    /** @private Used for `expandable` with nest tree */\\n    appendNode?: React.ReactNode;\\n    additionalProps?: React.HTMLAttributes<HTMLElement>;\\n    rowType?: \'header\' | \'body\' | \'footer\';\\n    isSticky?: boolean;\\n}\\ndeclare const MemoCell: React.MemoExoticComponent<React.ForwardRefExoticComponent<CellProps<any> & React.RefAttributes<any>>>;\\nexport default MemoCell;\\n","rc-table/lib/ColGroup.d.ts":"/// <reference types=\\"react\\" />\\nimport { ColumnType } from \'./interface\';\\nexport interface ColGroupProps<RecordType> {\\n    colWidths: readonly (number | string)[];\\n    columns?: readonly ColumnType<RecordType>[];\\n    columCount?: number;\\n}\\ndeclare function ColGroup<RecordType>({ colWidths, columns, columCount }: ColGroupProps<RecordType>): JSX.Element;\\nexport default ColGroup;\\n","rc-table/lib/context/BodyContext.d.ts":"import * as React from \'react\';\\nimport { ColumnType, DefaultRecordType, ColumnsType, TableLayout, RenderExpandIcon, ExpandableType, RowClassName, TriggerEventHandler, ExpandedRowRender } from \'../interface\';\\nexport interface BodyContextProps<RecordType = DefaultRecordType> {\\n    rowClassName: string | RowClassName<RecordType>;\\n    expandedRowClassName: RowClassName<RecordType>;\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    componentWidth: number;\\n    tableLayout: TableLayout;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    indentSize: number;\\n    expandableType: ExpandableType;\\n    expandRowByClick: boolean;\\n    expandedRowRender: ExpandedRowRender<RecordType>;\\n    expandIcon: RenderExpandIcon<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIconColumnIndex: number;\\n}\\ndeclare const BodyContext: React.Context<BodyContextProps<Record<string, any>>>;\\nexport default BodyContext;\\n","rc-table/lib/context/ResizeContext.d.ts":"import * as React from \'react\';\\ninterface ResizeContextProps {\\n    onColumnResize: (columnKey: React.Key, width: number) => void;\\n}\\ndeclare const ResizeContext: React.Context<ResizeContextProps>;\\nexport default ResizeContext;\\n","rc-table/lib/context/TableContext.d.ts":"import * as React from \'react\';\\nimport { GetComponent } from \'../interface\';\\nimport { FixedInfo } from \'../utils/fixUtil\';\\nexport interface TableContextProps {\\n    prefixCls: string;\\n    getComponent: GetComponent;\\n    scrollbarSize: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixedInfoList: readonly FixedInfo[];\\n    isSticky: boolean;\\n}\\ndeclare const TableContext: React.Context<TableContextProps>;\\nexport default TableContext;\\n","rc-table/lib/Footer/Cell.d.ts":"import * as React from \'react\';\\nimport { AlignType } from \'../interface\';\\nexport interface SummaryCellProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    index: number;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    align?: AlignType;\\n}\\nexport default function SummaryCell({ className, index, children, colSpan, rowSpan, align, }: SummaryCellProps): JSX.Element;\\n","rc-table/lib/Footer/index.d.ts":"import * as React from \'react\';\\nimport Cell from \'./Cell\';\\nimport Row from \'./Row\';\\nexport interface FooterProps {\\n    children: React.ReactNode;\\n}\\ndeclare function Footer({ children }: FooterProps): JSX.Element;\\nexport default Footer;\\nexport declare const FooterComponents: {\\n    Cell: typeof Cell;\\n    Row: typeof Row;\\n};\\n","rc-table/lib/Footer/Row.d.ts":"import * as React from \'react\';\\nexport interface FooterRowProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport default function FooterRow(props: FooterRowProps): JSX.Element;\\n","rc-table/lib/Header/FixedHeader.d.ts":"import * as React from \'react\';\\nimport { HeaderProps } from \'./Header\';\\nexport interface FixedHeaderProps<RecordType> extends HeaderProps<RecordType> {\\n    noData: boolean;\\n    colWidths: readonly number[];\\n    columCount: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixHeader: boolean;\\n    offsetHeader: number;\\n    stickyClassName?: string;\\n    onScroll: (info: {\\n        currentTarget: HTMLDivElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}\\ndeclare const FixedHeader: React.ForwardRefExoticComponent<FixedHeaderProps<unknown> & React.RefAttributes<HTMLDivElement>>;\\nexport default FixedHeader;\\n","rc-table/lib/Header/Header.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, StickyOffsets, ColumnType, GetComponentProps } from \'../interface\';\\nexport interface HeaderProps<RecordType> {\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n}\\ndeclare function Header<RecordType>({ stickyOffsets, columns, flattenColumns, onHeaderRow, }: HeaderProps<RecordType>): React.ReactElement;\\nexport default Header;\\n","rc-table/lib/Header/HeaderRow.d.ts":"/// <reference types=\\"react\\" />\\nimport { CellType, StickyOffsets, ColumnType, CustomizeComponent, GetComponentProps } from \'../interface\';\\nexport interface RowProps<RecordType> {\\n    cells: readonly CellType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    index: number;\\n}\\ndeclare function HeaderRow<RecordType>({ cells, stickyOffsets, flattenColumns, rowComponent: RowComponent, cellComponent: CellComponent, onHeaderRow, index, }: RowProps<RecordType>): JSX.Element;\\ndeclare namespace HeaderRow {\\n    var displayName: string;\\n}\\nexport default HeaderRow;\\n","rc-table/lib/hooks/useColumns.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, ColumnType, Key, GetRowKey, TriggerEventHandler, RenderExpandIcon } from \'../interface\';\\nexport declare function convertChildrenToColumns<RecordType>(children: React.ReactNode): ColumnsType<RecordType>;\\n/**\\n * Parse `columns` & `children` into `columns`.\\n */\\ndeclare function useColumns<RecordType>({ prefixCls, columns, children, expandable, expandedKeys, getRowKey, onTriggerExpand, expandIcon, rowExpandable, expandIconColumnIndex, direction, expandRowByClick, columnWidth, }: {\\n    prefixCls?: string;\\n    columns?: ColumnsType<RecordType>;\\n    children?: React.ReactNode;\\n    expandable: boolean;\\n    expandedKeys: Set<Key>;\\n    getRowKey: GetRowKey<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    expandIconColumnIndex?: number;\\n    direction?: \'ltr\' | \'rtl\';\\n    expandRowByClick?: boolean;\\n    columnWidth?: number | string;\\n}, transformColumns: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>): [ColumnsType<RecordType>, readonly ColumnType<RecordType>[]];\\nexport default useColumns;\\n","rc-table/lib/hooks/useFrame.d.ts":"export declare type Updater<State> = (prev: State) => State;\\n/**\\n * Execute code before next frame but async\\n */\\nexport declare function useLayoutState<State>(defaultState: State): [State, (updater: Updater<State>) => void];\\n/** Lock frame, when frame pass reset the lock. */\\nexport declare function useTimeoutLock<State>(defaultState?: State): [(state: State) => void, () => State | null];\\n","rc-table/lib/hooks/useSticky.d.ts":"import { TableSticky } from \'../interface\';\\n/** Sticky header hooks */\\nexport default function useSticky(sticky: boolean | TableSticky, prefixCls: string): {\\n    isSticky: boolean;\\n    offsetHeader: number;\\n    offsetScroll: number;\\n    stickyClassName: string;\\n    container: Window | HTMLElement;\\n};\\n","rc-table/lib/hooks/useStickyOffsets.d.ts":"import { StickyOffsets } from \'../interface\';\\n/**\\n * Get sticky column offset width\\n */\\ndeclare function useStickyOffsets(colWidths: number[], columnCount: number, direction: \'ltr\' | \'rtl\'): StickyOffsets;\\nexport default useStickyOffsets;\\n","rc-table/lib/index.d.ts":"import Table from \'./Table\';\\nimport { FooterComponents as Summary } from \'./Footer\';\\nimport Column from \'./sugar/Column\';\\nimport ColumnGroup from \'./sugar/ColumnGroup\';\\nimport { INTERNAL_COL_DEFINE } from \'./utils/legacyUtil\';\\nexport { Summary, Column, ColumnGroup, INTERNAL_COL_DEFINE };\\nexport default Table;\\n","rc-table/lib/interface.d.ts":"import * as React from \'react\';\\n/**\\n * ColumnType which applied in antd: https://ant.design/components/table-cn/#Column\\n * - defaultSortOrder\\n * - filterDropdown\\n * - filterDropdownVisible\\n * - filtered\\n * - filteredValue\\n * - filterIcon\\n * - filterMultiple\\n * - filters\\n * - sorter\\n * - sortOrder\\n * - sortDirections\\n * - onFilter\\n * - onFilterDropdownVisibleChange\\n */\\nexport declare type Key = React.Key;\\nexport declare type FixedType = \'left\' | \'right\' | boolean;\\nexport declare type DefaultRecordType = Record<string, any>;\\nexport declare type TableLayout = \'auto\' | \'fixed\';\\nexport declare type RowClassName<RecordType> = (record: RecordType, index: number, indent: number) => string;\\nexport interface CellType<RecordType> {\\n    key?: Key;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    column?: ColumnsType<RecordType>[number];\\n    colSpan?: number;\\n    rowSpan?: number;\\n    /** Only used for table header */\\n    hasSubColumns?: boolean;\\n    colStart?: number;\\n    colEnd?: number;\\n}\\nexport interface RenderedCell<RecordType> {\\n    props?: CellType<RecordType>;\\n    children?: React.ReactNode;\\n}\\nexport declare type DataIndex = string | number | readonly (string | number)[];\\nexport declare type CellEllipsisType = {\\n    showTitle?: boolean;\\n} | boolean;\\ninterface ColumnSharedType<RecordType> {\\n    title?: React.ReactNode;\\n    key?: Key;\\n    className?: string;\\n    fixed?: FixedType;\\n    onHeaderCell?: GetComponentProps<ColumnsType<RecordType>[number]>;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n}\\nexport interface ColumnGroupType<RecordType> extends ColumnSharedType<RecordType> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type AlignType = \'left\' | \'center\' | \'right\';\\nexport interface ColumnType<RecordType> extends ColumnSharedType<RecordType> {\\n    colSpan?: number;\\n    dataIndex?: DataIndex;\\n    render?: (value: any, record: RecordType, index: number) => React.ReactNode | RenderedCell<RecordType>;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    rowSpan?: number;\\n    width?: number | string;\\n    onCell?: GetComponentProps<RecordType>;\\n    /** @deprecated Please use `onCell` instead */\\n    onCellClick?: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = readonly (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport declare type GetRowKey<RecordType> = (record: RecordType, index?: number) => Key;\\nexport interface StickyOffsets {\\n    left: readonly number[];\\n    right: readonly number[];\\n    isSticky?: boolean;\\n}\\nexport declare type GetComponentProps<DataType> = (data: DataType, index?: number) => React.HTMLAttributes<HTMLElement>;\\ndeclare type Component<P> = React.ComponentType<P> | React.ForwardRefExoticComponent<P> | React.FC<P> | keyof React.ReactHTML;\\nexport declare type CustomizeComponent = Component<any>;\\nexport declare type CustomizeScrollBody<RecordType> = (data: readonly RecordType[], info: {\\n    scrollbarSize: number;\\n    ref: React.Ref<{\\n        scrollLeft: number;\\n    }>;\\n    onScroll: (info: {\\n        currentTarget?: HTMLElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}) => React.ReactNode;\\nexport interface TableComponents<RecordType> {\\n    table?: CustomizeComponent;\\n    header?: {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n    body?: CustomizeScrollBody<RecordType> | {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n}\\nexport declare type GetComponent = (path: readonly string[], defaultComponent?: CustomizeComponent) => CustomizeComponent;\\nexport declare type ExpandableType = false | \'row\' | \'nest\';\\nexport interface LegacyExpandableProps<RecordType> {\\n    /** @deprecated Use `expandable.expandedRowKeys` instead */\\n    expandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.defaultExpandedRowKeys` instead */\\n    defaultExpandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.expandedRowRender` instead */\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    /** @deprecated Use `expandable.expandRowByClick` instead */\\n    expandRowByClick?: boolean;\\n    /** @deprecated Use `expandable.expandIcon` instead */\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    /** @deprecated Use `expandable.onExpand` instead */\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    /** @deprecated Use `expandable.onExpandedRowsChange` instead */\\n    onExpandedRowsChange?: (expandedKeys: Key[]) => void;\\n    /** @deprecated Use `expandable.defaultExpandAllRows` instead */\\n    defaultExpandAllRows?: boolean;\\n    /** @deprecated Use `expandable.indentSize` instead */\\n    indentSize?: number;\\n    /** @deprecated Use `expandable.expandIconColumnIndex` instead */\\n    expandIconColumnIndex?: number;\\n    /** @deprecated Use `expandable.expandedRowClassName` instead */\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    /** @deprecated Use `expandable.childrenColumnName` instead */\\n    childrenColumnName?: string;\\n}\\nexport declare type ExpandedRowRender<ValueType> = (record: ValueType, index: number, indent: number, expanded: boolean) => React.ReactNode;\\nexport interface RenderExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    expanded: boolean;\\n    record: RecordType;\\n    expandable: boolean;\\n    onExpand: TriggerEventHandler<RecordType>;\\n}\\nexport declare type RenderExpandIcon<RecordType> = (props: RenderExpandIconProps<RecordType>) => React.ReactNode;\\nexport interface ExpandableConfig<RecordType> {\\n    expandedRowKeys?: readonly Key[];\\n    defaultExpandedRowKeys?: readonly Key[];\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    expandRowByClick?: boolean;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    onExpandedRowsChange?: (expandedKeys: readonly Key[]) => void;\\n    defaultExpandAllRows?: boolean;\\n    indentSize?: number;\\n    expandIconColumnIndex?: number;\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    childrenColumnName?: string;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    columnWidth?: number | string;\\n}\\nexport declare type PanelRender<RecordType> = (data: readonly RecordType[]) => React.ReactNode;\\nexport declare type TriggerEventHandler<RecordType> = (record: RecordType, event: React.MouseEvent<HTMLElement>) => void;\\nexport interface TableSticky {\\n    offsetHeader?: number;\\n    offsetScroll?: number;\\n    getContainer?: () => Window | HTMLElement;\\n}\\nexport {};\\n","rc-table/lib/Panel/index.d.ts":"import * as React from \'react\';\\nexport interface TitleProps {\\n    className: string;\\n    children: React.ReactNode;\\n}\\ndeclare function Panel({ className, children }: TitleProps): JSX.Element;\\nexport default Panel;\\n","rc-table/lib/stickyScrollBar.d.ts":"import * as React from \'react\';\\ninterface StickyScrollBarProps {\\n    scrollBodyRef: React.RefObject<HTMLDivElement>;\\n    onScroll: (params: {\\n        scrollLeft?: number;\\n    }) => void;\\n    offsetScroll: number;\\n    container: HTMLElement | Window;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<StickyScrollBarProps & React.RefAttributes<unknown>>;\\nexport default _default;\\n","rc-table/lib/sugar/Column.d.ts":"import { ColumnType } from \'../interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): any;\\nexport default Column;\\n","rc-table/lib/sugar/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnProps } from \'./Column\';\\nimport { ColumnType } from \'../interface\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | readonly React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): any;\\nexport default ColumnGroup;\\n","rc-table/lib/Table.d.ts":"/**\\n * Feature:\\n *  - fixed not need to set width\\n *  - support `rowExpandable` to config row expand logic\\n *  - add `summary` to support `() => ReactNode`\\n *\\n * Update:\\n *  - `dataIndex` is `array[]` now\\n *  - `expandable` wrap all the expand related props\\n *\\n * Removed:\\n *  - expandIconAsCell\\n *  - useFixedHeader\\n *  - rowRef\\n *  - columns[number].onCellClick\\n *  - onRowClick\\n *  - onRowDoubleClick\\n *  - onRowMouseEnter\\n *  - onRowMouseLeave\\n *  - getBodyWrapper\\n *  - bodyStyle\\n *\\n * Deprecated:\\n *  - All expanded props, move into expandable\\n */\\nimport * as React from \'react\';\\nimport { GetRowKey, ColumnsType, TableComponents, DefaultRecordType, GetComponentProps, ExpandableConfig, LegacyExpandableProps, PanelRender, TableLayout, RowClassName, ColumnType, TableSticky } from \'./interface\';\\nexport declare const INTERNAL_HOOKS = \\"rc-table-internal-hook\\";\\nexport interface TableProps<RecordType = unknown> extends LegacyExpandableProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    data?: readonly RecordType[];\\n    columns?: ColumnsType<RecordType>;\\n    rowKey?: string | GetRowKey<RecordType>;\\n    tableLayout?: TableLayout;\\n    scroll?: {\\n        x?: number | true | string;\\n        y?: number | string;\\n    };\\n    /** Config expand rows */\\n    expandable?: ExpandableConfig<RecordType>;\\n    indentSize?: number;\\n    rowClassName?: string | RowClassName<RecordType>;\\n    title?: PanelRender<RecordType>;\\n    footer?: PanelRender<RecordType>;\\n    summary?: (data: readonly RecordType[]) => React.ReactNode;\\n    id?: string;\\n    showHeader?: boolean;\\n    components?: TableComponents<RecordType>;\\n    onRow?: GetComponentProps<RecordType>;\\n    onHeaderRow?: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    direction?: \'ltr\' | \'rtl\';\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalHooks?: string;\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    transformColumns?: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\n    /**\\n     * @private Internal usage, may remove by refactor.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalRefs?: {\\n        body: React.MutableRefObject<HTMLDivElement>;\\n    };\\n    sticky?: boolean | TableSticky;\\n}\\ndeclare function Table<RecordType extends DefaultRecordType>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var Column: typeof import(\\"./sugar/Column\\").default;\\n    var ColumnGroup: typeof import(\\"./sugar/ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"./Footer/Cell\\").default;\\n        Row: typeof import(\\"./Footer/Row\\").default;\\n    };\\n    var defaultProps: {\\n        rowKey: string;\\n        prefixCls: string;\\n        emptyText: () => string;\\n    };\\n}\\nexport default Table;\\n","rc-table/lib/utils/expandUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { RenderExpandIconProps, Key, GetRowKey } from \'../interface\';\\nexport declare function renderExpandIcon<RecordType>({ prefixCls, record, onExpand, expanded, expandable, }: RenderExpandIconProps<RecordType>): JSX.Element;\\nexport declare function findAllChildrenKeys<RecordType>(data: readonly RecordType[], getRowKey: GetRowKey<RecordType>, childrenColumnName: string): Key[];\\n","rc-table/lib/utils/fixUtil.d.ts":"import { StickyOffsets, FixedType } from \'../interface\';\\nexport interface FixedInfo {\\n    fixLeft: number | false;\\n    fixRight: number | false;\\n    lastFixLeft: boolean;\\n    firstFixRight: boolean;\\n    lastFixRight: boolean;\\n    firstFixLeft: boolean;\\n    isSticky: boolean;\\n}\\nexport declare function getCellFixedInfo(colStart: number, colEnd: number, columns: readonly {\\n    fixed?: FixedType;\\n}[], stickyOffsets: StickyOffsets, direction: \'ltr\' | \'rtl\'): FixedInfo;\\n","rc-table/lib/utils/legacyUtil.d.ts":"import { ExpandableConfig, LegacyExpandableProps } from \'../interface\';\\nexport declare const INTERNAL_COL_DEFINE = \\"RC_TABLE_INTERNAL_COL_DEFINE\\";\\nexport declare function getExpandableProps<RecordType>(props: LegacyExpandableProps<RecordType> & {\\n    expandable?: ExpandableConfig<RecordType>;\\n}): ExpandableConfig<RecordType>;\\n/**\\n * Returns only data- and aria- key/value pairs\\n * @param {object} props\\n */\\nexport declare function getDataAndAriaProps(props: object): {};\\n","rc-table/lib/utils/valueUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { Key, DataIndex } from \'../interface\';\\nexport declare function getPathValue<ValueType, ObjectType extends object>(record: ObjectType, path: DataIndex): ValueType;\\ninterface GetColumnKeyColumn {\\n    key?: Key;\\n    dataIndex?: DataIndex;\\n}\\nexport declare function getColumnsKey(columns: readonly GetColumnKeyColumn[]): import(\\"react\\").Key[];\\nexport declare function mergeObject<ReturnObject extends object>(...objects: Partial<ReturnObject>[]): ReturnObject;\\nexport declare function validateValue<T>(val: T): boolean;\\nexport {};\\n"}}')},574:function(e){e.exports=JSON.parse('{"version":"4.12.0","types":{"antd/affix/index.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport interface AffixProps {\\n    /** \u8ddd\u79bb\u7a97\u53e3\u9876\u90e8\u8fbe\u5230\u6307\u5b9a\u504f\u79fb\u91cf\u540e\u89e6\u53d1 */\\n    offsetTop?: number;\\n    /** \u8ddd\u79bb\u7a97\u53e3\u5e95\u90e8\u8fbe\u5230\u6307\u5b9a\u504f\u79fb\u91cf\u540e\u89e6\u53d1 */\\n    offsetBottom?: number;\\n    style?: React.CSSProperties;\\n    /** \u56fa\u5b9a\u72b6\u6001\u6539\u53d8\u65f6\u89e6\u53d1\u7684\u56de\u8c03\u51fd\u6570 */\\n    onChange?: (affixed?: boolean) => void;\\n    /** \u8bbe\u7f6e Affix \u9700\u8981\u76d1\u542c\u5176\u6eda\u52a8\u4e8b\u4ef6\u7684\u5143\u7d20\uff0c\u503c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u5bf9\u5e94 DOM \u5143\u7d20\u7684\u51fd\u6570 */\\n    target?: () => Window | HTMLElement | null;\\n    prefixCls?: string;\\n    className?: string;\\n    children: React.ReactNode;\\n}\\ndeclare enum AffixStatus {\\n    None = 0,\\n    Prepare = 1\\n}\\nexport interface AffixState {\\n    affixStyle?: React.CSSProperties;\\n    placeholderStyle?: React.CSSProperties;\\n    status: AffixStatus;\\n    lastAffix: boolean;\\n    prevTarget: Window | HTMLElement | null;\\n}\\ndeclare class Affix extends React.Component<AffixProps, AffixState> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    state: AffixState;\\n    placeholderNode: HTMLDivElement;\\n    fixedNode: HTMLDivElement;\\n    private timeout;\\n    context: ConfigConsumerProps;\\n    private getTargetFunc;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: AffixProps): void;\\n    componentWillUnmount(): void;\\n    getOffsetTop: () => number | undefined;\\n    getOffsetBottom: () => number | undefined;\\n    savePlaceholderNode: (node: HTMLDivElement) => void;\\n    saveFixedNode: (node: HTMLDivElement) => void;\\n    measure: () => void;\\n    prepareMeasure: () => void;\\n    updatePosition(): void;\\n    lazyUpdatePosition(): void;\\n    render: () => JSX.Element;\\n}\\nexport default Affix;\\n","antd/affix/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/affix/utils.d.ts":"import Affix from \'.\';\\nexport declare type BindElement = HTMLElement | Window | null | undefined;\\nexport declare type Rect = ClientRect | DOMRect;\\nexport declare function getTargetRect(target: BindElement): ClientRect;\\nexport declare function getFixedTop(placeholderReact: Rect, targetRect: Rect, offsetTop: number | undefined): number | undefined;\\nexport declare function getFixedBottom(placeholderReact: Rect, targetRect: Rect, offsetBottom: number | undefined): number | undefined;\\ninterface ObserverEntity {\\n    target: HTMLElement | Window;\\n    affixList: Affix[];\\n    eventHandlers: {\\n        [eventName: string]: any;\\n    };\\n}\\nexport declare function getObserverEntities(): ObserverEntity[];\\nexport declare function addObserveTarget(target: HTMLElement | Window | null, affix: Affix): void;\\nexport declare function removeObserveTarget(affix: Affix): void;\\nexport {};\\n","antd/alert/ErrorBoundary.d.ts":"import * as React from \'react\';\\ninterface ErrorBoundaryProps {\\n    message?: React.ReactNode;\\n    description?: React.ReactNode;\\n}\\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, {\\n    error?: Error | null;\\n    info: {\\n        componentStack?: string;\\n    };\\n}> {\\n    state: {\\n        error: undefined;\\n        info: {\\n            componentStack: string;\\n        };\\n    };\\n    componentDidCatch(error: Error | null, info: object): void;\\n    render(): {} | null | undefined;\\n}\\nexport {};\\n","antd/alert/index.d.ts":"import * as React from \'react\';\\nimport ErrorBoundary from \'./ErrorBoundary\';\\nexport interface AlertProps {\\n    /** Type of Alert styles, options:`success`, `info`, `warning`, `error` */\\n    type?: \'success\' | \'info\' | \'warning\' | \'error\';\\n    /** Whether Alert can be closed */\\n    closable?: boolean;\\n    /** Close text to show */\\n    closeText?: React.ReactNode;\\n    /** Content of Alert */\\n    message: React.ReactNode;\\n    /** Additional content of Alert */\\n    description?: React.ReactNode;\\n    /** Callback when close Alert */\\n    onClose?: React.MouseEventHandler<HTMLButtonElement>;\\n    /** Trigger when animation ending of Alert */\\n    afterClose?: () => void;\\n    /** Whether to show icon */\\n    showIcon?: boolean;\\n    /** https://www.w3.org/TR/2014/REC-html5-20141028/dom.html#aria-role-attribute */\\n    role?: string;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    banner?: boolean;\\n    icon?: React.ReactNode;\\n    action?: React.ReactNode;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n    onClick?: React.MouseEventHandler<HTMLDivElement>;\\n}\\ninterface AlertInterface extends React.FC<AlertProps> {\\n    ErrorBoundary: typeof ErrorBoundary;\\n}\\ndeclare const Alert: AlertInterface;\\nexport default Alert;\\n","antd/alert/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/anchor/Anchor.d.ts":"import * as React from \'react\';\\nimport AnchorLink from \'./AnchorLink\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport declare type AnchorContainer = HTMLElement | Window;\\nexport interface AnchorProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    offsetTop?: number;\\n    bounds?: number;\\n    affix?: boolean;\\n    showInkInFixed?: boolean;\\n    getContainer?: () => AnchorContainer;\\n    /** Return customize highlight anchor */\\n    getCurrentAnchor?: () => string;\\n    onClick?: (e: React.MouseEvent<HTMLElement>, link: {\\n        title: React.ReactNode;\\n        href: string;\\n    }) => void;\\n    /** Scroll to target offset value, if none, it\'s offsetTop prop value or 0. */\\n    targetOffset?: number;\\n    /** Listening event when scrolling change active link */\\n    onChange?: (currentActiveLink: string) => void;\\n}\\nexport interface AnchorState {\\n    activeLink: null | string;\\n}\\nexport interface AnchorDefaultProps extends AnchorProps {\\n    prefixCls: string;\\n    affix: boolean;\\n    showInkInFixed: boolean;\\n    getContainer: () => AnchorContainer;\\n}\\nexport interface AntAnchor {\\n    registerLink: (link: string) => void;\\n    unregisterLink: (link: string) => void;\\n    activeLink: string | null;\\n    scrollTo: (link: string) => void;\\n    onClick?: (e: React.MouseEvent<HTMLElement>, link: {\\n        title: React.ReactNode;\\n        href: string;\\n    }) => void;\\n}\\nexport default class Anchor extends React.Component<AnchorProps, AnchorState, ConfigConsumerProps> {\\n    static Link: typeof AnchorLink;\\n    static defaultProps: {\\n        affix: boolean;\\n        showInkInFixed: boolean;\\n    };\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    state: {\\n        activeLink: null;\\n    };\\n    content: ConfigConsumerProps;\\n    private wrapperRef;\\n    private inkNode;\\n    private scrollContainer;\\n    private links;\\n    private scrollEvent;\\n    private animating;\\n    private prefixCls?;\\n    registerLink: (link: string) => void;\\n    unregisterLink: (link: string) => void;\\n    getContainer: () => any;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    getCurrentAnchor(offsetTop?: number, bounds?: number): string;\\n    handleScrollTo: (link: string) => void;\\n    saveInkNode: (node: HTMLSpanElement) => void;\\n    setCurrentActiveLink: (link: string) => void;\\n    handleScroll: () => void;\\n    updateInk: () => void;\\n    render: () => JSX.Element;\\n}\\n","antd/anchor/AnchorLink.d.ts":"import * as React from \'react\';\\nimport { AntAnchor } from \'./Anchor\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport interface AnchorLinkProps {\\n    prefixCls?: string;\\n    href: string;\\n    target?: string;\\n    title: React.ReactNode;\\n    children?: React.ReactNode;\\n    className?: string;\\n}\\ndeclare class AnchorLink extends React.Component<AnchorLinkProps, any, AntAnchor> {\\n    static defaultProps: {\\n        href: string;\\n    };\\n    static contextType: React.Context<AntAnchor>;\\n    context: AntAnchor;\\n    componentDidMount(): void;\\n    componentDidUpdate({ href: prevHref }: AnchorLinkProps): void;\\n    componentWillUnmount(): void;\\n    handleClick: (e: React.MouseEvent<HTMLElement>) => void;\\n    renderAnchorLink: ({ getPrefixCls }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default AnchorLink;\\n","antd/anchor/context.d.ts":"import * as React from \'react\';\\nimport { AntAnchor } from \'./Anchor\';\\ndeclare const AnchorContext: React.Context<AntAnchor>;\\nexport default AnchorContext;\\n","antd/anchor/index.d.ts":"import Anchor from \'./Anchor\';\\nexport { AnchorProps } from \'./Anchor\';\\nexport { AnchorLinkProps } from \'./AnchorLink\';\\nexport default Anchor;\\n","antd/anchor/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../affix/style\';\\n","antd/auto-complete/index.d.ts":"/**\\n * TODO: 4.0\\n *\\n * - Remove `dataSource`\\n * - `size` not work with customizeInput\\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\\n */\\nimport * as React from \'react\';\\nimport { InternalSelectProps, OptionType, RefSelectProps } from \'../select\';\\nexport interface DataSourceItemObject {\\n    value: string;\\n    text: string;\\n}\\nexport declare type DataSourceItemType = DataSourceItemObject | React.ReactNode;\\nexport interface AutoCompleteProps extends Omit<InternalSelectProps<string>, \'inputIcon\' | \'loading\' | \'mode\' | \'optionLabelProp\' | \'labelInValue\'> {\\n    dataSource?: DataSourceItemType[];\\n}\\ndeclare const RefAutoComplete: React.ForwardRefExoticComponent<AutoCompleteProps & React.RefAttributes<RefSelectProps>>;\\ndeclare type RefAutoCompleteWithOption = typeof RefAutoComplete & {\\n    Option: OptionType;\\n};\\ndeclare const _default: RefAutoCompleteWithOption;\\nexport default _default;\\n","antd/auto-complete/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\n","antd/avatar/avatar.d.ts":"import * as React from \'react\';\\nimport { AvatarSize } from \'./SizeContext\';\\nexport interface AvatarProps {\\n    /** Shape of avatar, options:`circle`, `square` */\\n    shape?: \'circle\' | \'square\';\\n    size?: AvatarSize;\\n    gap?: number;\\n    /** Src of image avatar */\\n    src?: React.ReactNode;\\n    /** Srcset of image avatar */\\n    srcSet?: string;\\n    draggable?: boolean;\\n    /** Icon to be used in avatar */\\n    icon?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    children?: React.ReactNode;\\n    alt?: string;\\n    onError?: () => boolean;\\n}\\ndeclare const Avatar: React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<unknown>>;\\nexport default Avatar;\\n","antd/avatar/group.d.ts":"import * as React from \'react\';\\nimport { AvatarSize } from \'./SizeContext\';\\nexport interface GroupProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    maxCount?: number;\\n    maxStyle?: React.CSSProperties;\\n    maxPopoverPlacement?: \'top\' | \'bottom\';\\n    size?: AvatarSize;\\n}\\ndeclare const Group: React.FC<GroupProps>;\\nexport default Group;\\n","antd/avatar/index.d.ts":"import * as React from \'react\';\\nimport { AvatarProps } from \'./avatar\';\\nimport Group from \'./group\';\\nexport { AvatarProps } from \'./avatar\';\\nexport { GroupProps } from \'./group\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<AvatarProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n}\\ndeclare const Avatar: CompoundedComponent;\\nexport { Group };\\nexport default Avatar;\\n","antd/avatar/SizeContext.d.ts":"import * as React from \'react\';\\nimport { ScreenSizeMap } from \'../_util/responsiveObserve\';\\nexport declare type AvatarSize = \'large\' | \'small\' | \'default\' | number | ScreenSizeMap;\\ndeclare const SizeContext: React.Context<AvatarSize>;\\nexport interface SizeContextProps {\\n    size?: AvatarSize;\\n}\\nexport declare const SizeContextProvider: React.FC<SizeContextProps>;\\nexport default SizeContext;\\n","antd/avatar/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../popover/style\';\\n","antd/back-top/index.d.ts":"import * as React from \'react\';\\nexport interface BackTopProps {\\n    visibilityHeight?: number;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    target?: () => HTMLElement | Window | Document;\\n    prefixCls?: string;\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    duration?: number;\\n    visible?: boolean;\\n}\\ndeclare const _default: React.NamedExoticComponent<BackTopProps>;\\nexport default _default;\\n","antd/back-top/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/badge/index.d.ts":"import * as React from \'react\';\\nimport Ribbon from \'./Ribbon\';\\nimport { PresetColorType, PresetStatusColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { ScrollNumberProps } from \'./ScrollNumber\';\\ninterface CompoundedComponent extends React.FC<BadgeProps> {\\n    Ribbon: typeof Ribbon;\\n}\\nexport interface BadgeProps {\\n    /** Number to show in badge */\\n    count?: React.ReactNode;\\n    showZero?: boolean;\\n    /** Max count to show */\\n    overflowCount?: number;\\n    /** Whether to show red dot without number */\\n    dot?: boolean;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    scrollNumberPrefixCls?: string;\\n    className?: string;\\n    status?: PresetStatusColorType;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    text?: React.ReactNode;\\n    size?: \'default\' | \'small\';\\n    offset?: [number | string, number | string];\\n    title?: string;\\n}\\ndeclare const Badge: CompoundedComponent;\\nexport default Badge;\\n","antd/badge/Ribbon.d.ts":"import * as React from \'react\';\\nimport { LiteralUnion } from \'../_util/type\';\\nimport { PresetColorType } from \'../_util/colors\';\\ndeclare type RibbonPlacement = \'start\' | \'end\';\\nexport interface RibbonProps {\\n    className?: string;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    text?: React.ReactNode;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    children?: React.ReactNode;\\n    placement?: RibbonPlacement;\\n}\\ndeclare const Ribbon: React.FC<RibbonProps>;\\nexport default Ribbon;\\n","antd/badge/ScrollNumber.d.ts":"import * as React from \'react\';\\nexport interface ScrollNumberProps {\\n    prefixCls?: string;\\n    className?: string;\\n    motionClassName?: string;\\n    count?: string | number | null;\\n    children?: React.ReactElement<HTMLElement>;\\n    component?: string;\\n    style?: React.CSSProperties;\\n    title?: string | number | null;\\n    show: boolean;\\n}\\nexport interface ScrollNumberState {\\n    animateStarted?: boolean;\\n    count?: string | number | null;\\n}\\ndeclare const ScrollNumber: React.FC<ScrollNumberProps>;\\nexport default ScrollNumber;\\n","antd/badge/SingleNumber.d.ts":"/// <reference types=\\"react\\" />\\nexport interface UnitNumberProps {\\n    prefixCls: string;\\n    value: string | number;\\n    offset?: number;\\n    current?: boolean;\\n}\\nexport interface SingleNumberProps {\\n    prefixCls: string;\\n    value: string;\\n    count: number;\\n}\\nexport default function SingleNumber(props: SingleNumberProps): JSX.Element;\\n","antd/badge/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/badge/utils.d.ts":"export declare function isPresetColor(color?: string): boolean;\\n","antd/breadcrumb/Breadcrumb.d.ts":"import * as React from \'react\';\\nimport BreadcrumbItem from \'./BreadcrumbItem\';\\nimport BreadcrumbSeparator from \'./BreadcrumbSeparator\';\\nimport { Omit } from \'../_util/type\';\\nexport interface Route {\\n    path: string;\\n    breadcrumbName: string;\\n    children?: Omit<Route, \'children\'>[];\\n}\\nexport interface BreadcrumbProps {\\n    prefixCls?: string;\\n    routes?: Route[];\\n    params?: any;\\n    separator?: React.ReactNode;\\n    itemRender?: (route: Route, params: any, routes: Array<Route>, paths: Array<string>) => React.ReactNode;\\n    style?: React.CSSProperties;\\n    className?: string;\\n}\\ninterface BreadcrumbInterface extends React.FC<BreadcrumbProps> {\\n    Item: typeof BreadcrumbItem;\\n    Separator: typeof BreadcrumbSeparator;\\n}\\ndeclare const Breadcrumb: BreadcrumbInterface;\\nexport default Breadcrumb;\\n","antd/breadcrumb/BreadcrumbItem.d.ts":"import * as React from \'react\';\\nimport { DropDownProps } from \'../dropdown/dropdown\';\\nexport interface BreadcrumbItemProps {\\n    prefixCls?: string;\\n    separator?: React.ReactNode;\\n    href?: string;\\n    overlay?: DropDownProps[\'overlay\'];\\n    dropdownProps?: DropDownProps;\\n    onClick?: React.MouseEventHandler<HTMLAnchorElement | HTMLSpanElement>;\\n    className?: string;\\n}\\ninterface BreadcrumbItemInterface extends React.FC<BreadcrumbItemProps> {\\n    __ANT_BREADCRUMB_ITEM: boolean;\\n}\\ndeclare const BreadcrumbItem: BreadcrumbItemInterface;\\nexport default BreadcrumbItem;\\n","antd/breadcrumb/BreadcrumbSeparator.d.ts":"import * as React from \'react\';\\ninterface BreadcrumbSeparatorInterface extends React.FC {\\n    __ANT_BREADCRUMB_SEPARATOR: boolean;\\n}\\ndeclare const BreadcrumbSeparator: BreadcrumbSeparatorInterface;\\nexport default BreadcrumbSeparator;\\n","antd/breadcrumb/index.d.ts":"import Breadcrumb from \'./Breadcrumb\';\\nexport { BreadcrumbProps } from \'./Breadcrumb\';\\nexport { BreadcrumbItemProps } from \'./BreadcrumbItem\';\\nexport default Breadcrumb;\\n","antd/breadcrumb/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../menu/style\';\\nimport \'../../dropdown/style\';\\n","antd/button/button-group.d.ts":"import * as React from \'react\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface ButtonGroupProps {\\n    size?: SizeType;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    prefixCls?: string;\\n}\\ndeclare const ButtonGroup: React.FC<ButtonGroupProps>;\\nexport default ButtonGroup;\\n","antd/button/button.d.ts":"import * as React from \'react\';\\nimport Group from \'./button-group\';\\nimport { Omit } from \'../_util/type\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare const ButtonTypes: [\\"default\\", \\"primary\\", \\"ghost\\", \\"dashed\\", \\"link\\", \\"text\\"];\\nexport declare type ButtonType = typeof ButtonTypes[number];\\ndeclare const ButtonShapes: [\\"circle\\", \\"round\\"];\\nexport declare type ButtonShape = typeof ButtonShapes[number];\\ndeclare const ButtonHTMLTypes: [\\"submit\\", \\"button\\", \\"reset\\"];\\nexport declare type ButtonHTMLType = typeof ButtonHTMLTypes[number];\\nexport declare type LegacyButtonType = ButtonType | \'danger\';\\nexport declare function convertLegacyProps(type?: LegacyButtonType): ButtonProps;\\nexport interface BaseButtonProps {\\n    type?: ButtonType;\\n    icon?: React.ReactNode;\\n    shape?: ButtonShape;\\n    size?: SizeType;\\n    loading?: boolean | {\\n        delay?: number;\\n    };\\n    prefixCls?: string;\\n    className?: string;\\n    ghost?: boolean;\\n    danger?: boolean;\\n    block?: boolean;\\n    children?: React.ReactNode;\\n}\\nexport declare type AnchorButtonProps = {\\n    href: string;\\n    target?: string;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n} & BaseButtonProps & Omit<React.AnchorHTMLAttributes<any>, \'type\' | \'onClick\'>;\\nexport declare type NativeButtonProps = {\\n    htmlType?: ButtonHTMLType;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n} & BaseButtonProps & Omit<React.ButtonHTMLAttributes<any>, \'type\' | \'onClick\'>;\\nexport declare type ButtonProps = Partial<AnchorButtonProps & NativeButtonProps>;\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<ButtonProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n    __ANT_BUTTON: boolean;\\n}\\ndeclare const Button: CompoundedComponent;\\nexport default Button;\\n","antd/button/index.d.ts":"import Button from \'./button\';\\nexport { ButtonProps, ButtonShape, ButtonType } from \'./button\';\\nexport { ButtonGroupProps } from \'./button-group\';\\nexport { SizeType as ButtonSize } from \'../config-provider/SizeContext\';\\nexport default Button;\\n","antd/button/LoadingIcon.d.ts":"import React from \'react\';\\nexport interface LoadingIconProps {\\n    prefixCls: string;\\n    existIcon: boolean;\\n    loading?: boolean | object;\\n}\\ndeclare const LoadingIcon: React.FC<LoadingIconProps>;\\nexport default LoadingIcon;\\n","antd/button/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/calendar/generateCalendar.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate\';\\nimport { PickerPanelBaseProps as RCPickerPanelBaseProps, PickerPanelDateProps as RCPickerPanelDateProps, PickerPanelTimeProps as RCPickerPanelTimeProps } from \'rc-picker/lib/PickerPanel\';\\nimport enUS from \'./locale/en_US\';\\ndeclare type InjectDefaultProps<Props> = Omit<Props, \'locale\' | \'generateConfig\' | \'prevIcon\' | \'nextIcon\' | \'superPrevIcon\' | \'superNextIcon\'> & {\\n    locale?: typeof enUS;\\n    size?: \'large\' | \'default\' | \'small\';\\n};\\nexport declare type PickerPanelBaseProps<DateType> = InjectDefaultProps<RCPickerPanelBaseProps<DateType>>;\\nexport declare type PickerPanelDateProps<DateType> = InjectDefaultProps<RCPickerPanelDateProps<DateType>>;\\nexport declare type PickerPanelTimeProps<DateType> = InjectDefaultProps<RCPickerPanelTimeProps<DateType>>;\\nexport declare type PickerProps<DateType> = PickerPanelBaseProps<DateType> | PickerPanelDateProps<DateType> | PickerPanelTimeProps<DateType>;\\nexport declare type CalendarMode = \'year\' | \'month\';\\nexport declare type HeaderRender<DateType> = (config: {\\n    value: DateType;\\n    type: CalendarMode;\\n    onChange: (date: DateType) => void;\\n    onTypeChange: (type: CalendarMode) => void;\\n}) => React.ReactNode;\\nexport interface CalendarProps<DateType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    locale?: typeof enUS;\\n    validRange?: [DateType, DateType];\\n    disabledDate?: (date: DateType) => boolean;\\n    dateFullCellRender?: (date: DateType) => React.ReactNode;\\n    dateCellRender?: (date: DateType) => React.ReactNode;\\n    monthFullCellRender?: (date: DateType) => React.ReactNode;\\n    monthCellRender?: (date: DateType) => React.ReactNode;\\n    headerRender?: HeaderRender<DateType>;\\n    value?: DateType;\\n    defaultValue?: DateType;\\n    mode?: CalendarMode;\\n    fullscreen?: boolean;\\n    onChange?: (date: DateType) => void;\\n    onPanelChange?: (date: DateType, mode: CalendarMode) => void;\\n    onSelect?: (date: DateType) => void;\\n}\\ndeclare function generateCalendar<DateType>(generateConfig: GenerateConfig<DateType>): (props: CalendarProps<DateType>) => JSX.Element;\\nexport default generateCalendar;\\n","antd/calendar/Header.d.ts":"/// <reference types=\\"react\\" />\\nimport { GenerateConfig } from \'rc-picker/lib/generate\';\\nimport { Locale } from \'rc-picker/lib/interface\';\\nimport { CalendarMode } from \'./generateCalendar\';\\nexport interface CalendarHeaderProps<DateType> {\\n    prefixCls: string;\\n    value: DateType;\\n    validRange?: [DateType, DateType];\\n    generateConfig: GenerateConfig<DateType>;\\n    locale: Locale;\\n    mode: CalendarMode;\\n    fullscreen: boolean;\\n    onChange: (date: DateType) => void;\\n    onModeChange: (mode: CalendarMode) => void;\\n}\\ndeclare function CalendarHeader<DateType>(props: CalendarHeaderProps<DateType>): JSX.Element;\\nexport default CalendarHeader;\\n","antd/calendar/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { Moment } from \'moment\';\\nimport { CalendarProps } from \'./generateCalendar\';\\ndeclare const Calendar: (props: CalendarProps<Moment>) => JSX.Element;\\nexport { CalendarProps };\\nexport default Calendar;\\n","antd/calendar/locale/ar_EG.d.ts":"import arEG from \'../../date-picker/locale/ar_EG\';\\nexport default arEG;\\n","antd/calendar/locale/az_AZ.d.ts":"import azAZ from \'../../date-picker/locale/az_AZ\';\\nexport default azAZ;\\n","antd/calendar/locale/bg_BG.d.ts":"import bgBG from \'../../date-picker/locale/bg_BG\';\\nexport default bgBG;\\n","antd/calendar/locale/by_BY.d.ts":"import byBY from \'../../date-picker/locale/by_BY\';\\nexport default byBY;\\n","antd/calendar/locale/ca_ES.d.ts":"import caES from \'../../date-picker/locale/ca_ES\';\\nexport default caES;\\n","antd/calendar/locale/cs_CZ.d.ts":"import csCZ from \'../../date-picker/locale/cs_CZ\';\\nexport default csCZ;\\n","antd/calendar/locale/da_DK.d.ts":"import daDK from \'../../date-picker/locale/da_DK\';\\nexport default daDK;\\n","antd/calendar/locale/de_DE.d.ts":"import deDE from \'../../date-picker/locale/de_DE\';\\nexport default deDE;\\n","antd/calendar/locale/el_GR.d.ts":"import elGR from \'../../date-picker/locale/el_GR\';\\nexport default elGR;\\n","antd/calendar/locale/en_GB.d.ts":"import enGB from \'../../date-picker/locale/en_GB\';\\nexport default enGB;\\n","antd/calendar/locale/en_US.d.ts":"import enUS from \'../../date-picker/locale/en_US\';\\nexport default enUS;\\n","antd/calendar/locale/es_ES.d.ts":"import esES from \'../../date-picker/locale/es_ES\';\\nexport default esES;\\n","antd/calendar/locale/et_EE.d.ts":"import etEE from \'../../date-picker/locale/et_EE\';\\nexport default etEE;\\n","antd/calendar/locale/fa_IR.d.ts":"import faIR from \'../../date-picker/locale/fa_IR\';\\nexport default faIR;\\n","antd/calendar/locale/fi_FI.d.ts":"import fiFI from \'../../date-picker/locale/fi_FI\';\\nexport default fiFI;\\n","antd/calendar/locale/fr_BE.d.ts":"import frBE from \'../../date-picker/locale/fr_BE\';\\nexport default frBE;\\n","antd/calendar/locale/fr_FR.d.ts":"import frFR from \'../../date-picker/locale/fr_FR\';\\nexport default frFR;\\n","antd/calendar/locale/ga_IE.d.ts":"import gaIE from \'../../date-picker/locale/ga_IE\';\\nexport default gaIE;\\n","antd/calendar/locale/gl_ES.d.ts":"import glES from \'../../date-picker/locale/gl_ES\';\\nexport default glES;\\n","antd/calendar/locale/he_IL.d.ts":"import heIL from \'../../date-picker/locale/he_IL\';\\nexport default heIL;\\n","antd/calendar/locale/hi_IN.d.ts":"import hiIN from \'../../date-picker/locale/hi_IN\';\\nexport default hiIN;\\n","antd/calendar/locale/hr_HR.d.ts":"import hrHR from \'../../date-picker/locale/hr_HR\';\\nexport default hrHR;\\n","antd/calendar/locale/hu_HU.d.ts":"import huHU from \'../../date-picker/locale/hu_HU\';\\nexport default huHU;\\n","antd/calendar/locale/id_ID.d.ts":"import idID from \'../../date-picker/locale/id_ID\';\\nexport default idID;\\n","antd/calendar/locale/is_IS.d.ts":"import isIS from \'../../date-picker/locale/is_IS\';\\nexport default isIS;\\n","antd/calendar/locale/it_IT.d.ts":"import itIT from \'../../date-picker/locale/it_IT\';\\nexport default itIT;\\n","antd/calendar/locale/ja_JP.d.ts":"import jaJP from \'../../date-picker/locale/ja_JP\';\\nexport default jaJP;\\n","antd/calendar/locale/kk_KZ.d.ts":"import kkKZ from \'../../date-picker/locale/kk_KZ\';\\nexport default kkKZ;\\n","antd/calendar/locale/kmr_IQ.d.ts":"import kmrIQ from \'../../date-picker/locale/kmr_IQ\';\\nexport default kmrIQ;\\n","antd/calendar/locale/kn_IN.d.ts":"import knIN from \'../../date-picker/locale/kn_IN\';\\nexport default knIN;\\n","antd/calendar/locale/ko_KR.d.ts":"import koKR from \'../../date-picker/locale/ko_KR\';\\nexport default koKR;\\n","antd/calendar/locale/lt_LT.d.ts":"import ltLT from \'../../date-picker/locale/lt_LT\';\\nexport default ltLT;\\n","antd/calendar/locale/lv_LV.d.ts":"import lvLV from \'../../date-picker/locale/lv_LV\';\\nexport default lvLV;\\n","antd/calendar/locale/mk_MK.d.ts":"import mkMK from \'../../date-picker/locale/mk_MK\';\\nexport default mkMK;\\n","antd/calendar/locale/mn_MN.d.ts":"import mnMN from \'../../date-picker/locale/mn_MN\';\\nexport default mnMN;\\n","antd/calendar/locale/ms_MY.d.ts":"import msMY from \'../../date-picker/locale/ms_MY\';\\nexport default msMY;\\n","antd/calendar/locale/nb_NO.d.ts":"import nbNO from \'../../date-picker/locale/nb_NO\';\\nexport default nbNO;\\n","antd/calendar/locale/nl_BE.d.ts":"import nlBE from \'../../date-picker/locale/nl_BE\';\\nexport default nlBE;\\n","antd/calendar/locale/nl_NL.d.ts":"import nlNL from \'../../date-picker/locale/nl_NL\';\\nexport default nlNL;\\n","antd/calendar/locale/pl_PL.d.ts":"import plPL from \'../../date-picker/locale/pl_PL\';\\nexport default plPL;\\n","antd/calendar/locale/pt_BR.d.ts":"import ptBR from \'../../date-picker/locale/pt_BR\';\\nexport default ptBR;\\n","antd/calendar/locale/pt_PT.d.ts":"import ptPT from \'../../date-picker/locale/pt_PT\';\\nexport default ptPT;\\n","antd/calendar/locale/ro_RO.d.ts":"import roRO from \'../../date-picker/locale/ro_RO\';\\nexport default roRO;\\n","antd/calendar/locale/ru_RU.d.ts":"import ruRU from \'../../date-picker/locale/ru_RU\';\\nexport default ruRU;\\n","antd/calendar/locale/sk_SK.d.ts":"import skSK from \'../../date-picker/locale/sk_SK\';\\nexport default skSK;\\n","antd/calendar/locale/sl_SI.d.ts":"import slSI from \'../../date-picker/locale/sl_SI\';\\nexport default slSI;\\n","antd/calendar/locale/sr_RS.d.ts":"import srRS from \'../../date-picker/locale/sr_RS\';\\nexport default srRS;\\n","antd/calendar/locale/sv_SE.d.ts":"import svSE from \'../../date-picker/locale/sv_SE\';\\nexport default svSE;\\n","antd/calendar/locale/ta_IN.d.ts":"import taIN from \'../../date-picker/locale/ta_IN\';\\nexport default taIN;\\n","antd/calendar/locale/th_TH.d.ts":"import thTH from \'../../date-picker/locale/th_TH\';\\nexport default thTH;\\n","antd/calendar/locale/tr_TR.d.ts":"import trTR from \'../../date-picker/locale/tr_TR\';\\nexport default trTR;\\n","antd/calendar/locale/uk_UA.d.ts":"import ukUA from \'../../date-picker/locale/uk_UA\';\\nexport default ukUA;\\n","antd/calendar/locale/vi_VN.d.ts":"import viVN from \'../../date-picker/locale/vi_VN\';\\nexport default viVN;\\n","antd/calendar/locale/zh_CN.d.ts":"import zhCN from \'../../date-picker/locale/zh_CN\';\\nexport default zhCN;\\n","antd/calendar/locale/zh_TW.d.ts":"import zhTW from \'../../date-picker/locale/zh_TW\';\\nexport default zhTW;\\n","antd/calendar/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\nimport \'../../radio/style\';\\nimport \'../../date-picker/style\';\\n","antd/card/Grid.d.ts":"import * as React from \'react\';\\nexport interface CardGridProps {\\n    prefixCls?: string;\\n    className?: string;\\n    hoverable?: boolean;\\n    style?: React.CSSProperties;\\n}\\ndeclare const Grid: React.FC<CardGridProps>;\\nexport default Grid;\\n","antd/card/index.d.ts":"import * as React from \'react\';\\nimport Grid from \'./Grid\';\\nimport Meta from \'./Meta\';\\nimport { TabsProps } from \'../tabs\';\\nimport { Omit } from \'../_util/type\';\\nexport { CardGridProps } from \'./Grid\';\\nexport { CardMetaProps } from \'./Meta\';\\nexport declare type CardType = \'inner\';\\nexport declare type CardSize = \'default\' | \'small\';\\nexport interface CardTabListType {\\n    key: string;\\n    tab: React.ReactNode;\\n    disabled?: boolean;\\n}\\nexport interface CardProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \'title\'> {\\n    prefixCls?: string;\\n    title?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    bordered?: boolean;\\n    headStyle?: React.CSSProperties;\\n    bodyStyle?: React.CSSProperties;\\n    style?: React.CSSProperties;\\n    loading?: boolean;\\n    hoverable?: boolean;\\n    children?: React.ReactNode;\\n    id?: string;\\n    className?: string;\\n    size?: CardSize;\\n    type?: CardType;\\n    cover?: React.ReactNode;\\n    actions?: React.ReactNode[];\\n    tabList?: CardTabListType[];\\n    tabBarExtraContent?: React.ReactNode | null;\\n    onTabChange?: (key: string) => void;\\n    activeTabKey?: string;\\n    defaultActiveTabKey?: string;\\n    tabProps?: TabsProps;\\n}\\nexport interface CardInterface extends React.FC<CardProps> {\\n    Grid: typeof Grid;\\n    Meta: typeof Meta;\\n}\\ndeclare const Card: CardInterface;\\nexport default Card;\\n","antd/card/Meta.d.ts":"import * as React from \'react\';\\nexport interface CardMetaProps {\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    avatar?: React.ReactNode;\\n    title?: React.ReactNode;\\n    description?: React.ReactNode;\\n}\\ndeclare const Meta: React.FC<CardMetaProps>;\\nexport default Meta;\\n","antd/card/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tabs/style\';\\nimport \'../../row/style\';\\nimport \'../../col/style\';\\n","antd/carousel/index.d.ts":"import * as React from \'react\';\\nimport { Settings } from \'@ant-design/react-slick\';\\nexport declare type CarouselEffect = \'scrollx\' | \'fade\';\\nexport declare type DotPosition = \'top\' | \'bottom\' | \'left\' | \'right\';\\nexport interface CarouselProps extends Omit<Settings, \'dots\' | \'dotsClass\'> {\\n    effect?: CarouselEffect;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    slickGoTo?: number;\\n    dotPosition?: DotPosition;\\n    children?: React.ReactNode;\\n    dots?: boolean | {\\n        className?: string;\\n    };\\n}\\nexport interface CarouselRef {\\n    goTo: (slide: number, dontAnimate?: boolean) => void;\\n    next: () => void;\\n    prev: () => void;\\n    autoPlay: boolean;\\n    innerSlider: any;\\n}\\ndeclare const Carousel: React.ForwardRefExoticComponent<CarouselProps & React.RefAttributes<CarouselRef>>;\\nexport default Carousel;\\n","antd/carousel/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/cascader/index.d.ts":"import * as React from \'react\';\\nimport Input from \'../input\';\\nimport { ConfigConsumerProps, RenderEmptyHandler, DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface CascaderOptionType {\\n    value?: string | number;\\n    label?: React.ReactNode;\\n    disabled?: boolean;\\n    isLeaf?: boolean;\\n    loading?: boolean;\\n    children?: Array<CascaderOptionType>;\\n    [key: string]: any;\\n}\\nexport interface FieldNamesType {\\n    value?: string | number;\\n    label?: string;\\n    children?: string;\\n}\\nexport interface FilledFieldNamesType {\\n    value: string | number;\\n    label: string;\\n    children: string;\\n}\\nexport declare type CascaderExpandTrigger = \'click\' | \'hover\';\\nexport declare type CascaderValueType = (string | number)[];\\nexport interface ShowSearchType {\\n    filter?: (inputValue: string, path: CascaderOptionType[], names: FilledFieldNamesType) => boolean;\\n    render?: (inputValue: string, path: CascaderOptionType[], prefixCls: string | undefined, names: FilledFieldNamesType) => React.ReactNode;\\n    sort?: (a: CascaderOptionType[], b: CascaderOptionType[], inputValue: string, names: FilledFieldNamesType) => number;\\n    matchInputWidth?: boolean;\\n    limit?: number | false;\\n}\\nexport interface CascaderProps {\\n    /** \u53ef\u9009\u9879\u6570\u636e\u6e90 */\\n    options: CascaderOptionType[];\\n    /** \u9ed8\u8ba4\u7684\u9009\u4e2d\u9879 */\\n    defaultValue?: CascaderValueType;\\n    /** \u6307\u5b9a\u9009\u4e2d\u9879 */\\n    value?: CascaderValueType;\\n    /** \u9009\u62e9\u5b8c\u6210\u540e\u7684\u56de\u8c03 */\\n    onChange?: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;\\n    /** \u9009\u62e9\u540e\u5c55\u793a\u7684\u6e32\u67d3\u51fd\u6570 */\\n    displayRender?: (label: string[], selectedOptions?: CascaderOptionType[]) => React.ReactNode;\\n    /** \u81ea\u5b9a\u4e49\u6837\u5f0f */\\n    style?: React.CSSProperties;\\n    /** \u81ea\u5b9a\u4e49\u7c7b\u540d */\\n    className?: string;\\n    /** \u81ea\u5b9a\u4e49\u6d6e\u5c42\u7c7b\u540d */\\n    popupClassName?: string;\\n    /** \u6d6e\u5c42\u9884\u8bbe\u4f4d\u7f6e\uff1a`bottomLeft` `bottomRight` `topLeft` `topRight` */\\n    popupPlacement?: string;\\n    /** \u8f93\u5165\u6846\u5360\u4f4d\u6587\u672c */\\n    placeholder?: string;\\n    /** \u8f93\u5165\u6846\u5927\u5c0f\uff0c\u53ef\u9009 `large` `default` `small` */\\n    size?: SizeType;\\n    /** \u8f93\u5165\u6846 name */\\n    name?: string;\\n    /** \u8f93\u5165\u6846 id */\\n    id?: string;\\n    /** Whether has border style */\\n    bordered?: boolean;\\n    /** \u7981\u7528 */\\n    disabled?: boolean;\\n    /** \u662f\u5426\u652f\u6301\u6e05\u9664 */\\n    allowClear?: boolean;\\n    /** \u81ea\u52a8\u83b7\u53d6\u7126\u70b9 */\\n    autoFocus?: boolean;\\n    showSearch?: boolean | ShowSearchType;\\n    notFoundContent?: React.ReactNode;\\n    loadData?: (selectedOptions?: CascaderOptionType[]) => void;\\n    /** \u6b21\u7ea7\u83dc\u5355\u7684\u5c55\u5f00\u65b9\u5f0f\uff0c\u53ef\u9009 \'click\' \u548c \'hover\' */\\n    expandTrigger?: CascaderExpandTrigger;\\n    expandIcon?: React.ReactNode;\\n    /** \u5f53\u6b64\u9879\u4e3a true \u65f6\uff0c\u70b9\u9009\u6bcf\u7ea7\u83dc\u5355\u9009\u9879\u503c\u90fd\u4f1a\u53d1\u751f\u53d8\u5316 */\\n    changeOnSelect?: boolean;\\n    /** \u6d6e\u5c42\u53ef\u89c1\u53d8\u5316\u65f6\u56de\u8c03 */\\n    onPopupVisibleChange?: (popupVisible: boolean) => void;\\n    prefixCls?: string;\\n    inputPrefixCls?: string;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    popupVisible?: boolean;\\n    /** Use this after antd@3.7.0 */\\n    fieldNames?: FieldNamesType;\\n    suffixIcon?: React.ReactNode;\\n    dropdownRender?: (menus: React.ReactNode) => React.ReactNode;\\n    autoComplete?: string;\\n    transitionName?: string;\\n    children?: React.ReactElement;\\n}\\nexport interface CascaderState {\\n    inputFocused: boolean;\\n    inputValue: string;\\n    value: CascaderValueType;\\n    popupVisible: boolean | undefined;\\n    flattenOptions: CascaderOptionType[][] | undefined;\\n    prevProps: CascaderProps;\\n}\\ninterface CascaderLocale {\\n    placeholder?: string;\\n}\\ndeclare class Cascader extends React.Component<CascaderProps, CascaderState> {\\n    static defaultProps: {\\n        transitionName: string;\\n        options: never[];\\n        disabled: boolean;\\n        allowClear: boolean;\\n        bordered: boolean;\\n    };\\n    static getDerivedStateFromProps(nextProps: CascaderProps, { prevProps }: CascaderState): Partial<CascaderState>;\\n    cachedOptions: CascaderOptionType[];\\n    clearSelectionTimeout: any;\\n    private input;\\n    constructor(props: CascaderProps);\\n    componentWillUnmount(): void;\\n    setValue: (value: CascaderValueType, selectedOptions?: CascaderOptionType[]) => void;\\n    getLabel(): any;\\n    saveInput: (node: Input) => void;\\n    handleChange: (value: any, selectedOptions: CascaderOptionType[]) => void;\\n    handlePopupVisibleChange: (popupVisible: boolean) => void;\\n    handleInputBlur: () => void;\\n    handleInputClick: (e: React.MouseEvent<HTMLInputElement>) => void;\\n    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\\n    handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    clearSelection: (e: React.MouseEvent<HTMLElement>) => void;\\n    generateFilteredOptions(prefixCls: string | undefined, renderEmpty: RenderEmptyHandler): CascaderOptionType[] | {\\n        [x: string]: {} | null | undefined;\\n        disabled: boolean;\\n        isEmptyNode: boolean;\\n    }[];\\n    focus(): void;\\n    blur(): void;\\n    getPopupPlacement(direction?: DirectionType): string;\\n    renderCascader: ({ getPopupContainer: getContextPopupContainer, getPrefixCls, renderEmpty, direction, }: ConfigConsumerProps, locale: CascaderLocale) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Cascader;\\n","antd/cascader/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../input/style\';\\n","antd/checkbox/Checkbox.d.ts":"import * as React from \'react\';\\nexport interface AbstractCheckboxProps<T> {\\n    prefixCls?: string;\\n    className?: string;\\n    defaultChecked?: boolean;\\n    checked?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    onChange?: (e: T) => void;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    onMouseEnter?: React.MouseEventHandler<HTMLElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLElement>;\\n    onKeyPress?: React.KeyboardEventHandler<HTMLElement>;\\n    onKeyDown?: React.KeyboardEventHandler<HTMLElement>;\\n    value?: any;\\n    tabIndex?: number;\\n    name?: string;\\n    children?: React.ReactNode;\\n    id?: string;\\n    autoFocus?: boolean;\\n    type?: string;\\n    skipGroup?: boolean;\\n}\\nexport interface CheckboxChangeEventTarget extends CheckboxProps {\\n    checked: boolean;\\n}\\nexport interface CheckboxChangeEvent {\\n    target: CheckboxChangeEventTarget;\\n    stopPropagation: () => void;\\n    preventDefault: () => void;\\n    nativeEvent: MouseEvent;\\n}\\nexport interface CheckboxProps extends AbstractCheckboxProps<CheckboxChangeEvent> {\\n    indeterminate?: boolean;\\n}\\ndeclare const Checkbox: React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<unknown>>;\\nexport default Checkbox;\\n","antd/checkbox/Group.d.ts":"import * as React from \'react\';\\nimport { CheckboxChangeEvent } from \'./Checkbox\';\\nexport declare type CheckboxValueType = string | number | boolean;\\nexport interface CheckboxOptionType {\\n    label: React.ReactNode;\\n    value: CheckboxValueType;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    onChange?: (e: CheckboxChangeEvent) => void;\\n}\\nexport interface AbstractCheckboxGroupProps {\\n    prefixCls?: string;\\n    className?: string;\\n    options?: Array<CheckboxOptionType | string>;\\n    disabled?: boolean;\\n    style?: React.CSSProperties;\\n}\\nexport interface CheckboxGroupProps extends AbstractCheckboxGroupProps {\\n    name?: string;\\n    defaultValue?: Array<CheckboxValueType>;\\n    value?: Array<CheckboxValueType>;\\n    onChange?: (checkedValue: Array<CheckboxValueType>) => void;\\n    children?: React.ReactNode;\\n}\\nexport interface CheckboxGroupContext {\\n    name?: string;\\n    toggleOption?: (option: CheckboxOptionType) => void;\\n    value?: any;\\n    disabled?: boolean;\\n    registerValue: (val: string) => void;\\n    cancelValue: (val: string) => void;\\n}\\nexport declare const GroupContext: React.Context<CheckboxGroupContext | null>;\\ndeclare const _default: React.NamedExoticComponent<CheckboxGroupProps>;\\nexport default _default;\\n","antd/checkbox/index.d.ts":"import * as React from \'react\';\\nimport { CheckboxProps } from \'./Checkbox\';\\nimport Group from \'./Group\';\\nexport { CheckboxProps, CheckboxChangeEvent } from \'./Checkbox\';\\nexport { CheckboxGroupProps, CheckboxOptionType } from \'./Group\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<CheckboxProps & React.RefAttributes<HTMLInputElement>> {\\n    Group: typeof Group;\\n    __ANT_CHECKBOX: boolean;\\n}\\ndeclare const Checkbox: CompoundedComponent;\\nexport default Checkbox;\\n","antd/checkbox/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/col/index.d.ts":"import { Col, ColProps, ColSize } from \'../grid\';\\nexport { ColProps, ColSize };\\nexport default Col;\\n","antd/col/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../grid/style\';\\n","antd/collapse/Collapse.d.ts":"import * as React from \'react\';\\nimport CollapsePanel, { CollapsibleType } from \'./CollapsePanel\';\\nexport declare type ExpandIconPosition = \'left\' | \'right\' | undefined;\\nexport interface CollapseProps {\\n    activeKey?: Array<string | number> | string | number;\\n    defaultActiveKey?: Array<string | number> | string | number;\\n    /** \u624b\u98ce\u7434\u6548\u679c */\\n    accordion?: boolean;\\n    destroyInactivePanel?: boolean;\\n    onChange?: (key: string | string[]) => void;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    bordered?: boolean;\\n    prefixCls?: string;\\n    expandIcon?: (panelProps: PanelProps) => React.ReactNode;\\n    expandIconPosition?: ExpandIconPosition;\\n    ghost?: boolean;\\n    collapsible?: CollapsibleType;\\n}\\ninterface PanelProps {\\n    isActive?: boolean;\\n    header?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    showArrow?: boolean;\\n    forceRender?: boolean;\\n    /** @deprecated Use `collapsible=\\"disabled\\"` instead */\\n    disabled?: boolean;\\n    extra?: React.ReactNode;\\n    collapsible?: CollapsibleType;\\n}\\ninterface CollapseInterface extends React.FC<CollapseProps> {\\n    Panel: typeof CollapsePanel;\\n}\\ndeclare const Collapse: CollapseInterface;\\nexport default Collapse;\\n","antd/collapse/CollapsePanel.d.ts":"import * as React from \'react\';\\nexport declare type CollapsibleType = \'header\' | \'disabled\';\\nexport interface CollapsePanelProps {\\n    key: string | number;\\n    header: React.ReactNode;\\n    /** @deprecated Use `collapsible=\\"disabled\\"` instead */\\n    disabled?: boolean;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    showArrow?: boolean;\\n    prefixCls?: string;\\n    forceRender?: boolean;\\n    id?: string;\\n    extra?: React.ReactNode;\\n    collapsible?: CollapsibleType;\\n}\\ndeclare const CollapsePanel: React.FC<CollapsePanelProps>;\\nexport default CollapsePanel;\\n","antd/collapse/index.d.ts":"import Collapse from \'./Collapse\';\\nexport { CollapseProps } from \'./Collapse\';\\nexport { CollapsePanelProps } from \'./CollapsePanel\';\\nexport default Collapse;\\n","antd/collapse/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/comment/index.d.ts":"import * as React from \'react\';\\nexport interface CommentProps {\\n    /** List of action items rendered below the comment content */\\n    actions?: Array<React.ReactNode>;\\n    /** The element to display as the comment author. */\\n    author?: React.ReactNode;\\n    /** The element to display as the comment avatar - generally an antd Avatar */\\n    avatar?: React.ReactNode;\\n    /** ClassName of comment */\\n    className?: string;\\n    /** The main content of the comment */\\n    content: React.ReactNode;\\n    /** Nested comments should be provided as children of the Comment */\\n    children?: React.ReactNode;\\n    /** Comment prefix defaults to \'.ant-comment\' */\\n    prefixCls?: string;\\n    /** Additional style for the comment */\\n    style?: React.CSSProperties;\\n    /** A datetime element containing the time to be displayed */\\n    datetime?: React.ReactNode;\\n}\\ndeclare const Comment: React.FC<CommentProps>;\\nexport default Comment;\\n","antd/comment/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/config-provider/context.d.ts":"import * as React from \'react\';\\nimport { RenderEmptyHandler } from \'./renderEmpty\';\\nimport { Locale } from \'../locale-provider\';\\nimport { SizeType } from \'./SizeContext\';\\nimport { RequiredMark } from \'../form/Form\';\\nexport interface CSPConfig {\\n    nonce?: string;\\n}\\nexport declare type DirectionType = \'ltr\' | \'rtl\' | undefined;\\nexport interface ConfigConsumerProps {\\n    getTargetContainer?: () => HTMLElement;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    rootPrefixCls?: string;\\n    iconPrefixCls?: string;\\n    getPrefixCls: (suffixCls?: string, customizePrefixCls?: string) => string;\\n    renderEmpty: RenderEmptyHandler;\\n    csp?: CSPConfig;\\n    autoInsertSpaceInButton?: boolean;\\n    input?: {\\n        autoComplete?: string;\\n    };\\n    locale?: Locale;\\n    pageHeader?: {\\n        ghost: boolean;\\n    };\\n    direction?: DirectionType;\\n    space?: {\\n        size?: SizeType | number;\\n    };\\n    virtual?: boolean;\\n    dropdownMatchSelectWidth?: boolean;\\n    form?: {\\n        requiredMark?: RequiredMark;\\n    };\\n}\\nexport declare const ConfigContext: React.Context<ConfigConsumerProps>;\\nexport declare const ConfigConsumer: React.Consumer<ConfigConsumerProps>;\\ndeclare type IReactComponent<P = any> = React.FC<P> | React.ComponentClass<P> | React.ClassicComponentClass<P>;\\ninterface BasicExportProps {\\n    prefixCls?: string;\\n}\\ninterface ConsumerConfig {\\n    prefixCls: string;\\n}\\n/** @deprecated Use hooks instead. This is a legacy function */\\nexport declare function withConfigConsumer<ExportProps extends BasicExportProps>(config: ConsumerConfig): <ComponentDef>(Component: IReactComponent) => React.FC<ExportProps> & ComponentDef;\\nexport {};\\n","antd/config-provider/index.d.ts":"import * as React from \'react\';\\nimport { ValidateMessages } from \'rc-field-form/lib/interface\';\\nimport { RenderEmptyHandler } from \'./renderEmpty\';\\nimport { Locale } from \'../locale-provider\';\\nimport { ConfigConsumer, ConfigContext, CSPConfig, DirectionType, ConfigConsumerProps } from \'./context\';\\nimport SizeContext, { SizeType } from \'./SizeContext\';\\nimport { RequiredMark } from \'../form/Form\';\\nexport { RenderEmptyHandler, ConfigContext, ConfigConsumer, CSPConfig, DirectionType, ConfigConsumerProps, };\\nexport declare const configConsumerProps: string[];\\nexport interface ConfigProviderProps {\\n    getTargetContainer?: () => HTMLElement;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    prefixCls?: string;\\n    iconPrefixCls?: string;\\n    children?: React.ReactNode;\\n    renderEmpty?: RenderEmptyHandler;\\n    csp?: CSPConfig;\\n    autoInsertSpaceInButton?: boolean;\\n    form?: {\\n        validateMessages?: ValidateMessages;\\n        requiredMark?: RequiredMark;\\n    };\\n    input?: {\\n        autoComplete?: string;\\n    };\\n    locale?: Locale;\\n    pageHeader?: {\\n        ghost: boolean;\\n    };\\n    componentSize?: SizeType;\\n    direction?: DirectionType;\\n    space?: {\\n        size?: SizeType | number;\\n    };\\n    virtual?: boolean;\\n    dropdownMatchSelectWidth?: boolean;\\n}\\ndeclare const ConfigProvider: React.FC<ConfigProviderProps> & {\\n    ConfigContext: typeof ConfigContext;\\n    SizeContext: typeof SizeContext;\\n};\\nexport default ConfigProvider;\\n","antd/config-provider/renderEmpty.d.ts":"import * as React from \'react\';\\ndeclare const renderEmpty: (componentName?: string | undefined) => React.ReactNode;\\nexport declare type RenderEmptyHandler = typeof renderEmpty;\\nexport default renderEmpty;\\n","antd/config-provider/SizeContext.d.ts":"import * as React from \'react\';\\nexport declare type SizeType = \'small\' | \'middle\' | \'large\' | undefined;\\ndeclare const SizeContext: React.Context<SizeType>;\\nexport interface SizeContextProps {\\n    size?: SizeType;\\n}\\nexport declare const SizeContextProvider: React.FC<SizeContextProps>;\\nexport default SizeContext;\\n","antd/config-provider/style/index.d.ts":"import \'./index.less\';\\n","antd/date-picker/generatePicker/generateRangePicker.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { RangePickerProps } from \'.\';\\nexport default function generateRangePicker<DateType>(generateConfig: GenerateConfig<DateType>): React.ComponentClass<RangePickerProps<DateType>>;\\n","antd/date-picker/generatePicker/generateSinglePicker.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { PickerProps, PickerLocale } from \'.\';\\nexport default function generatePicker<DateType>(generateConfig: GenerateConfig<DateType>): {\\n    DatePicker: React.ComponentClass<PickerProps<DateType>, any>;\\n    WeekPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    TimePicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: React.ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<DateType>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: PickerLocale | undefined;\\n        size?: import(\\"../../config-provider/SizeContext\\").SizeType;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\n","antd/date-picker/generatePicker/index.d.ts":"import * as React from \'react\';\\nimport { GenerateConfig } from \'rc-picker/lib/generate/index\';\\nimport { PickerBaseProps as RCPickerBaseProps, PickerDateProps as RCPickerDateProps, PickerTimeProps as RCPickerTimeProps } from \'rc-picker/lib/Picker\';\\nimport { SharedTimeProps } from \'rc-picker/lib/panels/TimePanel\';\\nimport { RangePickerBaseProps as RCRangePickerBaseProps, RangePickerDateProps as RCRangePickerDateProps, RangePickerTimeProps as RCRangePickerTimeProps } from \'rc-picker/lib/RangePicker\';\\nimport { PickerMode, Locale as RcPickerLocale } from \'rc-picker/lib/interface\';\\nimport { SizeType } from \'../../config-provider/SizeContext\';\\nimport PickerButton from \'../PickerButton\';\\nimport PickerTag from \'../PickerTag\';\\nimport { TimePickerLocale } from \'../../time-picker\';\\nexport declare const Components: {\\n    button: typeof PickerButton;\\n    rangeItem: typeof PickerTag;\\n};\\nexport declare function getTimeProps<DateType>(props: {\\n    format?: string;\\n    picker?: PickerMode;\\n} & SharedTimeProps<DateType>): SharedTimeProps<DateType> | {\\n    showTime: SharedTimeProps<DateType>;\\n};\\ndeclare type InjectDefaultProps<Props> = Omit<Props, \'locale\' | \'generateConfig\' | \'prevIcon\' | \'nextIcon\' | \'superPrevIcon\' | \'superNextIcon\' | \'hideHeader\' | \'components\'> & {\\n    locale?: PickerLocale;\\n    size?: SizeType;\\n    bordered?: boolean;\\n};\\nexport declare type PickerLocale = {\\n    lang: RcPickerLocale & AdditionalPickerLocaleLangProps;\\n    timePickerLocale: TimePickerLocale;\\n} & AdditionalPickerLocaleProps;\\nexport declare type AdditionalPickerLocaleProps = {\\n    dateFormat?: string;\\n    dateTimeFormat?: string;\\n    weekFormat?: string;\\n    monthFormat?: string;\\n};\\nexport declare type AdditionalPickerLocaleLangProps = {\\n    placeholder: string;\\n    yearPlaceholder?: string;\\n    quarterPlaceholder?: string;\\n    monthPlaceholder?: string;\\n    weekPlaceholder?: string;\\n    rangeYearPlaceholder?: [string, string];\\n    rangeMonthPlaceholder?: [string, string];\\n    rangeWeekPlaceholder?: [string, string];\\n    rangePlaceholder?: [string, string];\\n};\\nexport declare type PickerBaseProps<DateType> = InjectDefaultProps<RCPickerBaseProps<DateType>>;\\nexport declare type PickerDateProps<DateType> = InjectDefaultProps<RCPickerDateProps<DateType>>;\\nexport declare type PickerTimeProps<DateType> = InjectDefaultProps<RCPickerTimeProps<DateType>>;\\nexport declare type PickerProps<DateType> = PickerBaseProps<DateType> | PickerDateProps<DateType> | PickerTimeProps<DateType>;\\nexport declare type RangePickerBaseProps<DateType> = InjectDefaultProps<RCRangePickerBaseProps<DateType>>;\\nexport declare type RangePickerDateProps<DateType> = InjectDefaultProps<RCRangePickerDateProps<DateType>>;\\nexport declare type RangePickerTimeProps<DateType> = InjectDefaultProps<RCRangePickerTimeProps<DateType>>;\\nexport declare type RangePickerProps<DateType> = RangePickerBaseProps<DateType> | RangePickerDateProps<DateType> | RangePickerTimeProps<DateType>;\\ndeclare function generatePicker<DateType>(generateConfig: GenerateConfig<DateType>): React.ComponentClass<PickerProps<DateType>, any> & {\\n    WeekPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerDateProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    RangePicker: React.ComponentClass<RangePickerProps<DateType>>;\\n    TimePicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerTimeProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: React.ComponentClass<Pick<InjectDefaultProps<RCPickerTimeProps<DateType>>, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\nexport default generatePicker;\\n","antd/date-picker/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { Moment } from \'moment\';\\nimport { PickerProps, PickerDateProps, RangePickerProps as BaseRangePickerProps } from \'./generatePicker\';\\nexport declare type DatePickerProps = PickerProps<Moment>;\\nexport declare type MonthPickerProps = Omit<PickerDateProps<Moment>, \'picker\'>;\\nexport declare type WeekPickerProps = Omit<PickerDateProps<Moment>, \'picker\'>;\\nexport declare type RangePickerProps = BaseRangePickerProps<Moment>;\\ndeclare const DatePicker: import(\\"react\\").ComponentClass<PickerProps<Moment>, any> & {\\n    WeekPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    MonthPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    YearPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerDateProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showToday\\" | \\"showNow\\" | \\"showTime\\" | \\"disabledTime\\" | \\"bordered\\">, any>;\\n    RangePicker: import(\\"react\\").ComponentClass<BaseRangePickerProps<Moment>, any>;\\n    TimePicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n    QuarterPicker: import(\\"react\\").ComponentClass<Pick<Pick<import(\\"rc-picker/lib/Picker\\").PickerTimeProps<Moment>, \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"picker\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\"> & {\\n        locale?: import(\\"./generatePicker\\").PickerLocale | undefined;\\n        size?: import(\\"../button\\").ButtonSize;\\n        bordered?: boolean | undefined;\\n    }, \\"size\\" | \\"style\\" | \\"direction\\" | \\"prefixCls\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"open\\" | \\"aria-label\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"name\\" | \\"placeholder\\" | \\"defaultValue\\" | \\"id\\" | \\"tabIndex\\" | \\"role\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"onFocus\\" | \\"onBlur\\" | \\"onChange\\" | \\"onKeyDown\\" | \\"onClick\\" | \\"onContextMenu\\" | \\"onMouseDown\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseUp\\" | \\"onSelect\\" | \\"locale\\" | \\"mode\\" | \\"defaultPickerValue\\" | \\"disabledDate\\" | \\"dateRender\\" | \\"monthCellRender\\" | \\"renderExtraFooter\\" | \\"onPanelChange\\" | \\"onOk\\" | \\"dropdownClassName\\" | \\"dropdownAlign\\" | \\"popupStyle\\" | \\"transitionName\\" | \\"allowClear\\" | \\"defaultOpen\\" | \\"inputReadOnly\\" | \\"format\\" | \\"suffixIcon\\" | \\"clearIcon\\" | \\"getPopupContainer\\" | \\"panelRender\\" | \\"onOpenChange\\" | \\"pickerRef\\" | \\"showNow\\" | \\"showHour\\" | \\"showMinute\\" | \\"showSecond\\" | \\"use12Hours\\" | \\"hourStep\\" | \\"minuteStep\\" | \\"secondStep\\" | \\"hideDisabledOptions\\" | \\"disabledHours\\" | \\"disabledMinutes\\" | \\"disabledSeconds\\" | \\"defaultOpenValue\\" | \\"bordered\\">, any>;\\n};\\nexport default DatePicker;\\n","antd/date-picker/locale/ar_EG.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/az_AZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/bg_BG.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/by_BY.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ca_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/cs_CZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/da_DK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/de_DE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/el_GR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/en_GB.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/en_US.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/es_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/et_EE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fa_IR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fi_FI.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fr_BE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/fr_FR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ga_IE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/gl_ES.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/he_IL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hi_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hr_HR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/hu_HU.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/id_ID.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/is_IS.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/it_IT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ja_JP.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kk_KZ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kmr_IQ.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/kn_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ko_KR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/lt_LT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/lv_LV.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/mk_MK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/mn_MN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ms_MY.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nb_NO.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nl_BE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/nl_NL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pl_PL.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pt_BR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/pt_PT.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ro_RO.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ru_RU.d.ts":"/** Created by Andrey Gayvoronsky on 13/04/16. */\\nimport { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sk_SK.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sl_SI.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sr_RS.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/sv_SE.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/ta_IN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/th_TH.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/tr_TR.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/uk_UA.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/vi_VN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/zh_CN.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/locale/zh_TW.d.ts":"import { PickerLocale } from \'../generatePicker\';\\ndeclare const locale: PickerLocale;\\nexport default locale;\\n","antd/date-picker/PickerButton.d.ts":"/// <reference types=\\"react\\" />\\nimport { ButtonProps } from \'../button\';\\nexport default function PickerButton(props: ButtonProps): JSX.Element;\\n","antd/date-picker/PickerTag.d.ts":"/// <reference types=\\"react\\" />\\nimport { TagProps } from \'../tag\';\\nexport default function PickerTag(props: TagProps): JSX.Element;\\n","antd/date-picker/style/index.d.ts":"import \'./index.less\';\\nimport \'../../tag/style\';\\nimport \'../../button/style\';\\n","antd/date-picker/util.d.ts":"import { PickerMode } from \'rc-picker/lib/interface\';\\nimport { PickerLocale } from \'./generatePicker\';\\nexport declare function getPlaceholder(picker: PickerMode | undefined, locale: PickerLocale, customizePlaceholder?: string): string;\\nexport declare function getRangePlaceholder(picker: PickerMode | undefined, locale: PickerLocale, customizePlaceholder?: [string, string]): [string, string] | undefined;\\n","antd/descriptions/Cell.d.ts":"import * as React from \'react\';\\nexport interface CellProps {\\n    itemPrefixCls: string;\\n    span: number;\\n    className?: string;\\n    component: string;\\n    style?: React.CSSProperties;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n    bordered?: boolean;\\n    label?: React.ReactNode;\\n    content?: React.ReactNode;\\n    colon?: boolean;\\n}\\ndeclare const Cell: React.FC<CellProps>;\\nexport default Cell;\\n","antd/descriptions/index.d.ts":"import * as React from \'react\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\nexport interface DescriptionsContextProps {\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n}\\nexport declare const DescriptionsContext: React.Context<DescriptionsContextProps>;\\nexport interface DescriptionsProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    bordered?: boolean;\\n    size?: \'middle\' | \'small\' | \'default\';\\n    children?: React.ReactNode;\\n    title?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    column?: number | Partial<Record<Breakpoint, number>>;\\n    layout?: \'horizontal\' | \'vertical\';\\n    colon?: boolean;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n}\\ndeclare function Descriptions({ prefixCls: customizePrefixCls, title, extra, column, colon, bordered, layout, children, className, style, size, labelStyle, contentStyle, }: DescriptionsProps): JSX.Element;\\ndeclare namespace Descriptions {\\n    var Item: React.FC<import(\\"./Item\\").DescriptionsItemProps>;\\n}\\nexport default Descriptions;\\n","antd/descriptions/Item.d.ts":"import * as React from \'react\';\\nexport interface DescriptionsItemProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    label?: React.ReactNode;\\n    labelStyle?: React.CSSProperties;\\n    contentStyle?: React.CSSProperties;\\n    children: React.ReactNode;\\n    span?: number;\\n}\\ndeclare const DescriptionsItem: React.FC<DescriptionsItemProps>;\\nexport default DescriptionsItem;\\n","antd/descriptions/Row.d.ts":"import * as React from \'react\';\\nimport { DescriptionsItemProps } from \'./Item\';\\nexport interface RowProps {\\n    prefixCls: string;\\n    vertical: boolean;\\n    row: React.ReactElement<DescriptionsItemProps>[];\\n    bordered?: boolean;\\n    colon: boolean;\\n    index: number;\\n}\\ndeclare const Row: React.FC<RowProps>;\\nexport default Row;\\n","antd/descriptions/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/divider/index.d.ts":"import * as React from \'react\';\\nexport interface DividerProps {\\n    prefixCls?: string;\\n    type?: \'horizontal\' | \'vertical\';\\n    orientation?: \'left\' | \'right\' | \'center\';\\n    className?: string;\\n    children?: React.ReactNode;\\n    dashed?: boolean;\\n    style?: React.CSSProperties;\\n    plain?: boolean;\\n}\\ndeclare const Divider: React.FC<DividerProps>;\\nexport default Divider;\\n","antd/divider/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/drawer/index.d.ts":"import * as React from \'react\';\\ndeclare type EventType = React.KeyboardEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement | HTMLButtonElement>;\\ndeclare type getContainerFunc = () => HTMLElement;\\ndeclare const PlacementTypes: [\\"top\\", \\"right\\", \\"bottom\\", \\"left\\"];\\ndeclare type placementType = typeof PlacementTypes[number];\\nexport interface PushState {\\n    distance: string | number;\\n}\\nexport interface DrawerProps {\\n    closable?: boolean;\\n    closeIcon?: React.ReactNode;\\n    destroyOnClose?: boolean;\\n    forceRender?: boolean;\\n    getContainer?: string | HTMLElement | getContainerFunc | false;\\n    maskClosable?: boolean;\\n    mask?: boolean;\\n    maskStyle?: React.CSSProperties;\\n    style?: React.CSSProperties;\\n    /** Wrapper dom node style of header and body */\\n    drawerStyle?: React.CSSProperties;\\n    headerStyle?: React.CSSProperties;\\n    bodyStyle?: React.CSSProperties;\\n    title?: React.ReactNode;\\n    visible?: boolean;\\n    width?: number | string;\\n    height?: number | string;\\n    zIndex?: number;\\n    prefixCls?: string;\\n    push?: boolean | PushState;\\n    placement?: placementType;\\n    onClose?: (e: EventType) => void;\\n    afterVisibleChange?: (visible: boolean) => void;\\n    className?: string;\\n    handler?: React.ReactNode;\\n    keyboard?: boolean;\\n    footer?: React.ReactNode;\\n    footerStyle?: React.CSSProperties;\\n}\\nexport interface IDrawerState {\\n    push?: boolean;\\n}\\ndeclare const DrawerWrapper: React.FC<DrawerProps>;\\nexport default DrawerWrapper;\\n","antd/drawer/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/dropdown/dropdown-button.d.ts":"import * as React from \'react\';\\nimport { ButtonHTMLType } from \'../button/button\';\\nimport { ButtonGroupProps } from \'../button/button-group\';\\nimport { DropDownProps } from \'./dropdown\';\\ndeclare type DropdownButtonType = \'primary\' | \'ghost\' | \'dashed\';\\nexport interface DropdownButtonProps extends ButtonGroupProps, DropDownProps {\\n    type?: DropdownButtonType;\\n    htmlType?: ButtonHTMLType;\\n    disabled?: boolean;\\n    onClick?: React.MouseEventHandler<HTMLButtonElement>;\\n    icon?: React.ReactNode;\\n    href?: string;\\n    children?: React.ReactNode;\\n    title?: string;\\n    buttonsRender?: (buttons: React.ReactNode[]) => React.ReactNode[];\\n}\\ninterface DropdownButtonInterface extends React.FC<DropdownButtonProps> {\\n    __ANT_BUTTON: boolean;\\n}\\ndeclare const DropdownButton: DropdownButtonInterface;\\nexport default DropdownButton;\\n","antd/dropdown/dropdown.d.ts":"import * as React from \'react\';\\nimport DropdownButton from \'./dropdown-button\';\\ndeclare const Placements: [\\"topLeft\\", \\"topCenter\\", \\"topRight\\", \\"bottomLeft\\", \\"bottomCenter\\", \\"bottomRight\\"];\\ndeclare type Placement = typeof Placements[number];\\ndeclare type OverlayFunc = () => React.ReactElement;\\ndeclare type Align = {\\n    points?: [string, string];\\n    offset?: [number, number];\\n    targetOffset?: [number, number];\\n    overflow?: {\\n        adjustX?: boolean;\\n        adjustY?: boolean;\\n    };\\n    useCssRight?: boolean;\\n    useCssBottom?: boolean;\\n    useCssTransform?: boolean;\\n};\\nexport interface DropDownProps {\\n    arrow?: boolean;\\n    trigger?: (\'click\' | \'hover\' | \'contextMenu\')[];\\n    overlay: React.ReactElement | OverlayFunc;\\n    onVisibleChange?: (visible: boolean) => void;\\n    visible?: boolean;\\n    disabled?: boolean;\\n    align?: Align;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    prefixCls?: string;\\n    className?: string;\\n    transitionName?: string;\\n    placement?: Placement;\\n    overlayClassName?: string;\\n    overlayStyle?: React.CSSProperties;\\n    forceRender?: boolean;\\n    mouseEnterDelay?: number;\\n    mouseLeaveDelay?: number;\\n    openClassName?: string;\\n}\\ninterface DropdownInterface extends React.FC<DropDownProps> {\\n    Button: typeof DropdownButton;\\n}\\ndeclare const Dropdown: DropdownInterface;\\nexport default Dropdown;\\n","antd/dropdown/index.d.ts":"import Dropdown from \'./dropdown\';\\nexport { DropDownProps } from \'./dropdown\';\\nexport { DropdownButtonProps } from \'./dropdown-button\';\\nexport default Dropdown;\\n","antd/dropdown/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/empty/empty.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Empty: () => JSX.Element;\\nexport default Empty;\\n","antd/empty/index.d.ts":"import * as React from \'react\';\\nexport interface TransferLocale {\\n    description: string;\\n}\\nexport interface EmptyProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    /** @since 3.16.0 */\\n    imageStyle?: React.CSSProperties;\\n    image?: React.ReactNode;\\n    description?: React.ReactNode;\\n    children?: React.ReactNode;\\n}\\ninterface EmptyType extends React.FC<EmptyProps> {\\n    PRESENTED_IMAGE_DEFAULT: React.ReactNode;\\n    PRESENTED_IMAGE_SIMPLE: React.ReactNode;\\n}\\ndeclare const Empty: EmptyType;\\nexport default Empty;\\n","antd/empty/simple.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Simple: () => JSX.Element;\\nexport default Simple;\\n","antd/empty/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/form/context.d.ts":"import * as React from \'react\';\\nimport { FormProviderProps as RcFormProviderProps } from \'rc-field-form/lib/FormContext\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport { RequiredMark } from \'./Form\';\\nimport { ValidateStatus } from \'./FormItem\';\\n/** Form Context. Set top form style and pass to Form Item usage. */\\nexport interface FormContextProps {\\n    vertical: boolean;\\n    name?: string;\\n    colon?: boolean;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    wrapperCol?: ColProps;\\n    requiredMark?: RequiredMark;\\n    itemRef: (name: (string | number)[]) => (node: React.ReactElement) => void;\\n}\\nexport declare const FormContext: React.Context<FormContextProps>;\\n/** Form Item Context. Used for Form noStyle Item error collection */\\nexport interface FormItemContextProps {\\n    updateItemErrors: (name: string, errors: string[], originName?: string) => void;\\n}\\nexport declare const FormItemContext: React.Context<FormItemContextProps>;\\n/** Form Provider */\\nexport interface FormProviderProps extends Omit<RcFormProviderProps, \'validateMessages\'> {\\n    prefixCls?: string;\\n}\\nexport declare const FormProvider: React.FC<FormProviderProps>;\\n/** Used for ErrorList only */\\nexport interface FormItemPrefixContextProps {\\n    prefixCls: string;\\n    status?: ValidateStatus;\\n}\\nexport declare const FormItemPrefixContext: React.Context<FormItemPrefixContextProps>;\\n","antd/form/ErrorList.d.ts":"import * as React from \'react\';\\nexport interface ErrorListProps {\\n    errors?: React.ReactNode[];\\n    /** @private Internal usage. Do not use in your production */\\n    help?: React.ReactNode;\\n    /** @private Internal usage. Do not use in your production */\\n    onDomErrorVisibleChange?: (visible: boolean) => void;\\n}\\nexport default function ErrorList({ errors, help, onDomErrorVisibleChange, }: ErrorListProps): JSX.Element;\\n","antd/form/Form.d.ts":"import * as React from \'react\';\\nimport { List } from \'rc-field-form\';\\nimport { FormProps as RcFormProps } from \'rc-field-form/lib/Form\';\\nimport { Options } from \'scroll-into-view-if-needed\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport useForm, { FormInstance } from \'./hooks/useForm\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type RequiredMark = boolean | \'optional\';\\nexport declare type FormLayout = \'horizontal\' | \'inline\' | \'vertical\';\\nexport interface FormProps<Values = any> extends Omit<RcFormProps<Values>, \'form\'> {\\n    prefixCls?: string;\\n    colon?: boolean;\\n    name?: string;\\n    layout?: FormLayout;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    wrapperCol?: ColProps;\\n    form?: FormInstance<Values>;\\n    size?: SizeType;\\n    scrollToFirstError?: Options | boolean;\\n    requiredMark?: RequiredMark;\\n    /** @deprecated Will warning in future branch. Pls use `requiredMark` instead. */\\n    hideRequiredMark?: boolean;\\n}\\ndeclare const Form: <Values = any>(props: FormProps<Values> & {\\n    children?: React.ReactNode;\\n} & {\\n    ref?: ((instance: FormInstance<Values> | null) => void) | React.RefObject<FormInstance<Values>> | null | undefined;\\n}) => React.ReactElement;\\nexport { useForm, List, FormInstance };\\nexport default Form;\\n","antd/form/FormItem.d.ts":"import * as React from \'react\';\\nimport { FormInstance } from \'rc-field-form\';\\nimport { FieldProps } from \'rc-field-form/lib/Field\';\\nimport { FormItemLabelProps, LabelTooltipType } from \'./FormItemLabel\';\\nimport { FormItemInputProps } from \'./FormItemInput\';\\ndeclare const ValidateStatuses: [\\"success\\", \\"warning\\", \\"error\\", \\"validating\\", \\"\\"];\\nexport declare type ValidateStatus = typeof ValidateStatuses[number];\\ndeclare type RenderChildren<Values = any> = (form: FormInstance<Values>) => React.ReactNode;\\ndeclare type RcFieldProps = Omit<FieldProps, \'children\'>;\\ndeclare type ChildrenType<Values = any> = RenderChildren<Values> | React.ReactNode;\\nexport interface FormItemProps<Values = any> extends FormItemLabelProps, FormItemInputProps, RcFieldProps {\\n    prefixCls?: string;\\n    noStyle?: boolean;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    children?: ChildrenType<Values>;\\n    id?: string;\\n    hasFeedback?: boolean;\\n    validateStatus?: ValidateStatus;\\n    required?: boolean;\\n    hidden?: boolean;\\n    initialValue?: any;\\n    messageVariables?: Record<string, string>;\\n    tooltip?: LabelTooltipType;\\n    /** Auto passed by List render props. User should not use this. */\\n    fieldKey?: React.Key | React.Key[];\\n}\\ndeclare function FormItem<Values = any>(props: FormItemProps<Values>): React.ReactElement;\\nexport default FormItem;\\n","antd/form/FormItemInput.d.ts":"import * as React from \'react\';\\nimport { ColProps } from \'../grid/col\';\\nimport { ValidateStatus } from \'./FormItem\';\\ninterface FormItemInputMiscProps {\\n    prefixCls: string;\\n    children: React.ReactNode;\\n    errors: React.ReactNode[];\\n    hasFeedback?: boolean;\\n    validateStatus?: ValidateStatus;\\n    onDomErrorVisibleChange: (visible: boolean) => void;\\n    /** @private Internal usage, do not use in any of your production. */\\n    _internalItemRender?: {\\n        mark: string;\\n        render: (props: FormItemInputProps & FormItemInputMiscProps, domList: {\\n            input: JSX.Element;\\n            errorList: JSX.Element;\\n            extra: JSX.Element | null;\\n        }) => React.ReactNode;\\n    };\\n}\\nexport interface FormItemInputProps {\\n    wrapperCol?: ColProps;\\n    help?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    status?: ValidateStatus;\\n}\\ndeclare const FormItemInput: React.FC<FormItemInputProps & FormItemInputMiscProps>;\\nexport default FormItemInput;\\n","antd/form/FormItemLabel.d.ts":"import * as React from \'react\';\\nimport { ColProps } from \'../grid/col\';\\nimport { FormLabelAlign } from \'./interface\';\\nimport { RequiredMark } from \'./Form\';\\nimport { TooltipProps } from \'../tooltip\';\\nexport declare type WrapperTooltipProps = TooltipProps & {\\n    icon?: React.ReactElement;\\n};\\nexport declare type LabelTooltipType = WrapperTooltipProps | React.ReactNode;\\nexport interface FormItemLabelProps {\\n    colon?: boolean;\\n    htmlFor?: string;\\n    label?: React.ReactNode;\\n    labelAlign?: FormLabelAlign;\\n    labelCol?: ColProps;\\n    requiredMark?: RequiredMark;\\n    tooltip?: LabelTooltipType;\\n}\\ndeclare const FormItemLabel: React.FC<FormItemLabelProps & {\\n    required?: boolean;\\n    prefixCls: string;\\n}>;\\nexport default FormItemLabel;\\n","antd/form/FormList.d.ts":"import * as React from \'react\';\\nimport { ValidatorRule, StoreValue } from \'rc-field-form/lib/interface\';\\nexport interface FormListFieldData {\\n    name: number;\\n    key: number;\\n    fieldKey: number;\\n}\\nexport interface FormListOperation {\\n    add: (defaultValue?: StoreValue, insertIndex?: number) => void;\\n    remove: (index: number | number[]) => void;\\n    move: (from: number, to: number) => void;\\n}\\nexport interface FormListProps {\\n    prefixCls?: string;\\n    name: string | number | (string | number)[];\\n    rules?: ValidatorRule[];\\n    initialValue?: any[];\\n    children: (fields: FormListFieldData[], operation: FormListOperation, meta: {\\n        errors: React.ReactNode[];\\n    }) => React.ReactNode;\\n}\\ndeclare const FormList: React.FC<FormListProps>;\\nexport default FormList;\\n","antd/form/hooks/useCacheErrors.d.ts":"import * as React from \'react\';\\n/** Always debounce error to avoid [error -> null -> error] blink */\\nexport default function useCacheErrors(errors: React.ReactNode[], changeTrigger: (visible: boolean) => void, directly: boolean): [boolean, React.ReactNode[]];\\n","antd/form/hooks/useForm.d.ts":"import * as React from \'react\';\\nimport { FormInstance as RcFormInstance } from \'rc-field-form\';\\nimport { ScrollOptions, NamePath, InternalNamePath } from \'../interface\';\\nexport interface FormInstance<Values = any> extends RcFormInstance<Values> {\\n    scrollToField: (name: NamePath, options?: ScrollOptions) => void;\\n    /** This is an internal usage. Do not use in your prod */\\n    __INTERNAL__: {\\n        /** No! Do not use this in your code! */\\n        name?: string;\\n        /** No! Do not use this in your code! */\\n        itemRef: (name: InternalNamePath) => (node: React.ReactElement) => void;\\n    };\\n    getFieldInstance: (name: NamePath) => any;\\n}\\nexport default function useForm<Values = any>(form?: FormInstance<Values>): [FormInstance<Values>];\\n","antd/form/hooks/useFrameState.d.ts":"declare type Updater<ValueType> = (prev?: ValueType) => ValueType;\\nexport default function useFrameState<ValueType>(defaultValue: ValueType): [ValueType, (updater: Updater<ValueType>) => void];\\nexport {};\\n","antd/form/hooks/useItemRef.d.ts":"import * as React from \'react\';\\nimport { InternalNamePath } from \'../interface\';\\nexport default function useItemRef(): (name: InternalNamePath, children: any) => ((instance: any) => void) | React.RefObject<any> | null | undefined;\\n","antd/form/index.d.ts":"import { Rule, RuleObject, RuleRender } from \'rc-field-form/lib/interface\';\\nimport InternalForm, { useForm, FormInstance, FormProps } from \'./Form\';\\nimport Item, { FormItemProps } from \'./FormItem\';\\nimport ErrorList, { ErrorListProps } from \'./ErrorList\';\\nimport List, { FormListProps } from \'./FormList\';\\nimport { FormProvider } from \'./context\';\\ndeclare type InternalFormType = typeof InternalForm;\\ninterface FormInterface extends InternalFormType {\\n    useForm: typeof useForm;\\n    Item: typeof Item;\\n    List: typeof List;\\n    ErrorList: typeof ErrorList;\\n    Provider: typeof FormProvider;\\n    /** @deprecated Only for warning usage. Do not use. */\\n    create: () => void;\\n}\\ndeclare const Form: FormInterface;\\nexport { FormInstance, FormProps, FormItemProps, ErrorListProps, Rule, RuleObject, RuleRender, FormListProps, };\\nexport default Form;\\n","antd/form/interface.d.ts":"export { Options as ScrollOptions } from \'scroll-into-view-if-needed\';\\nexport declare type FormLabelAlign = \'left\' | \'right\';\\nexport { Store, StoreValue, NamePath, InternalNamePath } from \'rc-field-form/lib/interface\';\\n","antd/form/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../grid/style\';\\nimport \'../../tooltip/style\';\\n","antd/form/util.d.ts":"import { InternalNamePath } from \'./interface\';\\nexport declare function toArray<T>(candidate?: T | T[] | false): T[];\\nexport declare function getFieldId(namePath: InternalNamePath, formName?: string): string | undefined;\\n","antd/grid/col.d.ts":"import * as React from \'react\';\\ndeclare type ColSpanType = number | string;\\ndeclare type FlexType = number | \'none\' | \'auto\' | string;\\nexport interface ColSize {\\n    flex?: FlexType;\\n    span?: ColSpanType;\\n    order?: ColSpanType;\\n    offset?: ColSpanType;\\n    push?: ColSpanType;\\n    pull?: ColSpanType;\\n}\\nexport interface ColProps extends React.HTMLAttributes<HTMLDivElement> {\\n    flex?: FlexType;\\n    span?: ColSpanType;\\n    order?: ColSpanType;\\n    offset?: ColSpanType;\\n    push?: ColSpanType;\\n    pull?: ColSpanType;\\n    xs?: ColSpanType | ColSize;\\n    sm?: ColSpanType | ColSize;\\n    md?: ColSpanType | ColSize;\\n    lg?: ColSpanType | ColSize;\\n    xl?: ColSpanType | ColSize;\\n    xxl?: ColSpanType | ColSize;\\n    prefixCls?: string;\\n}\\ndeclare const Col: React.ForwardRefExoticComponent<ColProps & React.RefAttributes<HTMLDivElement>>;\\nexport default Col;\\n","antd/grid/hooks/useBreakpoint.d.ts":"import { ScreenMap } from \'../../_util/responsiveObserve\';\\ndeclare function useBreakpoint(): ScreenMap;\\nexport default useBreakpoint;\\n","antd/grid/index.d.ts":"import Row from \'./row\';\\nimport Col from \'./col\';\\nimport useBreakpoint from \'./hooks/useBreakpoint\';\\nexport { RowProps } from \'./row\';\\nexport { ColProps, ColSize } from \'./col\';\\nexport { Row, Col };\\ndeclare const _default: {\\n    useBreakpoint: typeof useBreakpoint;\\n};\\nexport default _default;\\n","antd/grid/row.d.ts":"import * as React from \'react\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\ndeclare const RowAligns: [\\"top\\", \\"middle\\", \\"bottom\\", \\"stretch\\"];\\ndeclare const RowJustify: [\\"start\\", \\"end\\", \\"center\\", \\"space-around\\", \\"space-between\\"];\\nexport declare type Gutter = number | Partial<Record<Breakpoint, number>>;\\nexport interface RowProps extends React.HTMLAttributes<HTMLDivElement> {\\n    gutter?: Gutter | [Gutter, Gutter];\\n    align?: typeof RowAligns[number];\\n    justify?: typeof RowJustify[number];\\n    prefixCls?: string;\\n    wrap?: boolean;\\n}\\ndeclare const Row: React.ForwardRefExoticComponent<RowProps & React.RefAttributes<HTMLDivElement>>;\\nexport default Row;\\n","antd/grid/RowContext.d.ts":"import { Context } from \'react\';\\nexport interface RowContextState {\\n    gutter?: [number, number];\\n    wrap?: boolean;\\n}\\ndeclare const RowContext: Context<RowContextState>;\\nexport default RowContext;\\n","antd/grid/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/icon/index.d.ts":"declare const Icon: () => null;\\nexport default Icon;\\n","antd/icon/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/image/index.d.ts":"import * as React from \'react\';\\nimport { ImageProps } from \'rc-image\';\\nimport PreviewGroup from \'./PreviewGroup\';\\nexport interface CompositionImage<P> extends React.FC<P> {\\n    PreviewGroup: typeof PreviewGroup;\\n}\\ndeclare const Image: CompositionImage<ImageProps>;\\nexport { ImageProps };\\nexport default Image;\\n","antd/image/PreviewGroup.d.ts":"import * as React from \'react\';\\nimport { GroupConsumerProps } from \'rc-image/lib/PreviewGroup\';\\nexport declare const icons: {\\n    rotateLeft: JSX.Element;\\n    rotateRight: JSX.Element;\\n    zoomIn: JSX.Element;\\n    zoomOut: JSX.Element;\\n    close: JSX.Element;\\n    left: JSX.Element;\\n    right: JSX.Element;\\n};\\ndeclare const InternalPreviewGroup: React.FC<GroupConsumerProps>;\\nexport default InternalPreviewGroup;\\n","antd/image/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/index.d.ts":"export type { AffixProps } from \'./affix\';\\nexport { default as Affix } from \'./affix\';\\nexport type { AnchorProps, AnchorLinkProps } from \'./anchor\';\\nexport { default as Anchor } from \'./anchor\';\\nexport type { AutoCompleteProps } from \'./auto-complete\';\\nexport { default as AutoComplete } from \'./auto-complete\';\\nexport type { AlertProps } from \'./alert\';\\nexport { default as Alert } from \'./alert\';\\nexport type { AvatarProps } from \'./avatar\';\\nexport { default as Avatar } from \'./avatar\';\\nexport type { BackTopProps } from \'./back-top\';\\nexport { default as BackTop } from \'./back-top\';\\nexport type { BadgeProps } from \'./badge\';\\nexport { default as Badge } from \'./badge\';\\nexport type { BreadcrumbProps, BreadcrumbItemProps } from \'./breadcrumb\';\\nexport { default as Breadcrumb } from \'./breadcrumb\';\\nexport type { ButtonProps } from \'./button\';\\nexport { default as Button } from \'./button\';\\nexport type { CalendarProps } from \'./calendar\';\\nexport { default as Calendar } from \'./calendar\';\\nexport type { CardProps } from \'./card\';\\nexport { default as Card } from \'./card\';\\nexport type { CollapseProps, CollapsePanelProps } from \'./collapse\';\\nexport { default as Collapse } from \'./collapse\';\\nexport type { CarouselProps } from \'./carousel\';\\nexport { default as Carousel } from \'./carousel\';\\nexport type { CascaderProps } from \'./cascader\';\\nexport { default as Cascader } from \'./cascader\';\\nexport type { CheckboxProps, CheckboxOptionType } from \'./checkbox\';\\nexport { default as Checkbox } from \'./checkbox\';\\nexport type { ColProps } from \'./col\';\\nexport { default as Col } from \'./col\';\\nexport type { CommentProps } from \'./comment\';\\nexport { default as Comment } from \'./comment\';\\nexport { default as ConfigProvider } from \'./config-provider\';\\nexport type { DatePickerProps } from \'./date-picker\';\\nexport { default as DatePicker } from \'./date-picker\';\\nexport type { DescriptionsProps } from \'./descriptions\';\\nexport { default as Descriptions } from \'./descriptions\';\\nexport type { DividerProps } from \'./divider\';\\nexport { default as Divider } from \'./divider\';\\nexport type { DropDownProps } from \'./dropdown\';\\nexport { default as Dropdown } from \'./dropdown\';\\nexport type { DrawerProps } from \'./drawer\';\\nexport { default as Drawer } from \'./drawer\';\\nexport type { EmptyProps } from \'./empty\';\\nexport { default as Empty } from \'./empty\';\\nexport type { FormInstance, FormProps, FormItemProps } from \'./form\';\\nexport { default as Form } from \'./form\';\\nexport { default as Grid } from \'./grid\';\\nexport type { InputProps } from \'./input\';\\nexport { default as Input } from \'./input\';\\nexport type { ImageProps } from \'./image\';\\nexport { default as Image } from \'./image\';\\nexport type { InputNumberProps } from \'./input-number\';\\nexport { default as InputNumber } from \'./input-number\';\\nexport type { LayoutProps } from \'./layout\';\\nexport { default as Layout } from \'./layout\';\\nexport type { ListProps } from \'./list\';\\nexport { default as List } from \'./list\';\\nexport type { ArgsProps as MessageArgsProps } from \'./message\';\\nexport { default as message } from \'./message\';\\nexport type { MenuProps, MenuTheme, SubMenuProps, MenuItemProps } from \'./menu\';\\nexport { default as Menu } from \'./menu\';\\nexport type { MentionProps } from \'./mentions\';\\nexport { default as Mentions } from \'./mentions\';\\nexport type { ModalProps, ModalFuncProps } from \'./modal\';\\nexport { default as Modal } from \'./modal\';\\nexport type { StatisticProps } from \'./statistic\';\\nexport { default as Statistic } from \'./statistic\';\\nexport { default as notification } from \'./notification\';\\nexport type { PageHeaderProps } from \'./page-header\';\\nexport { default as PageHeader } from \'./page-header\';\\nexport type { PaginationProps } from \'./pagination\';\\nexport { default as Pagination } from \'./pagination\';\\nexport type { PopconfirmProps } from \'./popconfirm\';\\nexport { default as Popconfirm } from \'./popconfirm\';\\nexport type { PopoverProps } from \'./popover\';\\nexport { default as Popover } from \'./popover\';\\nexport type { ProgressProps } from \'./progress\';\\nexport { default as Progress } from \'./progress\';\\nexport type { RadioProps, RadioChangeEvent, RadioGroupProps } from \'./radio\';\\nexport { default as Radio } from \'./radio\';\\nexport type { RateProps } from \'./rate\';\\nexport { default as Rate } from \'./rate\';\\nexport type { ResultProps } from \'./result\';\\nexport { default as Result } from \'./result\';\\nexport type { RowProps } from \'./row\';\\nexport { default as Row } from \'./row\';\\nexport type { SelectProps } from \'./select\';\\nexport { default as Select } from \'./select\';\\nexport type { SkeletonProps } from \'./skeleton\';\\nexport { default as Skeleton } from \'./skeleton\';\\nexport type { SliderSingleProps } from \'./slider\';\\nexport { default as Slider } from \'./slider\';\\nexport type { SpaceProps } from \'./space\';\\nexport { default as Space } from \'./space\';\\nexport type { SpinProps } from \'./spin\';\\nexport { default as Spin } from \'./spin\';\\nexport type { StepProps, StepsProps } from \'./steps\';\\nexport { default as Steps } from \'./steps\';\\nexport type { SwitchProps } from \'./switch\';\\nexport { default as Switch } from \'./switch\';\\nexport type { TableProps, TablePaginationConfig, ColumnGroupType as TableColumnGroupType, ColumnType as TableColumnType, ColumnProps as TableColumnProps, } from \'./table\';\\nexport { default as Table } from \'./table\';\\nexport type { TransferProps } from \'./transfer\';\\nexport { default as Transfer } from \'./transfer\';\\nexport type { TreeProps, AntTreeNodeProps as TreeNodeProps } from \'./tree\';\\nexport { default as Tree } from \'./tree\';\\nexport type { TreeSelectProps } from \'./tree-select\';\\nexport { default as TreeSelect } from \'./tree-select\';\\nexport type { TabsProps, TabPaneProps } from \'./tabs\';\\nexport { default as Tabs } from \'./tabs\';\\nexport type { TagProps, TagType } from \'./tag\';\\nexport { default as Tag } from \'./tag\';\\nexport type { TimePickerProps, TimeRangePickerProps } from \'./time-picker\';\\nexport { default as TimePicker } from \'./time-picker\';\\nexport type { TimelineProps, TimelineItemProps } from \'./timeline\';\\nexport { default as Timeline } from \'./timeline\';\\nexport type { TooltipProps } from \'./tooltip\';\\nexport { default as Tooltip } from \'./tooltip\';\\nexport type { TypographyProps } from \'./typography\';\\nexport { default as Typography } from \'./typography\';\\nexport type { UploadProps } from \'./upload\';\\nexport { default as Upload } from \'./upload\';\\nexport { default as version } from \'./version\';\\n","antd/input/ClearableLabeledInput.d.ts":"import * as React from \'react\';\\nimport { InputProps } from \'./Input\';\\nimport { DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare const ClearableInputType: [\\"text\\", \\"input\\"];\\nexport declare function hasPrefixSuffix(props: InputProps | ClearableInputProps): boolean;\\n/** This basic props required for input and textarea. */\\ninterface BasicProps {\\n    prefixCls: string;\\n    inputType: typeof ClearableInputType[number];\\n    value?: any;\\n    allowClear?: boolean;\\n    element: React.ReactElement;\\n    handleReset: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    direction?: DirectionType;\\n    focused?: boolean;\\n    readOnly?: boolean;\\n    bordered: boolean;\\n}\\n/** This props only for input. */\\ninterface ClearableInputProps extends BasicProps {\\n    size?: SizeType;\\n    suffix?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    addonBefore?: React.ReactNode;\\n    addonAfter?: React.ReactNode;\\n    triggerFocus?: () => void;\\n}\\ndeclare class ClearableLabeledInput extends React.Component<ClearableInputProps> {\\n    /** @private Do not use out of this class. We do not promise this is always keep. */\\n    private containerRef;\\n    onInputMouseUp: React.MouseEventHandler;\\n    renderClearIcon(prefixCls: string): JSX.Element | null;\\n    renderSuffix(prefixCls: string): JSX.Element | null;\\n    renderLabeledIcon(prefixCls: string, element: React.ReactElement): JSX.Element;\\n    renderInputWithLabel(prefixCls: string, labeledElement: React.ReactElement): JSX.Element;\\n    renderTextAreaWithClearIcon(prefixCls: string, element: React.ReactElement): JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default ClearableLabeledInput;\\n","antd/input/Group.d.ts":"import * as React from \'react\';\\nexport interface GroupProps {\\n    className?: string;\\n    size?: \'large\' | \'small\' | \'default\';\\n    children?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    onMouseEnter?: React.MouseEventHandler<HTMLSpanElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLSpanElement>;\\n    onFocus?: React.FocusEventHandler<HTMLSpanElement>;\\n    onBlur?: React.FocusEventHandler<HTMLSpanElement>;\\n    prefixCls?: string;\\n    compact?: boolean;\\n}\\ndeclare const Group: React.FC<GroupProps>;\\nexport default Group;\\n","antd/input/index.d.ts":"import Input from \'./Input\';\\nexport { InputProps } from \'./Input\';\\nexport { GroupProps } from \'./Group\';\\nexport { SearchProps } from \'./Search\';\\nexport { TextAreaProps } from \'./TextArea\';\\nexport { PasswordProps } from \'./Password\';\\nexport default Input;\\n","antd/input/Input.d.ts":"import * as React from \'react\';\\nimport Group from \'./Group\';\\nimport Search from \'./Search\';\\nimport TextArea from \'./TextArea\';\\nimport Password from \'./Password\';\\nimport { Omit, LiteralUnion } from \'../_util/type\';\\nimport ClearableLabeledInput from \'./ClearableLabeledInput\';\\nimport { ConfigConsumerProps, DirectionType } from \'../config-provider\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport interface InputFocusOptions extends FocusOptions {\\n    cursor?: \'start\' | \'end\' | \'all\';\\n}\\nexport interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \'size\' | \'prefix\' | \'type\'> {\\n    prefixCls?: string;\\n    size?: SizeType;\\n    type?: LiteralUnion<\'button\' | \'checkbox\' | \'color\' | \'date\' | \'datetime-local\' | \'email\' | \'file\' | \'hidden\' | \'image\' | \'month\' | \'number\' | \'password\' | \'radio\' | \'range\' | \'reset\' | \'search\' | \'submit\' | \'tel\' | \'text\' | \'time\' | \'url\' | \'week\', string>;\\n    onPressEnter?: React.KeyboardEventHandler<HTMLInputElement>;\\n    addonBefore?: React.ReactNode;\\n    addonAfter?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    suffix?: React.ReactNode;\\n    allowClear?: boolean;\\n    bordered?: boolean;\\n}\\nexport declare function fixControlledValue<T>(value: T): \\"\\" | T;\\nexport declare function resolveOnChange(target: HTMLInputElement | HTMLTextAreaElement, e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement> | React.MouseEvent<HTMLElement, MouseEvent>, onChange?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void): void;\\nexport declare function getInputClassName(prefixCls: string, bordered: boolean, size?: SizeType, disabled?: boolean, direction?: DirectionType): string;\\nexport declare function triggerFocus(element?: HTMLInputElement | HTMLTextAreaElement, option?: InputFocusOptions): void;\\nexport interface InputState {\\n    value: any;\\n    focused: boolean;\\n    /** `value` from prev props */\\n    prevValue: any;\\n}\\ndeclare class Input extends React.Component<InputProps, InputState> {\\n    static Group: typeof Group;\\n    static Search: typeof Search;\\n    static TextArea: typeof TextArea;\\n    static Password: typeof Password;\\n    static defaultProps: {\\n        type: string;\\n    };\\n    input: HTMLInputElement;\\n    clearableInput: ClearableLabeledInput;\\n    removePasswordTimeout: number;\\n    direction: DirectionType;\\n    constructor(props: InputProps);\\n    static getDerivedStateFromProps(nextProps: InputProps, { prevValue }: InputState): Partial<InputState>;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    getSnapshotBeforeUpdate(prevProps: InputProps): null;\\n    componentWillUnmount(): void;\\n    focus: (option?: InputFocusOptions | undefined) => void;\\n    blur(): void;\\n    setSelectionRange(start: number, end: number, direction?: \'forward\' | \'backward\' | \'none\'): void;\\n    select(): void;\\n    saveClearableInput: (input: ClearableLabeledInput) => void;\\n    saveInput: (input: HTMLInputElement) => void;\\n    onFocus: React.FocusEventHandler<HTMLInputElement>;\\n    onBlur: React.FocusEventHandler<HTMLInputElement>;\\n    setValue(value: string, callback?: () => void): void;\\n    handleReset: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\\n    renderInput: (prefixCls: string, size: SizeType | undefined, bordered: boolean, input?: ConfigConsumerProps[\'input\']) => JSX.Element;\\n    clearPasswordValueAttribute: () => void;\\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => void;\\n    renderComponent: ({ getPrefixCls, direction, input }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Input;\\n","antd/input/Password.d.ts":"import * as React from \'react\';\\nimport { InputProps } from \'./Input\';\\nexport interface PasswordProps extends InputProps {\\n    readonly inputPrefixCls?: string;\\n    readonly action?: string;\\n    visibilityToggle?: boolean;\\n    iconRender?: (visible: boolean) => React.ReactNode;\\n}\\ndeclare const Password: React.ForwardRefExoticComponent<PasswordProps & React.RefAttributes<any>>;\\nexport default Password;\\n","antd/input/Search.d.ts":"import * as React from \'react\';\\nimport Input, { InputProps } from \'./Input\';\\nexport interface SearchProps extends InputProps {\\n    inputPrefixCls?: string;\\n    onSearch?: (value: string, event?: React.ChangeEvent<HTMLInputElement> | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>) => void;\\n    enterButton?: React.ReactNode;\\n    loading?: boolean;\\n}\\ndeclare const Search: React.ForwardRefExoticComponent<SearchProps & React.RefAttributes<Input>>;\\nexport default Search;\\n","antd/input/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/input/TextArea.d.ts":"import * as React from \'react\';\\nimport { TextAreaProps as RcTextAreaProps } from \'rc-textarea\';\\nimport ResizableTextArea from \'rc-textarea/lib/ResizableTextArea\';\\nimport { InputFocusOptions } from \'./Input\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ninterface ShowCountProps {\\n    formatter: (args: {\\n        count: number;\\n        maxLength?: number;\\n    }) => string;\\n}\\nexport interface TextAreaProps extends RcTextAreaProps {\\n    allowClear?: boolean;\\n    bordered?: boolean;\\n    showCount?: boolean | ShowCountProps;\\n    size?: SizeType;\\n}\\nexport interface TextAreaRef {\\n    focus: (options?: InputFocusOptions) => void;\\n    blur: () => void;\\n    resizableTextArea?: ResizableTextArea;\\n}\\ndeclare const TextArea: React.ForwardRefExoticComponent<TextAreaProps & React.RefAttributes<TextAreaRef>>;\\nexport default TextArea;\\n","antd/input-number/index.d.ts":"import * as React from \'react\';\\nimport { Omit } from \'../_util/type\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type OmitAttrs = \'defaultValue\' | \'onChange\' | \'size\';\\nexport interface InputNumberProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, OmitAttrs> {\\n    prefixCls?: string;\\n    min?: number;\\n    max?: number;\\n    value?: number;\\n    step?: number | string;\\n    defaultValue?: number;\\n    tabIndex?: number;\\n    onChange?: (value: number | string | undefined | null) => void;\\n    disabled?: boolean;\\n    readOnly?: boolean;\\n    size?: SizeType;\\n    bordered?: boolean;\\n    formatter?: (value: number | string | undefined) => string;\\n    parser?: (displayValue: string | undefined) => number | string;\\n    decimalSeparator?: string;\\n    placeholder?: string;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    name?: string;\\n    id?: string;\\n    precision?: number;\\n    onPressEnter?: React.KeyboardEventHandler<HTMLInputElement>;\\n    onStep?: (value: number, info: {\\n        offset: number;\\n        type: \'up\' | \'down\';\\n    }) => void;\\n}\\ndeclare const InputNumber: React.ForwardRefExoticComponent<InputNumberProps & React.RefAttributes<unknown>>;\\nexport default InputNumber;\\n","antd/input-number/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/layout/index.d.ts":"/// <reference types=\\"react\\" />\\nimport { BasicProps, Content, Footer, Header } from \'./layout\';\\nimport Sider from \'./Sider\';\\nexport { BasicProps as LayoutProps } from \'./layout\';\\nexport { SiderProps } from \'./Sider\';\\ninterface LayoutType extends React.FC<BasicProps> {\\n    Header: typeof Header;\\n    Footer: typeof Footer;\\n    Content: typeof Content;\\n    Sider: typeof Sider;\\n}\\ndeclare const Layout: LayoutType;\\nexport default Layout;\\n","antd/layout/layout.d.ts":"import * as React from \'react\';\\nexport interface GeneratorProps {\\n    suffixCls: string;\\n    tagName: \'header\' | \'footer\' | \'main\' | \'section\';\\n    displayName: string;\\n}\\nexport interface BasicProps extends React.HTMLAttributes<HTMLDivElement> {\\n    prefixCls?: string;\\n    hasSider?: boolean;\\n}\\nexport interface LayoutContextProps {\\n    siderHook: {\\n        addSider: (id: string) => void;\\n        removeSider: (id: string) => void;\\n    };\\n}\\nexport declare const LayoutContext: React.Context<LayoutContextProps>;\\ndeclare const Layout: React.FC<BasicProps>;\\ndeclare const Header: React.FC<BasicProps>;\\ndeclare const Footer: React.FC<BasicProps>;\\ndeclare const Content: React.FC<BasicProps>;\\nexport { Header, Footer, Content };\\nexport default Layout;\\n","antd/layout/Sider.d.ts":"import * as React from \'react\';\\nexport interface SiderContextProps {\\n    siderCollapsed?: boolean;\\n    collapsedWidth?: number | string;\\n}\\nexport declare const SiderContext: React.Context<SiderContextProps>;\\nexport declare type CollapseType = \'clickTrigger\' | \'responsive\';\\nexport declare type SiderTheme = \'light\' | \'dark\';\\nexport interface SiderProps extends React.HTMLAttributes<HTMLDivElement> {\\n    prefixCls?: string;\\n    collapsible?: boolean;\\n    collapsed?: boolean;\\n    defaultCollapsed?: boolean;\\n    reverseArrow?: boolean;\\n    onCollapse?: (collapsed: boolean, type: CollapseType) => void;\\n    zeroWidthTriggerStyle?: React.CSSProperties;\\n    trigger?: React.ReactNode;\\n    width?: number | string;\\n    collapsedWidth?: number | string;\\n    breakpoint?: \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\' | \'xxl\';\\n    theme?: SiderTheme;\\n    onBreakpoint?: (broken: boolean) => void;\\n}\\nexport interface SiderState {\\n    collapsed?: boolean;\\n    below: boolean;\\n}\\ndeclare const Sider: React.FC<SiderProps>;\\nexport default Sider;\\n","antd/layout/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/list/index.d.ts":"import * as React from \'react\';\\nimport { SpinProps } from \'../spin\';\\nimport { PaginationConfig } from \'../pagination\';\\nexport { ListItemProps, ListItemMetaProps } from \'./Item\';\\nexport declare type ColumnCount = number;\\nexport declare type ColumnType = \'gutter\' | \'column\' | \'xs\' | \'sm\' | \'md\' | \'lg\' | \'xl\' | \'xxl\';\\nexport interface ListGridType {\\n    gutter?: number;\\n    column?: ColumnCount;\\n    xs?: ColumnCount;\\n    sm?: ColumnCount;\\n    md?: ColumnCount;\\n    lg?: ColumnCount;\\n    xl?: ColumnCount;\\n    xxl?: ColumnCount;\\n}\\nexport declare type ListSize = \'small\' | \'default\' | \'large\';\\nexport declare type ListItemLayout = \'horizontal\' | \'vertical\';\\nexport interface ListProps<T> {\\n    bordered?: boolean;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    dataSource?: T[];\\n    extra?: React.ReactNode;\\n    grid?: ListGridType;\\n    id?: string;\\n    itemLayout?: ListItemLayout;\\n    loading?: boolean | SpinProps;\\n    loadMore?: React.ReactNode;\\n    pagination?: PaginationConfig | false;\\n    prefixCls?: string;\\n    rowKey?: ((item: T) => string) | string;\\n    renderItem?: (item: T, index: number) => React.ReactNode;\\n    size?: ListSize;\\n    split?: boolean;\\n    header?: React.ReactNode;\\n    footer?: React.ReactNode;\\n    locale?: ListLocale;\\n}\\nexport interface ListLocale {\\n    emptyText: React.ReactNode | (() => React.ReactNode);\\n}\\nexport interface ListConsumerProps {\\n    grid?: any;\\n    itemLayout?: string;\\n}\\nexport declare const ListContext: React.Context<ListConsumerProps>;\\nexport declare const ListConsumer: React.Consumer<ListConsumerProps>;\\ndeclare function List<T>({ pagination, prefixCls: customizePrefixCls, bordered, split, className, children, itemLayout, loadMore, grid, dataSource, size, header, footer, loading, rowKey, renderItem, locale, ...rest }: ListProps<T>): JSX.Element;\\ndeclare namespace List {\\n    var Item: import(\\"./Item\\").ListItemTypeProps;\\n}\\nexport default List;\\n","antd/list/Item.d.ts":"import * as React from \'react\';\\nimport { ListGridType } from \'./index\';\\nexport interface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\\n    className?: string;\\n    children?: React.ReactNode;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    extra?: React.ReactNode;\\n    actions?: React.ReactNode[];\\n    grid?: ListGridType;\\n    colStyle?: React.CSSProperties;\\n}\\nexport interface ListItemMetaProps {\\n    avatar?: React.ReactNode;\\n    className?: string;\\n    children?: React.ReactNode;\\n    description?: React.ReactNode;\\n    prefixCls?: string;\\n    style?: React.CSSProperties;\\n    title?: React.ReactNode;\\n}\\nexport declare const Meta: React.FC<ListItemMetaProps>;\\nexport interface ListItemTypeProps extends React.FC<ListItemProps> {\\n    Meta: typeof Meta;\\n}\\ndeclare const Item: ListItemTypeProps;\\nexport default Item;\\n","antd/list/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../spin/style\';\\nimport \'../../pagination/style\';\\nimport \'../../grid/style\';\\n","antd/locale/ar_EG.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/az_AZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/bg_BG.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/by_BY.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ca_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/cs_CZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/da_DK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/default.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/de_DE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/el_GR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/en_GB.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/en_US.d.ts":"import defaultLocale from \'./default\';\\nexport default defaultLocale;\\n","antd/locale/es_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/et_EE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fa_IR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fi_FI.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fr_BE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/fr_FR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ga_IE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/gl_ES.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/he_IL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hi_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hr_HR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hu_HU.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/hy_AM.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/id_ID.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/is_IS.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/it_IT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ja_JP.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kk_KZ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kmr_IQ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/kn_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ko_KR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ku_IQ.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/lt_LT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/lv_LV.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/mk_MK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/mn_MN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ms_MY.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nb_NO.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ne_NP.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nl_BE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/nl_NL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pl_PL.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pt_BR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/pt_PT.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ro_RO.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ru_RU.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sk_SK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sl_SI.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sr_RS.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/sv_SE.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/ta_IN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/th_TH.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/tr_TR.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/uk_UA.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/vi_VN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_CN.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_HK.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale/zh_TW.d.ts":"import { Locale } from \'../locale-provider\';\\ndeclare const localeValues: Locale;\\nexport default localeValues;\\n","antd/locale-provider/ar_EG.d.ts":"import locale from \'../locale/ar_EG\';\\nexport default locale;\\n","antd/locale-provider/az_AZ.d.ts":"import locale from \'../locale/az_AZ\';\\nexport default locale;\\n","antd/locale-provider/bg_BG.d.ts":"import locale from \'../locale/bg_BG\';\\nexport default locale;\\n","antd/locale-provider/by_BY.d.ts":"import locale from \'../locale/by_BY\';\\nexport default locale;\\n","antd/locale-provider/ca_ES.d.ts":"import locale from \'../locale/ca_ES\';\\nexport default locale;\\n","antd/locale-provider/context.d.ts":"/// <reference types=\\"react\\" />\\nimport { Locale } from \'.\';\\ndeclare const LocaleContext: import(\\"react\\").Context<(Partial<Locale> & {\\n    exist?: boolean | undefined;\\n}) | undefined>;\\nexport default LocaleContext;\\n","antd/locale-provider/cs_CZ.d.ts":"import locale from \'../locale/cs_CZ\';\\nexport default locale;\\n","antd/locale-provider/da_DK.d.ts":"import locale from \'../locale/da_DK\';\\nexport default locale;\\n","antd/locale-provider/default.d.ts":"import locale from \'../locale/default\';\\nexport default locale;\\n","antd/locale-provider/de_DE.d.ts":"import locale from \'../locale/de_DE\';\\nexport default locale;\\n","antd/locale-provider/el_GR.d.ts":"import locale from \'../locale/el_GR\';\\nexport default locale;\\n","antd/locale-provider/en_GB.d.ts":"import locale from \'../locale/en_GB\';\\nexport default locale;\\n","antd/locale-provider/en_US.d.ts":"import locale from \'../locale/en_US\';\\nexport default locale;\\n","antd/locale-provider/es_ES.d.ts":"import locale from \'../locale/es_ES\';\\nexport default locale;\\n","antd/locale-provider/et_EE.d.ts":"import locale from \'../locale/et_EE\';\\nexport default locale;\\n","antd/locale-provider/fa_IR.d.ts":"import locale from \'../locale/fa_IR\';\\nexport default locale;\\n","antd/locale-provider/fi_FI.d.ts":"import locale from \'../locale/fi_FI\';\\nexport default locale;\\n","antd/locale-provider/fr_BE.d.ts":"import locale from \'../locale/fr_BE\';\\nexport default locale;\\n","antd/locale-provider/fr_FR.d.ts":"import locale from \'../locale/fr_FR\';\\nexport default locale;\\n","antd/locale-provider/ga_IE.d.ts":"import locale from \'../locale/ga_IE\';\\nexport default locale;\\n","antd/locale-provider/gl_ES.d.ts":"import locale from \'../locale/gl_ES\';\\nexport default locale;\\n","antd/locale-provider/he_IL.d.ts":"import locale from \'../locale/he_IL\';\\nexport default locale;\\n","antd/locale-provider/hi_IN.d.ts":"import locale from \'../locale/hi_IN\';\\nexport default locale;\\n","antd/locale-provider/hr_HR.d.ts":"import locale from \'../locale/hr_HR\';\\nexport default locale;\\n","antd/locale-provider/hu_HU.d.ts":"import locale from \'../locale/hu_HU\';\\nexport default locale;\\n","antd/locale-provider/hy_AM.d.ts":"import locale from \'../locale/hy_AM\';\\nexport default locale;\\n","antd/locale-provider/id_ID.d.ts":"import locale from \'../locale/id_ID\';\\nexport default locale;\\n","antd/locale-provider/index.d.ts":"import * as React from \'react\';\\nimport { ValidateMessages } from \'rc-field-form/lib/interface\';\\nimport { ModalLocale } from \'../modal/locale\';\\nimport { TransferLocale as TransferLocaleForEmpty } from \'../empty\';\\nimport { PaginationLocale } from \'../pagination/Pagination\';\\nimport { TableLocale } from \'../table/interface\';\\nimport { PopconfirmLocale } from \'../popconfirm\';\\nimport { UploadLocale } from \'../upload/interface\';\\nimport { TransferLocale } from \'../transfer\';\\nimport { PickerLocale as DatePickerLocale } from \'../date-picker/generatePicker\';\\nexport declare const ANT_MARK = \\"internalMark\\";\\nexport interface Locale {\\n    locale: string;\\n    Pagination?: PaginationLocale;\\n    DatePicker?: DatePickerLocale;\\n    TimePicker?: Object;\\n    Calendar?: Object;\\n    Table?: TableLocale;\\n    Modal?: ModalLocale;\\n    Popconfirm?: PopconfirmLocale;\\n    Transfer?: Partial<TransferLocale>;\\n    Select?: Object;\\n    Upload?: UploadLocale;\\n    Empty?: TransferLocaleForEmpty;\\n    global?: Object;\\n    PageHeader?: Object;\\n    Icon?: Object;\\n    Text?: Object;\\n    Form?: {\\n        optional?: string;\\n        defaultValidateMessages: ValidateMessages;\\n    };\\n    Image?: {\\n        preview: string;\\n    };\\n}\\nexport interface LocaleProviderProps {\\n    locale: Locale;\\n    children?: React.ReactNode;\\n    _ANT_MARK__?: string;\\n}\\nexport default class LocaleProvider extends React.Component<LocaleProviderProps, any> {\\n    static defaultProps: {\\n        locale: {};\\n    };\\n    constructor(props: LocaleProviderProps);\\n    componentDidUpdate(prevProps: LocaleProviderProps): void;\\n    componentWillUnmount(): void;\\n    render(): JSX.Element;\\n}\\n","antd/locale-provider/is_IS.d.ts":"import locale from \'../locale/is_IS\';\\nexport default locale;\\n","antd/locale-provider/it_IT.d.ts":"import locale from \'../locale/it_IT\';\\nexport default locale;\\n","antd/locale-provider/ja_JP.d.ts":"import locale from \'../locale/ja_JP\';\\nexport default locale;\\n","antd/locale-provider/kk_KZ.d.ts":"import locale from \'../locale/kk_KZ\';\\nexport default locale;\\n","antd/locale-provider/kmr_IQ.d.ts":"import locale from \'../locale/kmr_IQ\';\\nexport default locale;\\n","antd/locale-provider/kn_IN.d.ts":"import locale from \'../locale/kn_IN\';\\nexport default locale;\\n","antd/locale-provider/ko_KR.d.ts":"import locale from \'../locale/ko_KR\';\\nexport default locale;\\n","antd/locale-provider/ku_IQ.d.ts":"import locale from \'../locale/ku_IQ\';\\nexport default locale;\\n","antd/locale-provider/LocaleReceiver.d.ts":"import * as React from \'react\';\\nimport { Locale } from \'.\';\\nexport interface LocaleReceiverProps {\\n    componentName?: string;\\n    defaultLocale?: object | Function;\\n    children: (locale: object, localeCode?: string, fullLocale?: object) => React.ReactNode;\\n}\\ninterface LocaleInterface {\\n    [key: string]: any;\\n}\\nexport interface LocaleReceiverContext {\\n    antLocale?: LocaleInterface;\\n}\\nexport default class LocaleReceiver extends React.Component<LocaleReceiverProps> {\\n    static defaultProps: {\\n        componentName: string;\\n    };\\n    static contextType: React.Context<(Partial<Locale> & {\\n        exist?: boolean | undefined;\\n    }) | undefined>;\\n    getLocale(): any;\\n    getLocaleCode(): any;\\n    render(): React.ReactNode;\\n}\\ndeclare type LocaleComponent = keyof Locale;\\nexport declare function useLocaleReceiver<T extends LocaleComponent>(componentName: T, defaultLocale?: Locale[T] | Function): [Locale[T]];\\nexport {};\\n","antd/locale-provider/lt_LT.d.ts":"import locale from \'../locale/lt_LT\';\\nexport default locale;\\n","antd/locale-provider/lv_LV.d.ts":"import locale from \'../locale/lv_LV\';\\nexport default locale;\\n","antd/locale-provider/mk_MK.d.ts":"import locale from \'../locale/mk_MK\';\\nexport default locale;\\n","antd/locale-provider/mn_MN.d.ts":"import locale from \'../locale/mn_MN\';\\nexport default locale;\\n","antd/locale-provider/ms_MY.d.ts":"import locale from \'../locale/ms_MY\';\\nexport default locale;\\n","antd/locale-provider/nb_NO.d.ts":"import locale from \'../locale/nb_NO\';\\nexport default locale;\\n","antd/locale-provider/ne_NP.d.ts":"import locale from \'../locale/ne_NP\';\\nexport default locale;\\n","antd/locale-provider/nl_BE.d.ts":"import locale from \'../locale/nl_BE\';\\nexport default locale;\\n","antd/locale-provider/nl_NL.d.ts":"import locale from \'../locale/nl_NL\';\\nexport default locale;\\n","antd/locale-provider/pl_PL.d.ts":"import locale from \'../locale/pl_PL\';\\nexport default locale;\\n","antd/locale-provider/pt_BR.d.ts":"import locale from \'../locale/pt_BR\';\\nexport default locale;\\n","antd/locale-provider/pt_PT.d.ts":"import locale from \'../locale/pt_PT\';\\nexport default locale;\\n","antd/locale-provider/ro_RO.d.ts":"import locale from \'../locale/ro_RO\';\\nexport default locale;\\n","antd/locale-provider/ru_RU.d.ts":"import locale from \'../locale/ru_RU\';\\nexport default locale;\\n","antd/locale-provider/sk_SK.d.ts":"import locale from \'../locale/sk_SK\';\\nexport default locale;\\n","antd/locale-provider/sl_SI.d.ts":"import locale from \'../locale/sl_SI\';\\nexport default locale;\\n","antd/locale-provider/sr_RS.d.ts":"import locale from \'../locale/sr_RS\';\\nexport default locale;\\n","antd/locale-provider/style/index.d.ts":"import \'./index.less\';\\n","antd/locale-provider/sv_SE.d.ts":"import locale from \'../locale/sv_SE\';\\nexport default locale;\\n","antd/locale-provider/ta_IN.d.ts":"import locale from \'../locale/ta_IN\';\\nexport default locale;\\n","antd/locale-provider/th_TH.d.ts":"import locale from \'../locale/th_TH\';\\nexport default locale;\\n","antd/locale-provider/tr_TR.d.ts":"import locale from \'../locale/tr_TR\';\\nexport default locale;\\n","antd/locale-provider/uk_UA.d.ts":"import locale from \'../locale/uk_UA\';\\nexport default locale;\\n","antd/locale-provider/vi_VN.d.ts":"import locale from \'../locale/vi_VN\';\\nexport default locale;\\n","antd/locale-provider/zh_CN.d.ts":"import locale from \'../locale/zh_CN\';\\nexport default locale;\\n","antd/locale-provider/zh_HK.d.ts":"import locale from \'../locale/zh_HK\';\\nexport default locale;\\n","antd/locale-provider/zh_TW.d.ts":"import locale from \'../locale/zh_TW\';\\nexport default locale;\\n","antd/mentions/index.d.ts":"import * as React from \'react\';\\nimport { MentionsProps as RcMentionsProps } from \'rc-mentions/lib/Mentions\';\\nexport declare const Option: React.SFC<import(\\"rc-mentions/lib/Option\\").OptionProps>;\\nexport declare type MentionPlacement = \'top\' | \'bottom\';\\nexport interface OptionProps {\\n    value: string;\\n    children: React.ReactNode;\\n    [key: string]: any;\\n}\\nexport interface MentionProps extends RcMentionsProps {\\n    loading?: boolean;\\n}\\nexport interface MentionState {\\n    focused: boolean;\\n}\\ninterface MentionsConfig {\\n    prefix?: string | string[];\\n    split?: string;\\n}\\ninterface MentionsEntity {\\n    prefix: string;\\n    value: string;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<MentionProps & React.RefAttributes<HTMLElement>> {\\n    Option: typeof Option;\\n    getMentions: (value: string, config?: MentionsConfig) => MentionsEntity[];\\n}\\ndeclare const Mentions: CompoundedComponent;\\nexport default Mentions;\\n","antd/mentions/style/index.d.ts":"import \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../spin/style\';\\n","antd/menu/index.d.ts":"import * as React from \'react\';\\nimport { ItemGroup, MenuProps as RcMenuProps } from \'rc-menu\';\\nimport SubMenu, { SubMenuProps } from \'./SubMenu\';\\nimport Item, { MenuItemProps } from \'./MenuItem\';\\nimport { MenuTheme } from \'./MenuContext\';\\nexport { MenuItemGroupProps } from \'rc-menu\';\\nexport declare type MenuMode = \'vertical\' | \'vertical-left\' | \'vertical-right\' | \'horizontal\' | \'inline\';\\nexport interface MenuProps extends RcMenuProps {\\n    theme?: MenuTheme;\\n    inlineIndent?: number;\\n    focusable?: boolean;\\n}\\ndeclare class Menu extends React.Component<MenuProps, {}> {\\n    static Divider: React.FC<import(\\"rc-menu/lib/Divider\\").DividerProps>;\\n    static Item: typeof Item;\\n    static SubMenu: typeof SubMenu;\\n    static ItemGroup: typeof ItemGroup;\\n    render(): JSX.Element;\\n}\\nexport { MenuTheme, SubMenuProps, MenuItemProps };\\nexport default Menu;\\n","antd/menu/MenuContext.d.ts":"/// <reference types=\\"react\\" />\\nimport { DirectionType } from \'../config-provider\';\\nexport declare type MenuTheme = \'light\' | \'dark\';\\nexport interface MenuContextProps {\\n    inlineCollapsed: boolean;\\n    antdMenuTheme?: MenuTheme;\\n    direction?: DirectionType;\\n}\\ndeclare const MenuContext: import(\\"react\\").Context<MenuContextProps>;\\nexport default MenuContext;\\n","antd/menu/MenuItem.d.ts":"import * as React from \'react\';\\nimport { MenuItemProps as RcMenuItemProps } from \'rc-menu\';\\nimport { SiderContextProps } from \'../layout/Sider\';\\nexport interface MenuItemProps extends Omit<RcMenuItemProps, \'title\'> {\\n    icon?: React.ReactNode;\\n    danger?: boolean;\\n    title?: React.ReactNode;\\n}\\nexport default class MenuItem extends React.Component<MenuItemProps> {\\n    static isMenuItem: boolean;\\n    renderItemChildren(inlineCollapsed: boolean): {} | null | undefined;\\n    renderItem: ({ siderCollapsed }: SiderContextProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\n","antd/menu/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/menu/SubMenu.d.ts":"import * as React from \'react\';\\nimport { MenuContextProps } from \'./MenuContext\';\\ninterface TitleEventEntity {\\n    key: string;\\n    domEvent: Event;\\n}\\nexport interface SubMenuProps {\\n    rootPrefixCls?: string;\\n    className?: string;\\n    disabled?: boolean;\\n    level?: number;\\n    title?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    onTitleClick?: (e: TitleEventEntity) => void;\\n    onTitleMouseEnter?: (e: TitleEventEntity) => void;\\n    onTitleMouseLeave?: (e: TitleEventEntity) => void;\\n    popupOffset?: [number, number];\\n    popupClassName?: string;\\n}\\ndeclare class SubMenu extends React.Component<SubMenuProps, any> {\\n    static contextType: React.Context<MenuContextProps>;\\n    static isSubMenu: number;\\n    renderTitle(inlineCollapsed: boolean): {} | null | undefined;\\n    render(): JSX.Element;\\n}\\nexport default SubMenu;\\n","antd/message/hooks/useMessage.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance, NoticeContent as RCNoticeContent } from \'rc-notification/lib/Notification\';\\nimport { MessageInstance, ArgsProps } from \'..\';\\nexport default function createUseMessage(getRcNotificationInstance: (args: ArgsProps, callback: (info: {\\n    prefixCls: string;\\n    instance: RCNotificationInstance;\\n}) => void) => void, getRCNoticeProps: (args: ArgsProps, prefixCls: string) => RCNoticeContent): () => [MessageInstance, React.ReactElement];\\n","antd/message/index.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance } from \'rc-notification/lib/Notification\';\\ndeclare type NoticeType = \'info\' | \'success\' | \'error\' | \'warning\' | \'loading\';\\nexport declare function getKeyThenIncreaseKey(): number;\\nexport interface ConfigOptions {\\n    top?: number;\\n    duration?: number;\\n    prefixCls?: string;\\n    getContainer?: () => HTMLElement;\\n    transitionName?: string;\\n    maxCount?: number;\\n    rtl?: boolean;\\n}\\nexport interface ThenableArgument {\\n    (val: any): void;\\n}\\nexport interface MessageType extends PromiseLike<any> {\\n    (): void;\\n}\\nexport interface ArgsProps {\\n    content: React.ReactNode;\\n    duration: number | null;\\n    type: NoticeType;\\n    prefixCls?: string;\\n    onClose?: () => void;\\n    icon?: React.ReactNode;\\n    key?: string | number;\\n    style?: React.CSSProperties;\\n    className?: string;\\n    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\\n}\\ndeclare type ConfigContent = React.ReactNode | string;\\ndeclare type ConfigDuration = number | (() => void);\\ndeclare type JointContent = ConfigContent | ArgsProps;\\nexport declare type ConfigOnClose = () => void;\\nexport declare function attachTypeApi(originalApi: any, type: string): void;\\nexport interface MessageInstance {\\n    info(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    success(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    error(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    warning(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    loading(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    open(args: ArgsProps): MessageType;\\n}\\nexport interface MessageApi extends MessageInstance {\\n    warn(content: JointContent, duration?: ConfigDuration, onClose?: ConfigOnClose): MessageType;\\n    config(options: ConfigOptions): void;\\n    destroy(messageKey?: React.Key): void;\\n    useMessage(): [MessageInstance, React.ReactElement];\\n}\\n/** @private test only function. Not work on production */\\nexport declare const getInstance: () => RCNotificationInstance | null;\\ndeclare const _default: MessageApi;\\nexport default _default;\\n","antd/message/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/modal/ActionButton.d.ts":"import * as React from \'react\';\\nimport { LegacyButtonType, ButtonProps } from \'../button/button\';\\nexport interface ActionButtonProps {\\n    type?: LegacyButtonType;\\n    actionFn?: (...args: any[]) => any | PromiseLike<any>;\\n    closeModal: Function;\\n    autoFocus?: boolean;\\n    prefixCls: string;\\n    buttonProps?: ButtonProps;\\n}\\ndeclare const ActionButton: React.FC<ActionButtonProps>;\\nexport default ActionButton;\\n","antd/modal/confirm.d.ts":"import { ModalFuncProps } from \'./Modal\';\\ndeclare type ConfigUpdate = ModalFuncProps | ((prevConfig: ModalFuncProps) => ModalFuncProps);\\nexport declare type ModalFunc = (props: ModalFuncProps) => {\\n    destroy: () => void;\\n    update: (configUpdate: ConfigUpdate) => void;\\n};\\nexport declare type ModalStaticFunctions = Record<NonNullable<ModalFuncProps[\'type\']>, ModalFunc>;\\nexport default function confirm(config: ModalFuncProps): {\\n    destroy: (...args: any[]) => void;\\n    update: (configUpdate: ConfigUpdate) => void;\\n};\\nexport declare function withWarn(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withInfo(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withSuccess(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withError(props: ModalFuncProps): ModalFuncProps;\\nexport declare function withConfirm(props: ModalFuncProps): ModalFuncProps;\\nexport declare function globalConfig({ rootPrefixCls }: {\\n    rootPrefixCls?: string;\\n}): void;\\nexport {};\\n","antd/modal/ConfirmDialog.d.ts":"/// <reference types=\\"react\\" />\\nimport { ModalFuncProps } from \'./Modal\';\\ninterface ConfirmDialogProps extends ModalFuncProps {\\n    afterClose?: () => void;\\n    close: (...args: any[]) => void;\\n    autoFocusButton?: null | \'ok\' | \'cancel\';\\n    rootPrefixCls?: string;\\n}\\ndeclare const ConfirmDialog: (props: ConfirmDialogProps) => JSX.Element;\\nexport default ConfirmDialog;\\n","antd/modal/index.d.ts":"import OriginModal from \'./Modal\';\\nimport { ModalStaticFunctions, globalConfig } from \'./confirm\';\\nexport { ActionButtonProps } from \'./ActionButton\';\\nexport { ModalProps, ModalFuncProps } from \'./Modal\';\\ndeclare type ModalType = typeof OriginModal & ModalStaticFunctions & {\\n    destroyAll: () => void;\\n    config: typeof globalConfig;\\n};\\ndeclare const Modal: ModalType;\\nexport default Modal;\\n","antd/modal/locale.d.ts":"export interface ModalLocale {\\n    okText: string;\\n    cancelText: string;\\n    justOkText: string;\\n}\\nexport declare function changeConfirmLocale(newLocale?: ModalLocale): void;\\nexport declare function getConfirmLocale(): ModalLocale;\\n","antd/modal/Modal.d.ts":"import * as React from \'react\';\\nimport useModal from \'./useModal\';\\nimport { LegacyButtonType, ButtonProps } from \'../button/button\';\\nimport { DirectionType } from \'../config-provider\';\\nexport declare const destroyFns: Array<() => void>;\\nexport interface ModalProps {\\n    /** \u5bf9\u8bdd\u6846\u662f\u5426\u53ef\u89c1 */\\n    visible?: boolean;\\n    /** \u786e\u5b9a\u6309\u94ae loading */\\n    confirmLoading?: boolean;\\n    /** \u6807\u9898 */\\n    title?: React.ReactNode | string;\\n    /** \u662f\u5426\u663e\u793a\u53f3\u4e0a\u89d2\u7684\u5173\u95ed\u6309\u94ae */\\n    closable?: boolean;\\n    /** \u70b9\u51fb\u786e\u5b9a\u56de\u8c03 */\\n    onOk?: (e: React.MouseEvent<HTMLElement>) => void;\\n    /** \u70b9\u51fb\u6a21\u6001\u6846\u53f3\u4e0a\u89d2\u53c9\u3001\u53d6\u6d88\u6309\u94ae\u3001Props.maskClosable \u503c\u4e3a true \u65f6\u7684\u906e\u7f69\u5c42\u6216\u952e\u76d8\u6309\u4e0b Esc \u65f6\u7684\u56de\u8c03 */\\n    onCancel?: (e: React.MouseEvent<HTMLElement>) => void;\\n    afterClose?: () => void;\\n    /** \u5782\u76f4\u5c45\u4e2d */\\n    centered?: boolean;\\n    /** \u5bbd\u5ea6 */\\n    width?: string | number;\\n    /** \u5e95\u90e8\u5185\u5bb9 */\\n    footer?: React.ReactNode;\\n    /** \u786e\u8ba4\u6309\u94ae\u6587\u5b57 */\\n    okText?: React.ReactNode;\\n    /** \u786e\u8ba4\u6309\u94ae\u7c7b\u578b */\\n    okType?: LegacyButtonType;\\n    /** \u53d6\u6d88\u6309\u94ae\u6587\u5b57 */\\n    cancelText?: React.ReactNode;\\n    /** \u70b9\u51fb\u8499\u5c42\u662f\u5426\u5141\u8bb8\u5173\u95ed */\\n    maskClosable?: boolean;\\n    /** \u5f3a\u5236\u6e32\u67d3 Modal */\\n    forceRender?: boolean;\\n    okButtonProps?: ButtonProps;\\n    cancelButtonProps?: ButtonProps;\\n    destroyOnClose?: boolean;\\n    style?: React.CSSProperties;\\n    wrapClassName?: string;\\n    maskTransitionName?: string;\\n    transitionName?: string;\\n    className?: string;\\n    getContainer?: string | HTMLElement | getContainerFunc | false | null;\\n    zIndex?: number;\\n    bodyStyle?: React.CSSProperties;\\n    maskStyle?: React.CSSProperties;\\n    mask?: boolean;\\n    keyboard?: boolean;\\n    wrapProps?: any;\\n    prefixCls?: string;\\n    closeIcon?: React.ReactNode;\\n    modalRender?: (node: React.ReactNode) => React.ReactNode;\\n    focusTriggerAfterClose?: boolean;\\n}\\ndeclare type getContainerFunc = () => HTMLElement;\\nexport interface ModalFuncProps {\\n    prefixCls?: string;\\n    className?: string;\\n    visible?: boolean;\\n    title?: React.ReactNode;\\n    closable?: boolean;\\n    content?: React.ReactNode;\\n    onOk?: (...args: any[]) => any;\\n    onCancel?: (...args: any[]) => any;\\n    afterClose?: () => void;\\n    okButtonProps?: ButtonProps;\\n    cancelButtonProps?: ButtonProps;\\n    centered?: boolean;\\n    width?: string | number;\\n    okText?: React.ReactNode;\\n    okType?: LegacyButtonType;\\n    cancelText?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    mask?: boolean;\\n    maskClosable?: boolean;\\n    zIndex?: number;\\n    okCancel?: boolean;\\n    style?: React.CSSProperties;\\n    maskStyle?: React.CSSProperties;\\n    type?: \'info\' | \'success\' | \'error\' | \'warn\' | \'warning\' | \'confirm\';\\n    keyboard?: boolean;\\n    getContainer?: string | HTMLElement | getContainerFunc | false | null;\\n    autoFocusButton?: null | \'ok\' | \'cancel\';\\n    transitionName?: string;\\n    maskTransitionName?: string;\\n    direction?: DirectionType;\\n    bodyStyle?: React.CSSProperties;\\n    closeIcon?: React.ReactNode;\\n    modalRender?: (node: React.ReactNode) => React.ReactNode;\\n    focusTriggerAfterClose?: boolean;\\n}\\nexport interface ModalLocale {\\n    okText: string;\\n    cancelText: string;\\n    justOkText: string;\\n}\\ninterface ModalInterface extends React.FC<ModalProps> {\\n    useModal: typeof useModal;\\n}\\ndeclare const Modal: ModalInterface;\\nexport default Modal;\\n","antd/modal/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\n","antd/modal/useModal/HookModal.d.ts":"import * as React from \'react\';\\nimport { ModalFuncProps } from \'../Modal\';\\nexport interface HookModalProps {\\n    afterClose: () => void;\\n    config: ModalFuncProps;\\n}\\nexport interface HookModalRef {\\n    destroy: () => void;\\n    update: (config: ModalFuncProps) => void;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<HookModalProps & React.RefAttributes<HookModalRef>>;\\nexport default _default;\\n","antd/modal/useModal/index.d.ts":"import * as React from \'react\';\\nimport { ModalStaticFunctions } from \'../confirm\';\\nexport default function useModal(): [Omit<ModalStaticFunctions, \'warn\'>, React.ReactElement];\\n","antd/notification/hooks/useNotification.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance, NoticeContent as RCNoticeContent } from \'rc-notification/lib/Notification\';\\nimport { NotificationInstance, ArgsProps } from \'..\';\\nexport default function createUseNotification(getNotificationInstance: (args: ArgsProps, callback: (info: {\\n    prefixCls: string;\\n    instance: RCNotificationInstance;\\n}) => void) => void, getRCNoticeProps: (args: ArgsProps, prefixCls: string) => RCNoticeContent): () => [NotificationInstance, React.ReactElement];\\n","antd/notification/index.d.ts":"import * as React from \'react\';\\nimport { NotificationInstance as RCNotificationInstance } from \'rc-notification/lib/Notification\';\\nexport declare type NotificationPlacement = \'topLeft\' | \'topRight\' | \'bottomLeft\' | \'bottomRight\';\\nexport declare type IconType = \'success\' | \'info\' | \'error\' | \'warning\';\\nexport interface ConfigProps {\\n    top?: number;\\n    bottom?: number;\\n    duration?: number;\\n    prefixCls?: string;\\n    placement?: NotificationPlacement;\\n    getContainer?: () => HTMLElement;\\n    closeIcon?: React.ReactNode;\\n    rtl?: boolean;\\n}\\nexport interface ArgsProps {\\n    message: React.ReactNode;\\n    description?: React.ReactNode;\\n    btn?: React.ReactNode;\\n    key?: string;\\n    onClose?: () => void;\\n    duration?: number | null;\\n    icon?: React.ReactNode;\\n    placement?: NotificationPlacement;\\n    style?: React.CSSProperties;\\n    prefixCls?: string;\\n    className?: string;\\n    readonly type?: IconType;\\n    onClick?: () => void;\\n    top?: number;\\n    bottom?: number;\\n    getContainer?: () => HTMLElement;\\n    closeIcon?: React.ReactNode;\\n}\\nexport interface NotificationInstance {\\n    success(args: ArgsProps): void;\\n    error(args: ArgsProps): void;\\n    info(args: ArgsProps): void;\\n    warning(args: ArgsProps): void;\\n    open(args: ArgsProps): void;\\n}\\nexport interface NotificationApi extends NotificationInstance {\\n    warn(args: ArgsProps): void;\\n    close(key: string): void;\\n    config(options: ConfigProps): void;\\n    destroy(): void;\\n    useNotification: () => [NotificationInstance, React.ReactElement];\\n}\\n/** @private test only function. Not work on production */\\nexport declare const getInstance: (cacheKey: string) => Promise<RCNotificationInstance | null>;\\ndeclare const _default: NotificationApi;\\nexport default _default;\\n","antd/notification/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/page-header/index.d.ts":"import * as React from \'react\';\\nimport { TagType } from \'../tag\';\\nimport { BreadcrumbProps } from \'../breadcrumb\';\\nimport { AvatarProps } from \'../avatar\';\\nexport interface PageHeaderProps {\\n    backIcon?: React.ReactNode;\\n    prefixCls?: string;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    breadcrumb?: BreadcrumbProps;\\n    breadcrumbRender?: (props: PageHeaderProps, defaultDom: React.ReactNode) => React.ReactNode;\\n    tags?: React.ReactElement<TagType> | React.ReactElement<TagType>[];\\n    footer?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    avatar?: AvatarProps;\\n    onBack?: (e: React.MouseEvent<HTMLDivElement>) => void;\\n    className?: string;\\n    ghost?: boolean;\\n}\\ndeclare const PageHeader: React.FC<PageHeaderProps>;\\nexport default PageHeader;\\n","antd/page-header/style/index.d.ts":"import \'./index.less\';\\nimport \'../../breadcrumb/style\';\\nimport \'../../avatar/style\';\\n","antd/pagination/index.d.ts":"import Pagination from \'./Pagination\';\\nexport { PaginationProps, PaginationConfig } from \'./Pagination\';\\nexport default Pagination;\\n","antd/pagination/MiniSelect.d.ts":"import * as React from \'react\';\\nimport Select from \'../select\';\\ninterface MiniSelectInterface extends React.FC<any> {\\n    Option: typeof Select.Option;\\n}\\ndeclare const MiniSelect: MiniSelectInterface;\\nexport default MiniSelect;\\n","antd/pagination/Pagination.d.ts":"import * as React from \'react\';\\nexport interface PaginationProps {\\n    total?: number;\\n    defaultCurrent?: number;\\n    disabled?: boolean;\\n    current?: number;\\n    defaultPageSize?: number;\\n    pageSize?: number;\\n    onChange?: (page: number, pageSize?: number) => void;\\n    hideOnSinglePage?: boolean;\\n    showSizeChanger?: boolean;\\n    pageSizeOptions?: string[];\\n    onShowSizeChange?: (current: number, size: number) => void;\\n    showQuickJumper?: boolean | {\\n        goButton?: React.ReactNode;\\n    };\\n    showTitle?: boolean;\\n    showTotal?: (total: number, range: [number, number]) => React.ReactNode;\\n    size?: \'default\' | \'small\';\\n    responsive?: boolean;\\n    simple?: boolean;\\n    style?: React.CSSProperties;\\n    locale?: Object;\\n    className?: string;\\n    prefixCls?: string;\\n    selectPrefixCls?: string;\\n    itemRender?: (page: number, type: \'page\' | \'prev\' | \'next\' | \'jump-prev\' | \'jump-next\', originalElement: React.ReactElement<HTMLElement>) => React.ReactNode;\\n    role?: string;\\n    showLessItems?: boolean;\\n}\\nexport declare type PaginationPosition = \'top\' | \'bottom\' | \'both\';\\nexport interface PaginationConfig extends PaginationProps {\\n    position?: PaginationPosition;\\n}\\nexport declare type PaginationLocale = any;\\ndeclare const Pagination: React.FC<PaginationProps>;\\nexport default Pagination;\\n","antd/pagination/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\n","antd/popconfirm/index.d.ts":"import * as React from \'react\';\\nimport { AbstractTooltipProps } from \'../tooltip\';\\nimport { LegacyButtonType, NativeButtonProps } from \'../button/button\';\\nimport { RenderFunction } from \'../_util/getRenderPropValue\';\\nexport interface PopconfirmProps extends AbstractTooltipProps {\\n    title: React.ReactNode | RenderFunction;\\n    disabled?: boolean;\\n    onConfirm?: (e?: React.MouseEvent<HTMLElement>) => void;\\n    onCancel?: (e?: React.MouseEvent<HTMLElement>) => void;\\n    okText?: React.ReactNode;\\n    okType?: LegacyButtonType;\\n    cancelText?: React.ReactNode;\\n    okButtonProps?: NativeButtonProps;\\n    cancelButtonProps?: NativeButtonProps;\\n    icon?: React.ReactNode;\\n    onVisibleChange?: (visible: boolean, e?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLDivElement>) => void;\\n}\\nexport interface PopconfirmState {\\n    visible?: boolean;\\n}\\nexport interface PopconfirmLocale {\\n    okText: string;\\n    cancelText: string;\\n}\\ndeclare const Popconfirm: React.ForwardRefExoticComponent<PopconfirmProps & React.RefAttributes<unknown>>;\\nexport default Popconfirm;\\n","antd/popconfirm/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../popover/style\';\\nimport \'../../button/style\';\\nimport \'./index.less\';\\n","antd/popover/index.d.ts":"import * as React from \'react\';\\nimport { AbstractTooltipProps } from \'../tooltip\';\\nimport { RenderFunction } from \'../_util/getRenderPropValue\';\\nexport interface PopoverProps extends AbstractTooltipProps {\\n    title?: React.ReactNode | RenderFunction;\\n    content?: React.ReactNode | RenderFunction;\\n}\\ndeclare const Popover: React.ForwardRefExoticComponent<PopoverProps & React.RefAttributes<unknown>>;\\nexport default Popover;\\n","antd/popover/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/progress/Circle.d.ts":"import * as React from \'react\';\\nimport { ProgressProps } from \'./progress\';\\ninterface CircleProps extends ProgressProps {\\n    prefixCls: string;\\n    children: React.ReactNode;\\n    progressStatus: string;\\n}\\ndeclare const Circle: React.FC<CircleProps>;\\nexport default Circle;\\n","antd/progress/index.d.ts":"import Progress from \'./progress\';\\nexport { ProgressProps } from \'./progress\';\\nexport default Progress;\\n","antd/progress/Line.d.ts":"import * as React from \'react\';\\nimport { ProgressGradient, ProgressProps, StringGradients } from \'./progress\';\\nimport { DirectionType } from \'../config-provider\';\\ninterface LineProps extends ProgressProps {\\n    prefixCls: string;\\n    direction?: DirectionType;\\n    children: React.ReactNode;\\n}\\n/**\\n * @example\\n *   {\\n *     \\"0%\\": \\"#afc163\\",\\n *     \\"75%\\": \\"#009900\\",\\n *     \\"50%\\": \\"green\\", // ====> \'#afc163 0%, #66FF00 25%, #00CC00 50%, #009900 75%, #ffffff 100%\'\\n *     \\"25%\\": \\"#66FF00\\",\\n *     \\"100%\\": \\"#ffffff\\"\\n *   }\\n */\\nexport declare const sortGradient: (gradients: StringGradients) => string;\\n/**\\n * Then this man came to realize the truth: Besides six pence, there is the moon. Besides bread and\\n * butter, there is the bug. And... Besides women, there is the code.\\n *\\n * @example\\n *   {\\n *     \\"0%\\": \\"#afc163\\",\\n *     \\"25%\\": \\"#66FF00\\",\\n *     \\"50%\\": \\"#00CC00\\", // ====>  linear-gradient(to right, #afc163 0%, #66FF00 25%,\\n *     \\"75%\\": \\"#009900\\", //        #00CC00 50%, #009900 75%, #ffffff 100%)\\n *     \\"100%\\": \\"#ffffff\\"\\n *   }\\n */\\nexport declare const handleGradient: (strokeColor: ProgressGradient, directionConfig: DirectionType) => {\\n    backgroundImage: string;\\n};\\ndeclare const Line: React.FC<LineProps>;\\nexport default Line;\\n","antd/progress/progress.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\ndeclare const ProgressTypes: [\\"line\\", \\"circle\\", \\"dashboard\\"];\\nexport declare type ProgressType = typeof ProgressTypes[number];\\ndeclare const ProgressStatuses: [\\"normal\\", \\"exception\\", \\"active\\", \\"success\\"];\\nexport declare type ProgressSize = \'default\' | \'small\';\\nexport declare type StringGradients = {\\n    [percentage: string]: string;\\n};\\ndeclare type FromToGradients = {\\n    from: string;\\n    to: string;\\n};\\nexport declare type ProgressGradient = {\\n    direction?: string;\\n} & (StringGradients | FromToGradients);\\nexport interface SuccessProps {\\n    percent?: number;\\n    /** @deprecated Use `percent` instead */\\n    progress?: number;\\n    strokeColor?: string;\\n}\\nexport interface ProgressProps {\\n    prefixCls?: string;\\n    className?: string;\\n    type?: ProgressType;\\n    percent?: number;\\n    format?: (percent?: number, successPercent?: number) => React.ReactNode;\\n    status?: typeof ProgressStatuses[number];\\n    showInfo?: boolean;\\n    strokeWidth?: number;\\n    strokeLinecap?: \'butt\' | \'square\' | \'round\';\\n    strokeColor?: string | ProgressGradient;\\n    trailColor?: string;\\n    width?: number;\\n    success?: SuccessProps;\\n    style?: React.CSSProperties;\\n    gapDegree?: number;\\n    gapPosition?: \'top\' | \'bottom\' | \'left\' | \'right\';\\n    size?: ProgressSize;\\n    steps?: number;\\n    /** @deprecated Use `success` instead */\\n    successPercent?: number;\\n}\\nexport default class Progress extends React.Component<ProgressProps> {\\n    static defaultProps: {\\n        type: \\"circle\\" | \\"line\\" | \\"dashboard\\" | undefined;\\n        percent: number;\\n        showInfo: boolean;\\n        trailColor: null;\\n        size: \\"small\\" | \\"default\\" | undefined;\\n        gapDegree: undefined;\\n        strokeLinecap: \\"round\\" | \\"butt\\" | \\"square\\" | undefined;\\n    };\\n    getPercentNumber(): number;\\n    getProgressStatus(): \\"success\\" | \\"normal\\" | \\"active\\" | \\"exception\\";\\n    renderProcessInfo(prefixCls: string, progressStatus: typeof ProgressStatuses[number]): JSX.Element | null;\\n    renderProgress: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport {};\\n","antd/progress/Steps.d.ts":"import * as React from \'react\';\\nimport { ProgressProps, ProgressSize } from \'./progress\';\\ninterface StepsProps extends ProgressProps {\\n    steps: number;\\n    size?: ProgressSize;\\n    strokeColor?: string;\\n    trailColor?: string;\\n}\\ndeclare const Steps: React.FC<StepsProps>;\\nexport default Steps;\\n","antd/progress/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/progress/utils.d.ts":"export declare function validProgress(progress: number | undefined): number;\\nexport declare function getSuccessPercent({ success, successPercent, }: {\\n    success?: {\\n        progress?: number;\\n        percent?: number;\\n    };\\n    successPercent?: number;\\n}): number | undefined;\\n","antd/radio/context.d.ts":"import * as React from \'react\';\\nimport { RadioGroupContextProps } from \'./interface\';\\ndeclare const RadioGroupContext: React.Context<RadioGroupContextProps | null>;\\nexport declare const RadioGroupContextProvider: React.Provider<RadioGroupContextProps | null>;\\nexport default RadioGroupContext;\\n","antd/radio/group.d.ts":"import * as React from \'react\';\\nimport { RadioGroupProps } from \'./interface\';\\ndeclare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<RadioGroupProps & React.RefAttributes<HTMLDivElement>>>;\\nexport default _default;\\n","antd/radio/index.d.ts":"import * as React from \'react\';\\nimport Group from \'./group\';\\nimport Button from \'./radioButton\';\\nimport { RadioProps } from \'./interface\';\\nexport { RadioGroupButtonStyle, RadioGroupOptionType, RadioGroupProps, RadioGroupContextProps, RadioProps, RadioChangeEventTarget, RadioChangeEvent, } from \'./interface\';\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<RadioProps & React.RefAttributes<HTMLElement>> {\\n    Group: typeof Group;\\n    Button: typeof Button;\\n}\\ndeclare const Radio: CompoundedComponent;\\nexport { Button, Group };\\nexport default Radio;\\n","antd/radio/interface.d.ts":"import * as React from \'react\';\\nimport { AbstractCheckboxGroupProps } from \'../checkbox/Group\';\\nimport { AbstractCheckboxProps } from \'../checkbox/Checkbox\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type RadioGroupButtonStyle = \'outline\' | \'solid\';\\nexport declare type RadioGroupOptionType = \'default\' | \'button\';\\nexport interface RadioGroupProps extends AbstractCheckboxGroupProps {\\n    defaultValue?: any;\\n    value?: any;\\n    onChange?: (e: RadioChangeEvent) => void;\\n    size?: SizeType;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n    name?: string;\\n    children?: React.ReactNode;\\n    id?: string;\\n    optionType?: RadioGroupOptionType;\\n    buttonStyle?: RadioGroupButtonStyle;\\n}\\nexport interface RadioGroupContextProps {\\n    onChange: (e: RadioChangeEvent) => void;\\n    value: any;\\n    disabled?: boolean;\\n    name?: string;\\n}\\nexport declare type RadioProps = AbstractCheckboxProps<RadioChangeEvent>;\\nexport interface RadioChangeEventTarget extends RadioProps {\\n    checked: boolean;\\n}\\nexport interface RadioChangeEvent {\\n    target: RadioChangeEventTarget;\\n    stopPropagation: () => void;\\n    preventDefault: () => void;\\n    nativeEvent: MouseEvent;\\n}\\n","antd/radio/radio.d.ts":"import * as React from \'react\';\\nimport { RadioProps } from \'./interface\';\\ndeclare const Radio: React.ForwardRefExoticComponent<RadioProps & React.RefAttributes<unknown>>;\\nexport default Radio;\\n","antd/radio/radioButton.d.ts":"import * as React from \'react\';\\nimport { RadioChangeEvent } from \'./interface\';\\nimport { AbstractCheckboxProps } from \'../checkbox/Checkbox\';\\nexport declare type RadioButtonProps = AbstractCheckboxProps<RadioChangeEvent>;\\ndeclare const _default: React.ForwardRefExoticComponent<RadioButtonProps & React.RefAttributes<any>>;\\nexport default _default;\\n","antd/radio/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/rate/index.d.ts":"import * as React from \'react\';\\nexport interface RateProps {\\n    prefixCls?: string;\\n    count?: number;\\n    value?: number;\\n    defaultValue?: number;\\n    allowHalf?: boolean;\\n    allowClear?: boolean;\\n    disabled?: boolean;\\n    tooltips?: Array<string>;\\n    onChange?: (value: number) => void;\\n    onHoverChange?: (value: number) => void;\\n    character?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\ndeclare const Rate: React.ForwardRefExoticComponent<RateProps & React.RefAttributes<unknown>>;\\nexport default Rate;\\n","antd/rate/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/result/index.d.ts":"import * as React from \'react\';\\nexport declare const IconMap: {\\n    success: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    error: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    info: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n    warning: React.ForwardRefExoticComponent<Pick<import(\\"@ant-design/icons/lib/components/AntdIcon\\").AntdIconProps, \\"children\\" | \\"size\\" | \\"cite\\" | \\"data\\" | \\"form\\" | \\"label\\" | \\"slot\\" | \\"span\\" | \\"style\\" | \\"summary\\" | \\"title\\" | \\"pattern\\" | \\"className\\" | \\"value\\" | \\"disabled\\" | \\"dir\\" | \\"max\\" | \\"required\\" | \\"default\\" | \\"high\\" | \\"low\\" | \\"start\\" | \\"open\\" | \\"media\\" | \\"hidden\\" | \\"async\\" | \\"defer\\" | \\"manifest\\" | \\"color\\" | \\"content\\" | \\"wrap\\" | \\"multiple\\" | \\"height\\" | \\"rotate\\" | \\"translate\\" | \\"width\\" | \\"prefix\\" | \\"src\\" | \\"key\\" | \\"list\\" | \\"step\\" | \\"aria-label\\" | \\"spin\\" | \\"accept\\" | \\"acceptCharset\\" | \\"action\\" | \\"allowFullScreen\\" | \\"allowTransparency\\" | \\"alt\\" | \\"as\\" | \\"autoComplete\\" | \\"autoFocus\\" | \\"autoPlay\\" | \\"capture\\" | \\"cellPadding\\" | \\"cellSpacing\\" | \\"charSet\\" | \\"challenge\\" | \\"checked\\" | \\"classID\\" | \\"cols\\" | \\"colSpan\\" | \\"controls\\" | \\"coords\\" | \\"crossOrigin\\" | \\"dateTime\\" | \\"download\\" | \\"encType\\" | \\"formAction\\" | \\"formEncType\\" | \\"formMethod\\" | \\"formNoValidate\\" | \\"formTarget\\" | \\"frameBorder\\" | \\"headers\\" | \\"href\\" | \\"hrefLang\\" | \\"htmlFor\\" | \\"httpEquiv\\" | \\"integrity\\" | \\"keyParams\\" | \\"keyType\\" | \\"kind\\" | \\"loop\\" | \\"marginHeight\\" | \\"marginWidth\\" | \\"maxLength\\" | \\"mediaGroup\\" | \\"method\\" | \\"min\\" | \\"minLength\\" | \\"muted\\" | \\"name\\" | \\"nonce\\" | \\"noValidate\\" | \\"optimum\\" | \\"placeholder\\" | \\"playsInline\\" | \\"poster\\" | \\"preload\\" | \\"readOnly\\" | \\"rel\\" | \\"reversed\\" | \\"rows\\" | \\"rowSpan\\" | \\"sandbox\\" | \\"scope\\" | \\"scoped\\" | \\"scrolling\\" | \\"seamless\\" | \\"selected\\" | \\"shape\\" | \\"sizes\\" | \\"srcDoc\\" | \\"srcLang\\" | \\"srcSet\\" | \\"target\\" | \\"type\\" | \\"useMap\\" | \\"wmode\\" | \\"defaultChecked\\" | \\"defaultValue\\" | \\"suppressContentEditableWarning\\" | \\"suppressHydrationWarning\\" | \\"accessKey\\" | \\"contentEditable\\" | \\"contextMenu\\" | \\"draggable\\" | \\"id\\" | \\"lang\\" | \\"spellCheck\\" | \\"tabIndex\\" | \\"radioGroup\\" | \\"role\\" | \\"about\\" | \\"datatype\\" | \\"inlist\\" | \\"property\\" | \\"resource\\" | \\"typeof\\" | \\"vocab\\" | \\"autoCapitalize\\" | \\"autoCorrect\\" | \\"autoSave\\" | \\"itemProp\\" | \\"itemScope\\" | \\"itemType\\" | \\"itemID\\" | \\"itemRef\\" | \\"results\\" | \\"security\\" | \\"unselectable\\" | \\"inputMode\\" | \\"is\\" | \\"aria-activedescendant\\" | \\"aria-atomic\\" | \\"aria-autocomplete\\" | \\"aria-busy\\" | \\"aria-checked\\" | \\"aria-colcount\\" | \\"aria-colindex\\" | \\"aria-colspan\\" | \\"aria-controls\\" | \\"aria-current\\" | \\"aria-describedby\\" | \\"aria-details\\" | \\"aria-disabled\\" | \\"aria-dropeffect\\" | \\"aria-errormessage\\" | \\"aria-expanded\\" | \\"aria-flowto\\" | \\"aria-grabbed\\" | \\"aria-haspopup\\" | \\"aria-hidden\\" | \\"aria-invalid\\" | \\"aria-keyshortcuts\\" | \\"aria-labelledby\\" | \\"aria-level\\" | \\"aria-live\\" | \\"aria-modal\\" | \\"aria-multiline\\" | \\"aria-multiselectable\\" | \\"aria-orientation\\" | \\"aria-owns\\" | \\"aria-placeholder\\" | \\"aria-posinset\\" | \\"aria-pressed\\" | \\"aria-readonly\\" | \\"aria-relevant\\" | \\"aria-required\\" | \\"aria-roledescription\\" | \\"aria-rowcount\\" | \\"aria-rowindex\\" | \\"aria-rowspan\\" | \\"aria-selected\\" | \\"aria-setsize\\" | \\"aria-sort\\" | \\"aria-valuemax\\" | \\"aria-valuemin\\" | \\"aria-valuenow\\" | \\"aria-valuetext\\" | \\"dangerouslySetInnerHTML\\" | \\"onCopy\\" | \\"onCopyCapture\\" | \\"onCut\\" | \\"onCutCapture\\" | \\"onPaste\\" | \\"onPasteCapture\\" | \\"onCompositionEnd\\" | \\"onCompositionEndCapture\\" | \\"onCompositionStart\\" | \\"onCompositionStartCapture\\" | \\"onCompositionUpdate\\" | \\"onCompositionUpdateCapture\\" | \\"onFocus\\" | \\"onFocusCapture\\" | \\"onBlur\\" | \\"onBlurCapture\\" | \\"onChange\\" | \\"onChangeCapture\\" | \\"onBeforeInput\\" | \\"onBeforeInputCapture\\" | \\"onInput\\" | \\"onInputCapture\\" | \\"onReset\\" | \\"onResetCapture\\" | \\"onSubmit\\" | \\"onSubmitCapture\\" | \\"onInvalid\\" | \\"onInvalidCapture\\" | \\"onLoad\\" | \\"onLoadCapture\\" | \\"onError\\" | \\"onErrorCapture\\" | \\"onKeyDown\\" | \\"onKeyDownCapture\\" | \\"onKeyPress\\" | \\"onKeyPressCapture\\" | \\"onKeyUp\\" | \\"onKeyUpCapture\\" | \\"onAbort\\" | \\"onAbortCapture\\" | \\"onCanPlay\\" | \\"onCanPlayCapture\\" | \\"onCanPlayThrough\\" | \\"onCanPlayThroughCapture\\" | \\"onDurationChange\\" | \\"onDurationChangeCapture\\" | \\"onEmptied\\" | \\"onEmptiedCapture\\" | \\"onEncrypted\\" | \\"onEncryptedCapture\\" | \\"onEnded\\" | \\"onEndedCapture\\" | \\"onLoadedData\\" | \\"onLoadedDataCapture\\" | \\"onLoadedMetadata\\" | \\"onLoadedMetadataCapture\\" | \\"onLoadStart\\" | \\"onLoadStartCapture\\" | \\"onPause\\" | \\"onPauseCapture\\" | \\"onPlay\\" | \\"onPlayCapture\\" | \\"onPlaying\\" | \\"onPlayingCapture\\" | \\"onProgress\\" | \\"onProgressCapture\\" | \\"onRateChange\\" | \\"onRateChangeCapture\\" | \\"onSeeked\\" | \\"onSeekedCapture\\" | \\"onSeeking\\" | \\"onSeekingCapture\\" | \\"onStalled\\" | \\"onStalledCapture\\" | \\"onSuspend\\" | \\"onSuspendCapture\\" | \\"onTimeUpdate\\" | \\"onTimeUpdateCapture\\" | \\"onVolumeChange\\" | \\"onVolumeChangeCapture\\" | \\"onWaiting\\" | \\"onWaitingCapture\\" | \\"onAuxClick\\" | \\"onAuxClickCapture\\" | \\"onClick\\" | \\"onClickCapture\\" | \\"onContextMenu\\" | \\"onContextMenuCapture\\" | \\"onDoubleClick\\" | \\"onDoubleClickCapture\\" | \\"onDrag\\" | \\"onDragCapture\\" | \\"onDragEnd\\" | \\"onDragEndCapture\\" | \\"onDragEnter\\" | \\"onDragEnterCapture\\" | \\"onDragExit\\" | \\"onDragExitCapture\\" | \\"onDragLeave\\" | \\"onDragLeaveCapture\\" | \\"onDragOver\\" | \\"onDragOverCapture\\" | \\"onDragStart\\" | \\"onDragStartCapture\\" | \\"onDrop\\" | \\"onDropCapture\\" | \\"onMouseDown\\" | \\"onMouseDownCapture\\" | \\"onMouseEnter\\" | \\"onMouseLeave\\" | \\"onMouseMove\\" | \\"onMouseMoveCapture\\" | \\"onMouseOut\\" | \\"onMouseOutCapture\\" | \\"onMouseOver\\" | \\"onMouseOverCapture\\" | \\"onMouseUp\\" | \\"onMouseUpCapture\\" | \\"onSelect\\" | \\"onSelectCapture\\" | \\"onTouchCancel\\" | \\"onTouchCancelCapture\\" | \\"onTouchEnd\\" | \\"onTouchEndCapture\\" | \\"onTouchMove\\" | \\"onTouchMoveCapture\\" | \\"onTouchStart\\" | \\"onTouchStartCapture\\" | \\"onPointerDown\\" | \\"onPointerDownCapture\\" | \\"onPointerMove\\" | \\"onPointerMoveCapture\\" | \\"onPointerUp\\" | \\"onPointerUpCapture\\" | \\"onPointerCancel\\" | \\"onPointerCancelCapture\\" | \\"onPointerEnter\\" | \\"onPointerEnterCapture\\" | \\"onPointerLeave\\" | \\"onPointerLeaveCapture\\" | \\"onPointerOver\\" | \\"onPointerOverCapture\\" | \\"onPointerOut\\" | \\"onPointerOutCapture\\" | \\"onGotPointerCapture\\" | \\"onGotPointerCaptureCapture\\" | \\"onLostPointerCapture\\" | \\"onLostPointerCaptureCapture\\" | \\"onScroll\\" | \\"onScrollCapture\\" | \\"onWheel\\" | \\"onWheelCapture\\" | \\"onAnimationStart\\" | \\"onAnimationStartCapture\\" | \\"onAnimationEnd\\" | \\"onAnimationEndCapture\\" | \\"onAnimationIteration\\" | \\"onAnimationIterationCapture\\" | \\"onTransitionEnd\\" | \\"onTransitionEndCapture\\" | \\"twoToneColor\\"> & React.RefAttributes<HTMLSpanElement>>;\\n};\\nexport declare const ExceptionMap: {\\n    \'404\': () => JSX.Element;\\n    \'500\': () => JSX.Element;\\n    \'403\': () => JSX.Element;\\n};\\nexport declare type ExceptionStatusType = 403 | 404 | 500 | \'403\' | \'404\' | \'500\';\\nexport declare type ResultStatusType = ExceptionStatusType | keyof typeof IconMap;\\nexport interface ResultProps {\\n    icon?: React.ReactNode;\\n    status?: ResultStatusType;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    extra?: React.ReactNode;\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport interface ResultType extends React.FC<ResultProps> {\\n    PRESENTED_IMAGE_404: React.ReactNode;\\n    PRESENTED_IMAGE_403: React.ReactNode;\\n    PRESENTED_IMAGE_500: React.ReactNode;\\n}\\ndeclare const Result: ResultType;\\nexport default Result;\\n","antd/result/noFound.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const NoFound: () => JSX.Element;\\nexport default NoFound;\\n","antd/result/serverError.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const ServerError: () => JSX.Element;\\nexport default ServerError;\\n","antd/result/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/result/unauthorized.d.ts":"/// <reference types=\\"react\\" />\\ndeclare const Unauthorized: () => JSX.Element;\\nexport default Unauthorized;\\n","antd/row/index.d.ts":"import { Row, RowProps } from \'../grid\';\\nexport { RowProps };\\nexport default Row;\\n","antd/row/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'../../grid/style\';\\n","antd/select/index.d.ts":"import * as React from \'react\';\\nimport { Option, OptGroup, SelectProps as RcSelectProps } from \'rc-select\';\\nimport { OptionProps } from \'rc-select/lib/Option\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare type RawValue = string | number;\\nexport { OptionProps };\\nexport declare type OptionType = typeof Option;\\nexport interface LabeledValue {\\n    key?: string;\\n    value: RawValue;\\n    label: React.ReactNode;\\n}\\nexport declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];\\nexport interface InternalSelectProps<VT> extends Omit<RcSelectProps<VT>, \'mode\'> {\\n    suffixIcon?: React.ReactNode;\\n    size?: SizeType;\\n    mode?: \'multiple\' | \'tags\' | \'SECRET_COMBOBOX_MODE_DO_NOT_USE\';\\n    bordered?: boolean;\\n}\\nexport interface SelectProps<VT> extends Omit<InternalSelectProps<VT>, \'inputIcon\' | \'mode\' | \'getInputElement\' | \'backfill\'> {\\n    mode?: \'multiple\' | \'tags\';\\n}\\nexport interface RefSelectProps {\\n    focus: () => void;\\n    blur: () => void;\\n}\\ndeclare const SelectRef: <VT extends SelectValue = SelectValue>(props: SelectProps<VT> & {\\n    ref?: ((instance: RefSelectProps | null) => void) | React.RefObject<RefSelectProps> | null | undefined;\\n}) => React.ReactElement;\\ndeclare type InternalSelectType = typeof SelectRef;\\ninterface SelectInterface extends InternalSelectType {\\n    SECRET_COMBOBOX_MODE_DO_NOT_USE: string;\\n    Option: typeof Option;\\n    OptGroup: typeof OptGroup;\\n}\\ndeclare const Select: SelectInterface;\\nexport default Select;\\n","antd/select/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\n","antd/select/utils/iconUtil.d.ts":"import * as React from \'react\';\\nexport default function getIcons({ suffixIcon, clearIcon, menuItemSelectedIcon, removeIcon, loading, multiple, prefixCls, }: {\\n    suffixIcon?: React.ReactNode;\\n    clearIcon?: React.ReactNode;\\n    menuItemSelectedIcon?: React.ReactNode;\\n    removeIcon?: React.ReactNode;\\n    loading?: boolean;\\n    multiple?: boolean;\\n    prefixCls: string;\\n}): {\\n    clearIcon: React.ReactNode;\\n    suffixIcon: {} | null;\\n    itemIcon: {} | null;\\n    removeIcon: {} | null;\\n};\\n","antd/skeleton/Avatar.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface AvatarProps extends Omit<SkeletonElementProps, \'shape\'> {\\n    shape?: \'circle\' | \'square\';\\n}\\ndeclare const SkeletonAvatar: {\\n    (props: AvatarProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n        shape: string;\\n    };\\n};\\nexport default SkeletonAvatar;\\n","antd/skeleton/Button.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonButtonProps extends Omit<SkeletonElementProps, \'size\'> {\\n    size?: \'large\' | \'small\' | \'default\';\\n}\\ndeclare const SkeletonButton: {\\n    (props: SkeletonButtonProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n    };\\n};\\nexport default SkeletonButton;\\n","antd/skeleton/Element.d.ts":"import * as React from \'react\';\\nexport interface SkeletonElementProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    size?: \'large\' | \'small\' | \'default\' | number;\\n    shape?: \'circle\' | \'square\' | \'round\';\\n    active?: boolean;\\n}\\ndeclare const Element: (props: SkeletonElementProps) => JSX.Element;\\nexport default Element;\\n","antd/skeleton/Image.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonImageProps extends Omit<SkeletonElementProps, \'size\' | \'shape\' | \'active\'> {\\n}\\ndeclare const SkeletonImage: (props: SkeletonImageProps) => JSX.Element;\\nexport default SkeletonImage;\\n","antd/skeleton/index.d.ts":"import Skeleton from \'./Skeleton\';\\nexport { SkeletonProps } from \'./Skeleton\';\\nexport default Skeleton;\\n","antd/skeleton/Input.d.ts":"/// <reference types=\\"react\\" />\\nimport { SkeletonElementProps } from \'./Element\';\\nexport interface SkeletonInputProps extends Omit<SkeletonElementProps, \'size\' | \'shape\'> {\\n    size?: \'large\' | \'small\' | \'default\';\\n}\\ndeclare const SkeletonInput: {\\n    (props: SkeletonInputProps): JSX.Element;\\n    defaultProps: {\\n        size: string;\\n    };\\n};\\nexport default SkeletonInput;\\n","antd/skeleton/Paragraph.d.ts":"import * as React from \'react\';\\ndeclare type widthUnit = number | string;\\nexport interface SkeletonParagraphProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    width?: widthUnit | Array<widthUnit>;\\n    rows?: number;\\n}\\ndeclare const Paragraph: (props: SkeletonParagraphProps) => JSX.Element;\\nexport default Paragraph;\\n","antd/skeleton/Skeleton.d.ts":"import * as React from \'react\';\\nimport { SkeletonTitleProps } from \'./Title\';\\nimport { SkeletonParagraphProps } from \'./Paragraph\';\\nimport { AvatarProps } from \'./Avatar\';\\ninterface SkeletonAvatarProps extends Omit<AvatarProps, \'active\'> {\\n}\\nexport interface SkeletonProps {\\n    active?: boolean;\\n    loading?: boolean;\\n    prefixCls?: string;\\n    className?: string;\\n    children?: React.ReactNode;\\n    avatar?: SkeletonAvatarProps | boolean;\\n    title?: SkeletonTitleProps | boolean;\\n    paragraph?: SkeletonParagraphProps | boolean;\\n    round?: boolean;\\n}\\ndeclare const Skeleton: {\\n    (props: SkeletonProps): JSX.Element;\\n    defaultProps: {\\n        avatar: boolean;\\n        title: boolean;\\n        paragraph: boolean;\\n    };\\n    Button: {\\n        (props: import(\\"./Button\\").SkeletonButtonProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n        };\\n    };\\n    Avatar: {\\n        (props: AvatarProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n            shape: string;\\n        };\\n    };\\n    Input: {\\n        (props: import(\\"./Input\\").SkeletonInputProps): JSX.Element;\\n        defaultProps: {\\n            size: string;\\n        };\\n    };\\n    Image: (props: import(\\"./Image\\").SkeletonImageProps) => JSX.Element;\\n};\\nexport default Skeleton;\\n","antd/skeleton/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/skeleton/Title.d.ts":"import * as React from \'react\';\\nexport interface SkeletonTitleProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    width?: number | string;\\n}\\ndeclare const Title: ({ prefixCls, className, width, style }: SkeletonTitleProps) => JSX.Element;\\nexport default Title;\\n","antd/slider/index.d.ts":"import * as React from \'react\';\\nimport { TooltipPlacement } from \'../tooltip\';\\nexport interface SliderMarks {\\n    [key: number]: React.ReactNode | {\\n        style: React.CSSProperties;\\n        label: React.ReactNode;\\n    };\\n}\\ninterface HandleGeneratorInfo {\\n    value?: number;\\n    dragging?: boolean;\\n    index: number;\\n}\\nexport declare type HandleGeneratorFn = (config: {\\n    tooltipPrefixCls?: string;\\n    prefixCls?: string;\\n    info: HandleGeneratorInfo;\\n}) => React.ReactElement;\\nexport interface SliderBaseProps {\\n    prefixCls?: string;\\n    tooltipPrefixCls?: string;\\n    reverse?: boolean;\\n    min?: number;\\n    max?: number;\\n    step?: null | number;\\n    marks?: SliderMarks;\\n    dots?: boolean;\\n    included?: boolean;\\n    disabled?: boolean;\\n    vertical?: boolean;\\n    tipFormatter?: null | ((value?: number) => React.ReactNode);\\n    className?: string;\\n    id?: string;\\n    style?: React.CSSProperties;\\n    tooltipVisible?: boolean;\\n    tooltipPlacement?: TooltipPlacement;\\n    getTooltipPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    autoFocus?: boolean;\\n}\\nexport interface SliderSingleProps extends SliderBaseProps {\\n    range?: false;\\n    value?: number;\\n    defaultValue?: number;\\n    onChange?: (value: number) => void;\\n    onAfterChange?: (value: number) => void;\\n    handleStyle?: React.CSSProperties;\\n    trackStyle?: React.CSSProperties;\\n}\\nexport interface SliderRangeProps extends SliderBaseProps {\\n    range: true | SliderRange;\\n    value?: [number, number];\\n    defaultValue?: [number, number];\\n    onChange?: (value: [number, number]) => void;\\n    onAfterChange?: (value: [number, number]) => void;\\n    handleStyle?: React.CSSProperties[];\\n    trackStyle?: React.CSSProperties[];\\n}\\ninterface SliderRange {\\n    draggableTrack?: boolean;\\n}\\nexport declare type Visibles = {\\n    [index: number]: boolean;\\n};\\ndeclare const Slider: React.ForwardRefExoticComponent<(SliderSingleProps & React.RefAttributes<unknown>) | (SliderRangeProps & React.RefAttributes<unknown>)>;\\nexport default Slider;\\n","antd/slider/SliderTooltip.d.ts":"import * as React from \'react\';\\ndeclare const SliderTooltip: React.ForwardRefExoticComponent<(import(\\"../tooltip\\").TooltipPropsWithOverlay & React.RefAttributes<unknown>) | (import(\\"../tooltip\\").TooltipPropsWithTitle & React.RefAttributes<unknown>)>;\\nexport default SliderTooltip;\\n","antd/slider/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\n","antd/space/index.d.ts":"import * as React from \'react\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare const SpaceContext: React.Context<{\\n    latestIndex: number;\\n    horizontalSize: number;\\n    verticalSize: number;\\n}>;\\nexport declare type SpaceSize = SizeType | number;\\nexport interface SpaceProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    size?: SpaceSize | [SpaceSize, SpaceSize];\\n    direction?: \'horizontal\' | \'vertical\';\\n    align?: \'start\' | \'end\' | \'center\' | \'baseline\';\\n    split?: React.ReactNode;\\n    wrap?: boolean;\\n}\\ndeclare const Space: React.FC<SpaceProps>;\\nexport default Space;\\n","antd/space/Item.d.ts":"import * as React from \'react\';\\nexport interface ItemProps {\\n    className: string;\\n    children: React.ReactNode;\\n    index: number;\\n    direction?: \'horizontal\' | \'vertical\';\\n    marginDirection: \'marginLeft\' | \'marginRight\';\\n    split?: string | React.ReactNode;\\n    wrap?: boolean;\\n}\\nexport default function Item({ className, direction, index, marginDirection, children, split, wrap, }: ItemProps): JSX.Element | null;\\n","antd/space/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/spin/index.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\ndeclare const SpinSizes: [\\"small\\", \\"default\\", \\"large\\"];\\nexport declare type SpinSize = typeof SpinSizes[number];\\nexport declare type SpinIndicator = React.ReactElement<HTMLElement>;\\nexport interface SpinProps {\\n    prefixCls?: string;\\n    className?: string;\\n    spinning?: boolean;\\n    style?: React.CSSProperties;\\n    size?: SpinSize;\\n    tip?: string;\\n    delay?: number;\\n    wrapperClassName?: string;\\n    indicator?: SpinIndicator;\\n}\\nexport interface SpinState {\\n    spinning?: boolean;\\n    notCssAnimationSupported?: boolean;\\n}\\ndeclare class Spin extends React.Component<SpinProps, SpinState> {\\n    static defaultProps: {\\n        spinning: boolean;\\n        size: \\"small\\" | \\"large\\" | \\"default\\";\\n        wrapperClassName: string;\\n    };\\n    static setDefaultIndicator(indicator: React.ReactNode): void;\\n    originalUpdateSpinning: () => void;\\n    constructor(props: SpinProps);\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    debouncifyUpdateSpinning: (props?: SpinProps | undefined) => void;\\n    updateSpinning: () => void;\\n    cancelExistingSpin(): void;\\n    isNestedPattern(): boolean;\\n    renderSpin: ({ getPrefixCls, direction }: ConfigConsumerProps) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Spin;\\n","antd/spin/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/statistic/Countdown.d.ts":"import * as React from \'react\';\\nimport { StatisticProps } from \'./Statistic\';\\nimport { countdownValueType, FormatConfig } from \'./utils\';\\ninterface CountdownProps extends StatisticProps {\\n    value?: countdownValueType;\\n    format?: string;\\n    onFinish?: () => void;\\n}\\ndeclare class Countdown extends React.Component<CountdownProps, {}> {\\n    static defaultProps: Partial<CountdownProps>;\\n    countdownId?: number;\\n    componentDidMount(): void;\\n    componentDidUpdate(): void;\\n    componentWillUnmount(): void;\\n    syncTimer: () => void;\\n    startTimer: () => void;\\n    stopTimer: () => void;\\n    formatCountdown: (value: countdownValueType, config: FormatConfig) => string;\\n    valueRender: (node: React.ReactElement<HTMLDivElement>) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;\\n    render(): JSX.Element;\\n}\\nexport default Countdown;\\n","antd/statistic/index.d.ts":"import Statistic, { StatisticProps } from \'./Statistic\';\\nexport { StatisticProps };\\nexport default Statistic;\\n","antd/statistic/Number.d.ts":"import * as React from \'react\';\\nimport { valueType, FormatConfig } from \'./utils\';\\ninterface NumberProps extends FormatConfig {\\n    value: valueType;\\n}\\ndeclare const StatisticNumber: React.FC<NumberProps>;\\nexport default StatisticNumber;\\n","antd/statistic/Statistic.d.ts":"import * as React from \'react\';\\nimport Countdown from \'./Countdown\';\\nimport { valueType, FormatConfig } from \'./utils\';\\ninterface StatisticComponent {\\n    Countdown: typeof Countdown;\\n}\\nexport interface StatisticProps extends FormatConfig {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    value?: valueType;\\n    valueStyle?: React.CSSProperties;\\n    valueRender?: (node: React.ReactNode) => React.ReactNode;\\n    title?: React.ReactNode;\\n    prefix?: React.ReactNode;\\n    suffix?: React.ReactNode;\\n    loading?: boolean;\\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\\n}\\ndeclare const WrapperStatistic: React.FC<StatisticProps> & StatisticComponent;\\nexport default WrapperStatistic;\\n","antd/statistic/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../skeleton/style\';\\n","antd/statistic/utils.d.ts":"import * as React from \'react\';\\nexport declare type valueType = number | string;\\nexport declare type countdownValueType = valueType | string;\\nexport declare type Formatter = false | \'number\' | \'countdown\' | ((value: valueType, config?: FormatConfig) => React.ReactNode);\\nexport interface FormatConfig {\\n    formatter?: Formatter;\\n    decimalSeparator?: string;\\n    groupSeparator?: string;\\n    precision?: number;\\n    prefixCls?: string;\\n}\\nexport interface CountdownFormatConfig extends FormatConfig {\\n    format?: string;\\n}\\nexport declare function formatTimeStr(duration: number, format: string): string;\\nexport declare function formatCountdown(value: countdownValueType, config: CountdownFormatConfig): string;\\n","antd/steps/index.d.ts":"import * as React from \'react\';\\nexport interface StepsProps {\\n    type?: \'default\' | \'navigation\';\\n    className?: string;\\n    current?: number;\\n    direction?: \'horizontal\' | \'vertical\';\\n    iconPrefix?: string;\\n    initial?: number;\\n    labelPlacement?: \'horizontal\' | \'vertical\';\\n    prefixCls?: string;\\n    progressDot?: boolean | Function;\\n    responsive?: boolean;\\n    size?: \'default\' | \'small\';\\n    status?: \'wait\' | \'process\' | \'finish\' | \'error\';\\n    style?: React.CSSProperties;\\n    percent?: number;\\n    onChange?: (current: number) => void;\\n}\\nexport interface StepProps {\\n    className?: string;\\n    description?: React.ReactNode;\\n    icon?: React.ReactNode;\\n    onClick?: React.MouseEventHandler<HTMLElement>;\\n    status?: \'wait\' | \'process\' | \'finish\' | \'error\';\\n    disabled?: boolean;\\n    title?: React.ReactNode;\\n    subTitle?: React.ReactNode;\\n    style?: React.CSSProperties;\\n}\\ninterface StepsType extends React.FC<StepsProps> {\\n    Step: React.ClassicComponentClass<StepProps>;\\n}\\ndeclare const Steps: StepsType;\\nexport default Steps;\\n","antd/steps/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../progress/style\';\\n","antd/style/index.d.ts":"import \'./index.less\';\\n","antd/switch/index.d.ts":"import * as React from \'react\';\\nexport declare type SwitchSize = \'small\' | \'default\';\\nexport declare type SwitchChangeEventHandler = (checked: boolean, event: MouseEvent) => void;\\nexport declare type SwitchClickEventHandler = SwitchChangeEventHandler;\\nexport interface SwitchProps {\\n    prefixCls?: string;\\n    size?: SwitchSize;\\n    className?: string;\\n    checked?: boolean;\\n    defaultChecked?: boolean;\\n    onChange?: SwitchChangeEventHandler;\\n    onClick?: SwitchClickEventHandler;\\n    checkedChildren?: React.ReactNode;\\n    unCheckedChildren?: React.ReactNode;\\n    disabled?: boolean;\\n    loading?: boolean;\\n    autoFocus?: boolean;\\n    style?: React.CSSProperties;\\n    title?: string;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<SwitchProps & React.RefAttributes<HTMLElement>> {\\n    __ANT_SWITCH: boolean;\\n}\\ndeclare const Switch: CompoundedComponent;\\nexport default Switch;\\n","antd/switch/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/table/Column.d.ts":"import { ColumnType } from \'./interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/** This is a syntactic sugar for `columns` prop. So HOC will not work on this. */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): null;\\nexport default Column;\\n","antd/table/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnType } from \'./interface\';\\nimport { ColumnProps } from \'./Column\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/** This is a syntactic sugar for `columns` prop. So HOC will not work on this. */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): null;\\nexport default ColumnGroup;\\n","antd/table/ExpandIcon.d.ts":"import * as React from \'react\';\\nimport { TableLocale } from \'./interface\';\\ninterface DefaultExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    onExpand: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n    record: RecordType;\\n    expanded: boolean;\\n    expandable: boolean;\\n}\\ndeclare function renderExpandIcon(locale: TableLocale): <RecordType>({ prefixCls, onExpand, record, expanded, expandable, }: DefaultExpandIconProps<RecordType>) => JSX.Element;\\nexport default renderExpandIcon;\\n","antd/table/hooks/useFilter/FilterDropdown.d.ts":"import * as React from \'react\';\\nimport { ColumnType, Key, TableLocale, GetPopupContainer } from \'../../interface\';\\nimport { FilterState } from \'.\';\\nexport interface FilterDropdownProps<RecordType> {\\n    prefixCls: string;\\n    dropdownPrefixCls: string;\\n    column: ColumnType<RecordType>;\\n    filterState?: FilterState<RecordType>;\\n    filterMultiple: boolean;\\n    columnKey: Key;\\n    children: React.ReactNode;\\n    triggerFilter: (filterState: FilterState<RecordType>) => void;\\n    locale: TableLocale;\\n    getPopupContainer?: GetPopupContainer;\\n}\\ndeclare function FilterDropdown<RecordType>(props: FilterDropdownProps<RecordType>): JSX.Element;\\nexport default FilterDropdown;\\n","antd/table/hooks/useFilter/FilterWrapper.d.ts":"import * as React from \'react\';\\nexport interface FilterDropdownMenuWrapperProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n}\\ndeclare const FilterDropdownMenuWrapper: (props: FilterDropdownMenuWrapperProps) => JSX.Element;\\nexport default FilterDropdownMenuWrapper;\\n","antd/table/hooks/useFilter/index.d.ts":"import { TransformColumns, ColumnsType, ColumnType, Key, TableLocale, GetPopupContainer } from \'../../interface\';\\nexport interface FilterState<RecordType> {\\n    column: ColumnType<RecordType>;\\n    key: Key;\\n    filteredKeys?: Key[] | null;\\n    forceFiltered?: boolean;\\n}\\nexport declare function getFilterData<RecordType>(data: RecordType[], filterStates: FilterState<RecordType>[]): RecordType[];\\ninterface FilterConfig<RecordType> {\\n    prefixCls: string;\\n    dropdownPrefixCls: string;\\n    mergedColumns: ColumnsType<RecordType>;\\n    locale: TableLocale;\\n    onFilterChange: (filters: Record<string, (Key | boolean)[] | null>, filterStates: FilterState<RecordType>[]) => void;\\n    getPopupContainer?: GetPopupContainer;\\n}\\ndeclare function useFilter<RecordType>({ prefixCls, dropdownPrefixCls, mergedColumns, onFilterChange, getPopupContainer, locale: tableLocale, }: FilterConfig<RecordType>): [\\n    TransformColumns<RecordType>,\\n    FilterState<RecordType>[],\\n    () => Record<string, (Key | boolean)[] | null>\\n];\\nexport default useFilter;\\n","antd/table/hooks/useLazyKVMap.d.ts":"import { Key, GetRowKey } from \'../interface\';\\nexport default function useLazyKVMap<RecordType>(data: readonly RecordType[], childrenColumnName: string, getRowKey: GetRowKey<RecordType>): ((key: Key) => RecordType)[];\\n","antd/table/hooks/usePagination.d.ts":"import { TablePaginationConfig } from \'../interface\';\\nexport declare const DEFAULT_PAGE_SIZE = 10;\\nexport declare function getPaginationParam(pagination: TablePaginationConfig | boolean | undefined, mergedPagination: TablePaginationConfig): any;\\nexport default function usePagination(total: number, pagination: TablePaginationConfig | false | undefined, onChange: (current: number, pageSize: number) => void): [TablePaginationConfig, () => void];\\n","antd/table/hooks/useSelection.d.ts":"import { TableRowSelection, Key, GetRowKey, TableLocale, SelectionItem, TransformColumns, ExpandType, GetPopupContainer } from \'../interface\';\\nexport declare const SELECTION_ALL: \\"SELECT_ALL\\";\\nexport declare const SELECTION_INVERT: \\"SELECT_INVERT\\";\\nexport declare const SELECTION_NONE: \\"SELECT_NONE\\";\\ninterface UseSelectionConfig<RecordType> {\\n    prefixCls: string;\\n    pageData: RecordType[];\\n    data: RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    getRecordByKey: (key: Key) => RecordType;\\n    expandType: ExpandType;\\n    childrenColumnName: string;\\n    expandIconColumnIndex?: number;\\n    locale: TableLocale;\\n    getPopupContainer?: GetPopupContainer;\\n}\\nexport declare type INTERNAL_SELECTION_ITEM = SelectionItem | typeof SELECTION_ALL | typeof SELECTION_INVERT | typeof SELECTION_NONE;\\nexport default function useSelection<RecordType>(rowSelection: TableRowSelection<RecordType> | undefined, config: UseSelectionConfig<RecordType>): [TransformColumns<RecordType>, Set<Key>];\\nexport {};\\n","antd/table/hooks/useSorter.d.ts":"import { TransformColumns, ColumnsType, Key, ColumnType, SortOrder, ColumnTitleProps, SorterResult, TableLocale } from \'../interface\';\\nimport { TooltipProps } from \'../../tooltip\';\\nexport interface SortState<RecordType> {\\n    column: ColumnType<RecordType>;\\n    key: Key;\\n    sortOrder: SortOrder | null;\\n    multiplePriority: number | false;\\n}\\nexport declare function getSortData<RecordType>(data: readonly RecordType[], sortStates: SortState<RecordType>[], childrenColumnName: string): RecordType[];\\ninterface SorterConfig<RecordType> {\\n    prefixCls: string;\\n    mergedColumns: ColumnsType<RecordType>;\\n    onSorterChange: (sorterResult: SorterResult<RecordType> | SorterResult<RecordType>[], sortStates: SortState<RecordType>[]) => void;\\n    sortDirections: SortOrder[];\\n    tableLocale?: TableLocale;\\n    showSorterTooltip?: boolean | TooltipProps;\\n}\\nexport default function useFilterSorter<RecordType>({ prefixCls, mergedColumns, onSorterChange, sortDirections, tableLocale, showSorterTooltip, }: SorterConfig<RecordType>): [\\n    TransformColumns<RecordType>,\\n    SortState<RecordType>[],\\n    ColumnTitleProps<RecordType>,\\n    () => SorterResult<RecordType> | SorterResult<RecordType>[]\\n];\\nexport {};\\n","antd/table/hooks/useTitleColumns.d.ts":"import { TransformColumns, ColumnTitleProps } from \'../interface\';\\nexport default function useTitleColumns<RecordType>(columnTitleProps: ColumnTitleProps<RecordType>): [TransformColumns<RecordType>];\\n","antd/table/index.d.ts":"import Table, { TableProps, TablePaginationConfig } from \'./Table\';\\nexport { ColumnProps } from \'./Column\';\\nexport { ColumnsType, ColumnType, ColumnGroupType } from \'./interface\';\\nexport { TableProps, TablePaginationConfig };\\nexport default Table;\\n","antd/table/interface.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, ColumnType as RcColumnType, RenderedCell as RcRenderedCell, ExpandableConfig } from \'rc-table/lib/interface\';\\nimport { TooltipProps } from \'../tooltip\';\\nimport { CheckboxProps } from \'../checkbox\';\\nimport { PaginationProps } from \'../pagination\';\\nimport { Breakpoint } from \'../_util/responsiveObserve\';\\nimport { INTERNAL_SELECTION_ITEM } from \'./hooks/useSelection\';\\nexport { GetRowKey, ExpandableConfig };\\nexport declare type Key = React.Key;\\nexport declare type RowSelectionType = \'checkbox\' | \'radio\';\\nexport declare type SelectionItemSelectFn = (currentRowKeys: Key[]) => void;\\nexport declare type ExpandType = null | \'row\' | \'nest\';\\nexport interface TableLocale {\\n    filterTitle?: string;\\n    filterConfirm?: React.ReactNode;\\n    filterReset?: React.ReactNode;\\n    filterEmptyText?: React.ReactNode;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    selectAll?: React.ReactNode;\\n    selectNone?: React.ReactNode;\\n    selectInvert?: React.ReactNode;\\n    selectionAll?: React.ReactNode;\\n    sortTitle?: string;\\n    expand?: string;\\n    collapse?: string;\\n    triggerDesc?: string;\\n    triggerAsc?: string;\\n    cancelSort?: string;\\n}\\nexport declare type SortOrder = \'descend\' | \'ascend\' | null;\\ndeclare const TableActions: [\\"paginate\\", \\"sort\\", \\"filter\\"];\\nexport declare type TableAction = typeof TableActions[number];\\nexport declare type CompareFn<T> = (a: T, b: T, sortOrder?: SortOrder) => number;\\nexport interface ColumnFilterItem {\\n    text: React.ReactNode;\\n    value: string | number | boolean;\\n    children?: ColumnFilterItem[];\\n}\\nexport interface ColumnTitleProps<RecordType> {\\n    /** @deprecated Please use `sorterColumns` instead. */\\n    sortOrder?: SortOrder;\\n    /** @deprecated Please use `sorterColumns` instead. */\\n    sortColumn?: ColumnType<RecordType>;\\n    sortColumns?: {\\n        column: ColumnType<RecordType>;\\n        order: SortOrder;\\n    }[];\\n    filters?: Record<string, string[]>;\\n}\\nexport declare type ColumnTitle<RecordType> = React.ReactNode | ((props: ColumnTitleProps<RecordType>) => React.ReactNode);\\nexport interface FilterConfirmProps {\\n    closeDropdown: boolean;\\n}\\nexport interface FilterDropdownProps {\\n    prefixCls: string;\\n    setSelectedKeys: (selectedKeys: React.Key[]) => void;\\n    selectedKeys: React.Key[];\\n    confirm: (param: FilterConfirmProps) => void;\\n    clearFilters?: () => void;\\n    filters?: ColumnFilterItem[];\\n    visible: boolean;\\n}\\nexport interface ColumnType<RecordType> extends RcColumnType<RecordType> {\\n    title?: ColumnTitle<RecordType>;\\n    sorter?: boolean | CompareFn<RecordType> | {\\n        compare?: CompareFn<RecordType>;\\n        /** Config multiple sorter order priority */\\n        multiple?: number;\\n    };\\n    sortOrder?: SortOrder;\\n    defaultSortOrder?: SortOrder;\\n    sortDirections?: SortOrder[];\\n    showSorterTooltip?: boolean | TooltipProps;\\n    filtered?: boolean;\\n    filters?: ColumnFilterItem[];\\n    filterDropdown?: React.ReactNode | ((props: FilterDropdownProps) => React.ReactNode);\\n    filterMultiple?: boolean;\\n    filteredValue?: Key[] | null;\\n    defaultFilteredValue?: Key[] | null;\\n    filterIcon?: React.ReactNode | ((filtered: boolean) => React.ReactNode);\\n    onFilter?: (value: string | number | boolean, record: RecordType) => boolean;\\n    filterDropdownVisible?: boolean;\\n    onFilterDropdownVisibleChange?: (visible: boolean) => void;\\n    responsive?: Breakpoint[];\\n}\\nexport interface ColumnGroupType<RecordType> extends Omit<ColumnType<RecordType>, \'dataIndex\'> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport interface SelectionItem {\\n    key: string;\\n    text: React.ReactNode;\\n    onSelect?: SelectionItemSelectFn;\\n}\\nexport declare type SelectionSelectFn<T> = (record: T, selected: boolean, selectedRows: T[], nativeEvent: Event) => void;\\nexport interface TableRowSelection<T> {\\n    /** Keep the selection keys in list even the key not exist in `dataSource` anymore */\\n    preserveSelectedRowKeys?: boolean;\\n    type?: RowSelectionType;\\n    selectedRowKeys?: Key[];\\n    onChange?: (selectedRowKeys: Key[], selectedRows: T[]) => void;\\n    getCheckboxProps?: (record: T) => Partial<Omit<CheckboxProps, \'checked\' | \'defaultChecked\'>>;\\n    onSelect?: SelectionSelectFn<T>;\\n    onSelectMultiple?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;\\n    /** @deprecated This function is meaningless and should use `onChange` instead */\\n    onSelectAll?: (selected: boolean, selectedRows: T[], changeRows: T[]) => void;\\n    /** @deprecated This function is meaningless and should use `onChange` instead */\\n    onSelectInvert?: (selectedRowKeys: Key[]) => void;\\n    onSelectNone?: () => void;\\n    selections?: INTERNAL_SELECTION_ITEM[] | boolean;\\n    hideSelectAll?: boolean;\\n    fixed?: boolean;\\n    columnWidth?: string | number;\\n    columnTitle?: string | React.ReactNode;\\n    checkStrictly?: boolean;\\n    renderCell?: (value: boolean, record: T, index: number, originNode: React.ReactNode) => React.ReactNode | RcRenderedCell<T>;\\n}\\nexport declare type TransformColumns<RecordType> = (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\nexport interface TableCurrentDataSource<RecordType> {\\n    currentDataSource: RecordType[];\\n    action: TableAction;\\n}\\nexport interface SorterResult<RecordType> {\\n    column?: ColumnType<RecordType>;\\n    order?: SortOrder;\\n    field?: Key | readonly Key[];\\n    columnKey?: Key;\\n}\\nexport declare type GetPopupContainer = (triggerNode: HTMLElement) => HTMLElement;\\ndeclare type TablePaginationPosition = \'topLeft\' | \'topCenter\' | \'topRight\' | \'bottomLeft\' | \'bottomCenter\' | \'bottomRight\';\\nexport interface TablePaginationConfig extends PaginationProps {\\n    position?: TablePaginationPosition[];\\n}\\n","antd/table/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\nimport \'../../empty/style\';\\nimport \'../../radio/style\';\\nimport \'../../checkbox/style\';\\nimport \'../../dropdown/style\';\\nimport \'../../spin/style\';\\nimport \'../../pagination/style\';\\nimport \'../../tooltip/style\';\\n","antd/table/Table.d.ts":"/// <reference types=\\"react\\" />\\nimport { TableProps as RcTableProps } from \'rc-table/lib/Table\';\\nimport { SpinProps } from \'../spin\';\\nimport { TooltipProps } from \'../tooltip\';\\nimport { TableRowSelection, ColumnsType, TableCurrentDataSource, SorterResult, Key, GetPopupContainer, TablePaginationConfig, SortOrder, TableLocale } from \'./interface\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport { ColumnsType, TablePaginationConfig };\\nexport interface TableProps<RecordType> extends Omit<RcTableProps<RecordType>, \'transformColumns\' | \'internalHooks\' | \'internalRefs\' | \'data\' | \'columns\' | \'scroll\' | \'emptyText\'> {\\n    dropdownPrefixCls?: string;\\n    dataSource?: RcTableProps<RecordType>[\'data\'];\\n    columns?: ColumnsType<RecordType>;\\n    pagination?: false | TablePaginationConfig;\\n    loading?: boolean | SpinProps;\\n    size?: SizeType;\\n    bordered?: boolean;\\n    locale?: TableLocale;\\n    onChange?: (pagination: TablePaginationConfig, filters: Record<string, (Key | boolean)[] | null>, sorter: SorterResult<RecordType> | SorterResult<RecordType>[], extra: TableCurrentDataSource<RecordType>) => void;\\n    rowSelection?: TableRowSelection<RecordType>;\\n    getPopupContainer?: GetPopupContainer;\\n    scroll?: RcTableProps<RecordType>[\'scroll\'] & {\\n        scrollToFirstRowOnChange?: boolean;\\n    };\\n    sortDirections?: SortOrder[];\\n    showSorterTooltip?: boolean | TooltipProps;\\n}\\ndeclare function Table<RecordType extends object = any>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var defaultProps: {\\n        rowKey: string;\\n    };\\n    var SELECTION_ALL: \\"SELECT_ALL\\";\\n    var SELECTION_INVERT: \\"SELECT_INVERT\\";\\n    var SELECTION_NONE: \\"SELECT_NONE\\";\\n    var Column: typeof import(\\"./Column\\").default;\\n    var ColumnGroup: typeof import(\\"./ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"rc-table/lib/Footer/Cell\\").default;\\n        Row: typeof import(\\"rc-table/lib/Footer/Row\\").default;\\n    };\\n}\\nexport default Table;\\n","antd/table/util.d.ts":"import { ColumnType, ColumnTitle, ColumnTitleProps, Key } from \'./interface\';\\nexport declare function getColumnKey<RecordType>(column: ColumnType<RecordType>, defaultKey: string): Key;\\nexport declare function getColumnPos(index: number, pos?: string): string;\\nexport declare function renderColumnTitle<RecordType>(title: ColumnTitle<RecordType>, props: ColumnTitleProps<RecordType>): any;\\n","antd/tabs/index.d.ts":"import * as React from \'react\';\\nimport { TabsProps as RcTabsProps, TabPaneProps } from \'rc-tabs\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\nexport declare type TabsType = \'line\' | \'card\' | \'editable-card\';\\nexport declare type TabsPosition = \'top\' | \'right\' | \'bottom\' | \'left\';\\nexport { TabPaneProps };\\nexport interface TabsProps extends Omit<RcTabsProps, \'editable\'> {\\n    type?: TabsType;\\n    size?: SizeType;\\n    hideAdd?: boolean;\\n    centered?: boolean;\\n    addIcon?: React.ReactNode;\\n    onEdit?: (e: React.MouseEvent | React.KeyboardEvent | string, action: \'add\' | \'remove\') => void;\\n}\\ndeclare function Tabs({ type, className, size, onEdit, hideAdd, centered, addIcon, ...props }: TabsProps): JSX.Element;\\ndeclare namespace Tabs {\\n    var TabPane: typeof import(\\"rc-tabs\\").TabPane;\\n}\\nexport default Tabs;\\n","antd/tabs/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/tag/CheckableTag.d.ts":"import * as React from \'react\';\\nexport interface CheckableTagProps {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    /**\\n     * It is an absolute controlled component and has no uncontrolled mode.\\n     *\\n     * .zh-cn \u8be5\u7ec4\u4ef6\u4e3a\u5b8c\u5168\u53d7\u63a7\u7ec4\u4ef6\uff0c\u4e0d\u652f\u6301\u975e\u53d7\u63a7\u7528\u6cd5\u3002\\n     */\\n    checked: boolean;\\n    onChange?: (checked: boolean) => void;\\n    onClick?: (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\\n}\\ndeclare const CheckableTag: React.FC<CheckableTagProps>;\\nexport default CheckableTag;\\n","antd/tag/index.d.ts":"import * as React from \'react\';\\nimport CheckableTag from \'./CheckableTag\';\\nimport { PresetColorType, PresetStatusColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { CheckableTagProps } from \'./CheckableTag\';\\nexport interface TagProps extends React.HTMLAttributes<HTMLSpanElement> {\\n    prefixCls?: string;\\n    className?: string;\\n    color?: LiteralUnion<PresetColorType | PresetStatusColorType, string>;\\n    closable?: boolean;\\n    closeIcon?: React.ReactNode;\\n    visible?: boolean;\\n    onClose?: (e: React.MouseEvent<HTMLElement>) => void;\\n    style?: React.CSSProperties;\\n    icon?: React.ReactNode;\\n}\\nexport interface TagType extends React.ForwardRefExoticComponent<TagProps & React.RefAttributes<HTMLElement>> {\\n    CheckableTag: typeof CheckableTag;\\n}\\ndeclare const Tag: TagType;\\nexport default Tag;\\n","antd/tag/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/time-picker/index.d.ts":"import { Moment } from \'moment\';\\nimport * as React from \'react\';\\nimport { PickerTimeProps, RangePickerTimeProps } from \'../date-picker/generatePicker\';\\nimport { Omit } from \'../_util/type\';\\nexport interface TimePickerLocale {\\n    placeholder?: string;\\n    rangePlaceholder?: [string, string];\\n}\\nexport interface TimeRangePickerProps extends Omit<RangePickerTimeProps<Moment>, \'picker\'> {\\n}\\ndeclare const RangePicker: React.ForwardRefExoticComponent<TimeRangePickerProps & React.RefAttributes<any>>;\\nexport interface TimePickerProps extends Omit<PickerTimeProps<Moment>, \'picker\'> {\\n    addon?: () => React.ReactNode;\\n    popupClassName?: string;\\n}\\ndeclare const TimePicker: React.ForwardRefExoticComponent<TimePickerProps & React.RefAttributes<any>>;\\ndeclare type MergedTimePicker = typeof TimePicker & {\\n    RangePicker: typeof RangePicker;\\n};\\ndeclare const _default: MergedTimePicker;\\nexport default _default;\\n","antd/time-picker/locale/ar_EG.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/az_AZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/bg_BG.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/by_BY.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ca_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/cs_CZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/da_DK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/de_DE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/el_GR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/en_GB.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/en_US.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/es_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/et_EE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fa_IR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fi_FI.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fr_BE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/fr_FR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ga_IE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/gl_ES.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/he_IL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hi_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hr_HR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/hu_HU.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/id_ID.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/is_IS.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/it_IT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ja_JP.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kk_KZ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kmr_IQ.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/kn_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ko_KR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/lt_LT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/lv_LV.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/mk_MK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/mn_MN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ms_MY.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nb_NO.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nl_BE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/nl_NL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pl_PL.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pt_BR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/pt_PT.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ro_RO.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ru_RU.d.ts":"/** Created by Andrey Gayvoronsky on 13/04/16. */\\nimport { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sk_SK.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sl_SI.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sr_RS.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/sv_SE.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/ta_IN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/th_TH.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/tr_TR.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/uk_UA.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/vi_VN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/zh_CN.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/locale/zh_TW.d.ts":"import { TimePickerLocale } from \'../index\';\\ndeclare const locale: TimePickerLocale;\\nexport default locale;\\n","antd/time-picker/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../date-picker/style\';\\n","antd/timeline/index.d.ts":"import Timeline from \'./Timeline\';\\nexport { TimelineProps } from \'./Timeline\';\\nexport { TimelineItemProps } from \'./TimelineItem\';\\nexport default Timeline;\\n","antd/timeline/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/timeline/Timeline.d.ts":"import * as React from \'react\';\\nimport { TimelineItemProps } from \'./TimelineItem\';\\nexport interface TimelineProps {\\n    prefixCls?: string;\\n    className?: string;\\n    /** \u6307\u5b9a\u6700\u540e\u4e00\u4e2a\u5e7d\u7075\u8282\u70b9\u662f\u5426\u5b58\u5728\u6216\u5185\u5bb9 */\\n    pending?: React.ReactNode;\\n    pendingDot?: React.ReactNode;\\n    style?: React.CSSProperties;\\n    reverse?: boolean;\\n    mode?: \'left\' | \'alternate\' | \'right\';\\n}\\ninterface TimelineType extends React.FC<TimelineProps> {\\n    Item: React.FC<TimelineItemProps>;\\n}\\ndeclare const Timeline: TimelineType;\\nexport default Timeline;\\n","antd/timeline/TimelineItem.d.ts":"import * as React from \'react\';\\nexport interface TimelineItemProps {\\n    prefixCls?: string;\\n    className?: string;\\n    color?: string;\\n    dot?: React.ReactNode;\\n    pending?: boolean;\\n    position?: string;\\n    style?: React.CSSProperties;\\n    label?: React.ReactNode;\\n}\\nexport interface TimeLineItemProps extends TimelineItemProps {\\n    __deprecated_do_not_use_it__?: any;\\n}\\ndeclare const TimelineItem: React.FC<TimelineItemProps>;\\nexport default TimelineItem;\\n","antd/tooltip/index.d.ts":"import * as React from \'react\';\\nimport { TooltipProps as RcTooltipProps } from \'rc-tooltip/lib/Tooltip\';\\nimport { placements as Placements } from \'rc-tooltip/lib/placements\';\\nimport { AdjustOverflow, PlacementsConfig } from \'./placements\';\\nimport { PresetColorType } from \'../_util/colors\';\\nimport { LiteralUnion } from \'../_util/type\';\\nexport { AdjustOverflow, PlacementsConfig };\\nexport declare type TooltipPlacement = \'top\' | \'left\' | \'right\' | \'bottom\' | \'topLeft\' | \'topRight\' | \'bottomLeft\' | \'bottomRight\' | \'leftTop\' | \'leftBottom\' | \'rightTop\' | \'rightBottom\';\\nexport interface TooltipAlignConfig {\\n    points?: [string, string];\\n    offset?: [number | string, number | string];\\n    targetOffset?: [number | string, number | string];\\n    overflow?: {\\n        adjustX: boolean;\\n        adjustY: boolean;\\n    };\\n    useCssRight?: boolean;\\n    useCssBottom?: boolean;\\n    useCssTransform?: boolean;\\n}\\nexport interface AbstractTooltipProps extends Partial<Omit<RcTooltipProps, \'children\'>> {\\n    style?: React.CSSProperties;\\n    className?: string;\\n    color?: LiteralUnion<PresetColorType, string>;\\n    placement?: TooltipPlacement;\\n    builtinPlacements?: typeof Placements;\\n    openClassName?: string;\\n    arrowPointAtCenter?: boolean;\\n    autoAdjustOverflow?: boolean | AdjustOverflow;\\n    getPopupContainer?: (triggerNode: HTMLElement) => HTMLElement;\\n    children?: React.ReactNode;\\n}\\nexport declare type RenderFunction = () => React.ReactNode;\\nexport interface TooltipPropsWithOverlay extends AbstractTooltipProps {\\n    title?: React.ReactNode | RenderFunction;\\n    overlay: React.ReactNode | RenderFunction;\\n}\\nexport interface TooltipPropsWithTitle extends AbstractTooltipProps {\\n    title: React.ReactNode | RenderFunction;\\n    overlay?: React.ReactNode | RenderFunction;\\n}\\nexport declare type TooltipProps = TooltipPropsWithTitle | TooltipPropsWithOverlay;\\ndeclare const Tooltip: React.ForwardRefExoticComponent<(TooltipPropsWithOverlay & React.RefAttributes<unknown>) | (TooltipPropsWithTitle & React.RefAttributes<unknown>)>;\\nexport default Tooltip;\\n","antd/tooltip/placements.d.ts":"import { BuildInPlacements } from \'rc-trigger\';\\nexport interface AdjustOverflow {\\n    adjustX?: 0 | 1;\\n    adjustY?: 0 | 1;\\n}\\nexport interface PlacementsConfig {\\n    arrowWidth?: number;\\n    horizontalArrowShift?: number;\\n    verticalArrowShift?: number;\\n    arrowPointAtCenter?: boolean;\\n    autoAdjustOverflow?: boolean | AdjustOverflow;\\n}\\nexport declare function getOverflowOptions(autoAdjustOverflow?: boolean | AdjustOverflow): {\\n    adjustX: number;\\n    adjustY: number;\\n};\\nexport default function getPlacements(config: PlacementsConfig): BuildInPlacements;\\n","antd/tooltip/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/transfer/index.d.ts":"import * as React from \'react\';\\nimport List, { TransferListProps } from \'./list\';\\nimport Search from \'./search\';\\nimport { RenderEmptyHandler } from \'../config-provider\';\\nimport { TransferListBodyProps } from \'./ListBody\';\\nimport { PaginationType } from \'./interface\';\\nexport { TransferListProps } from \'./list\';\\nexport { TransferOperationProps } from \'./operation\';\\nexport { TransferSearchProps } from \'./search\';\\nexport declare type TransferDirection = \'left\' | \'right\';\\nexport interface RenderResultObject {\\n    label: React.ReactElement;\\n    value: string;\\n}\\nexport declare type RenderResult = React.ReactElement | RenderResultObject | string | null;\\nexport interface TransferItem {\\n    key?: string;\\n    title?: string;\\n    description?: string;\\n    disabled?: boolean;\\n    [name: string]: any;\\n}\\nexport declare type KeyWise<T> = T & {\\n    key: string;\\n};\\nexport declare type KeyWiseTransferItem = KeyWise<TransferItem>;\\ndeclare type TransferRender<RecordType> = (item: RecordType) => RenderResult;\\nexport interface ListStyle {\\n    direction: TransferDirection;\\n}\\nexport declare type SelectAllLabel = React.ReactNode | ((info: {\\n    selectedCount: number;\\n    totalCount: number;\\n}) => React.ReactNode);\\nexport interface TransferLocale {\\n    titles: React.ReactNode[];\\n    notFoundContent?: React.ReactNode;\\n    searchPlaceholder: string;\\n    itemUnit: string;\\n    itemsUnit: string;\\n    remove: string;\\n    selectAll: string;\\n    selectCurrent: string;\\n    selectInvert: string;\\n    removeAll: string;\\n    removeCurrent: string;\\n}\\nexport interface TransferProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    disabled?: boolean;\\n    dataSource: RecordType[];\\n    targetKeys?: string[];\\n    selectedKeys?: string[];\\n    render?: TransferRender<RecordType>;\\n    onChange?: (targetKeys: string[], direction: TransferDirection, moveKeys: string[]) => void;\\n    onSelectChange?: (sourceSelectedKeys: string[], targetSelectedKeys: string[]) => void;\\n    style?: React.CSSProperties;\\n    listStyle: ((style: ListStyle) => React.CSSProperties) | React.CSSProperties;\\n    operationStyle?: React.CSSProperties;\\n    titles?: React.ReactNode[];\\n    operations?: string[];\\n    showSearch?: boolean;\\n    filterOption?: (inputValue: string, item: RecordType) => boolean;\\n    locale?: Partial<TransferLocale>;\\n    footer?: (props: TransferListProps<RecordType>) => React.ReactNode;\\n    rowKey?: (record: RecordType) => string;\\n    onSearch?: (direction: TransferDirection, value: string) => void;\\n    onScroll?: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    children?: (props: TransferListBodyProps<RecordType>) => React.ReactNode;\\n    showSelectAll?: boolean;\\n    selectAllLabels?: SelectAllLabel[];\\n    oneWay?: boolean;\\n    pagination?: PaginationType;\\n}\\ninterface TransferState {\\n    sourceSelectedKeys: string[];\\n    targetSelectedKeys: string[];\\n}\\ndeclare class Transfer<RecordType extends TransferItem = TransferItem> extends React.Component<TransferProps<RecordType>, TransferState> {\\n    static List: typeof List;\\n    static Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: import(\\"./operation\\").TransferOperationProps) => JSX.Element;\\n    static Search: typeof Search;\\n    static defaultProps: {\\n        dataSource: never[];\\n        locale: {};\\n        showSearch: boolean;\\n        listStyle: () => void;\\n    };\\n    static getDerivedStateFromProps<T>({ selectedKeys, targetKeys, pagination, children, }: TransferProps<T>): {\\n        sourceSelectedKeys: string[];\\n        targetSelectedKeys: string[];\\n    } | null;\\n    separatedDataSource: {\\n        leftDataSource: RecordType[];\\n        rightDataSource: RecordType[];\\n    } | null;\\n    constructor(props: TransferProps<RecordType>);\\n    setStateKeys: (direction: TransferDirection, keys: string[] | ((prevKeys: string[]) => string[])) => void;\\n    getTitles(transferLocale: TransferLocale): React.ReactNode[];\\n    getLocale: (transferLocale: TransferLocale, renderEmpty: RenderEmptyHandler) => {\\n        titles: React.ReactNode[];\\n        notFoundContent: React.ReactNode;\\n        searchPlaceholder: string;\\n        itemUnit: string;\\n        itemsUnit: string;\\n        remove: string;\\n        selectAll: string;\\n        selectCurrent: string;\\n        selectInvert: string;\\n        removeAll: string;\\n        removeCurrent: string;\\n    };\\n    moveTo: (direction: TransferDirection) => void;\\n    moveToLeft: () => void;\\n    moveToRight: () => void;\\n    onItemSelectAll: (direction: TransferDirection, selectedKeys: string[], checkAll: boolean) => void;\\n    onLeftItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;\\n    onRightItemSelectAll: (selectedKeys: string[], checkAll: boolean) => void;\\n    handleFilter: (direction: TransferDirection, e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleLeftFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleRightFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleClear: (direction: TransferDirection) => void;\\n    handleLeftClear: () => void;\\n    handleRightClear: () => void;\\n    onItemSelect: (direction: TransferDirection, selectedKey: string, checked: boolean) => void;\\n    onLeftItemSelect: (selectedKey: string, checked: boolean) => void;\\n    onRightItemSelect: (selectedKey: string, checked: boolean) => void;\\n    onRightItemRemove: (selectedKeys: string[]) => void;\\n    handleScroll: (direction: TransferDirection, e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleLeftScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleRightScroll: (e: React.SyntheticEvent<HTMLUListElement>) => void;\\n    handleSelectChange(direction: TransferDirection, holder: string[]): void;\\n    handleListStyle: (listStyle: React.CSSProperties | ((style: ListStyle) => React.CSSProperties), direction: TransferDirection) => React.CSSProperties;\\n    separateDataSource(): {\\n        leftDataSource: KeyWise<RecordType>[];\\n        rightDataSource: KeyWise<RecordType>[];\\n    };\\n    renderTransfer: (transferLocale: TransferLocale) => JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Transfer;\\n","antd/transfer/interface.d.ts":"export declare type PaginationType = boolean | {\\n    pageSize?: number;\\n};\\n","antd/transfer/list.d.ts":"import * as React from \'react\';\\nimport { TransferDirection, RenderResult, SelectAllLabel, TransferLocale, KeyWiseTransferItem } from \'./index\';\\nimport DefaultListBody, { TransferListBodyProps } from \'./ListBody\';\\nimport { PaginationType } from \'./interface\';\\nexport interface RenderedItem<RecordType> {\\n    renderedText: string;\\n    renderedEl: React.ReactNode;\\n    item: RecordType;\\n}\\ndeclare type RenderListFunction<T> = (props: TransferListBodyProps<T>) => React.ReactNode;\\nexport interface TransferListProps<RecordType> extends TransferLocale {\\n    prefixCls: string;\\n    titleText: React.ReactNode;\\n    dataSource: RecordType[];\\n    filterOption?: (filterText: string, item: RecordType) => boolean;\\n    style?: React.CSSProperties;\\n    checkedKeys: string[];\\n    handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    onItemSelect: (key: string, check: boolean) => void;\\n    onItemSelectAll: (dataSource: string[], checkAll: boolean) => void;\\n    onItemRemove?: (keys: string[]) => void;\\n    handleClear: () => void;\\n    /** Render item */\\n    render?: (item: RecordType) => RenderResult;\\n    showSearch?: boolean;\\n    searchPlaceholder: string;\\n    itemUnit: string;\\n    itemsUnit: string;\\n    renderList?: RenderListFunction<RecordType>;\\n    footer?: (props: TransferListProps<RecordType>) => React.ReactNode;\\n    onScroll: (e: React.UIEvent<HTMLUListElement>) => void;\\n    disabled?: boolean;\\n    direction: TransferDirection;\\n    showSelectAll?: boolean;\\n    selectAllLabel?: SelectAllLabel;\\n    showRemove?: boolean;\\n    pagination?: PaginationType;\\n}\\ninterface TransferListState {\\n    /** Filter input value */\\n    filterValue: string;\\n}\\nexport default class TransferList<RecordType extends KeyWiseTransferItem> extends React.PureComponent<TransferListProps<RecordType>, TransferListState> {\\n    static defaultProps: {\\n        dataSource: never[];\\n        titleText: string;\\n        showSearch: boolean;\\n    };\\n    timer: number;\\n    triggerScrollTimer: number;\\n    defaultListBodyRef: React.RefObject<DefaultListBody<RecordType>>;\\n    constructor(props: TransferListProps<RecordType>);\\n    componentWillUnmount(): void;\\n    getCheckStatus(filteredItems: RecordType[]): \\"none\\" | \\"all\\" | \\"part\\";\\n    getFilteredItems(dataSource: RecordType[], filterValue: string): {\\n        filteredItems: RecordType[];\\n        filteredRenderItems: RenderedItem<RecordType>[];\\n    };\\n    handleFilter: (e: React.ChangeEvent<HTMLInputElement>) => void;\\n    handleClear: () => void;\\n    matchFilter: (text: string, item: RecordType) => boolean;\\n    getCurrentPageItems: () => void;\\n    renderListBody: (renderList: RenderListFunction<RecordType> | undefined, props: TransferListBodyProps<RecordType>) => {\\n        customize: boolean;\\n        bodyContent: {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | null | undefined;\\n    };\\n    getListBody(prefixCls: string, searchPlaceholder: string, filterValue: string, filteredItems: RecordType[], notFoundContent: React.ReactNode, filteredRenderItems: RenderedItem<RecordType>[], checkedKeys: string[], renderList?: RenderListFunction<RecordType>, showSearch?: boolean, disabled?: boolean): React.ReactNode;\\n    getCheckBox(filteredItems: RecordType[], onItemSelectAll: (dataSource: string[], checkAll: boolean) => void, showSelectAll?: boolean, disabled?: boolean): false | JSX.Element;\\n    renderItem: (item: RecordType) => RenderedItem<RecordType>;\\n    getSelectAllLabel: (selectedCount: number, totalCount: number) => React.ReactNode;\\n    render(): JSX.Element;\\n}\\nexport {};\\n","antd/transfer/ListBody.d.ts":"import * as React from \'react\';\\nimport { ElementOf, Omit } from \'../_util/type\';\\nimport { TransferListProps, RenderedItem } from \'./list\';\\nimport { KeyWiseTransferItem } from \'.\';\\nexport declare const OmitProps: [\\"handleFilter\\", \\"handleClear\\", \\"checkedKeys\\"];\\nexport declare type OmitProp = ElementOf<typeof OmitProps>;\\ndeclare type PartialTransferListProps<RecordType> = Omit<TransferListProps<RecordType>, OmitProp>;\\nexport interface TransferListBodyProps<RecordType> extends PartialTransferListProps<RecordType> {\\n    filteredItems: RecordType[];\\n    filteredRenderItems: RenderedItem<RecordType>[];\\n    selectedKeys: string[];\\n}\\ninterface TransferListBodyState {\\n    current: number;\\n}\\ndeclare class ListBody<RecordType extends KeyWiseTransferItem> extends React.Component<TransferListBodyProps<RecordType>, TransferListBodyState> {\\n    state: {\\n        current: number;\\n    };\\n    static getDerivedStateFromProps<T>({ filteredRenderItems, pagination }: TransferListBodyProps<T>, { current }: TransferListBodyState): {\\n        current: number;\\n    } | null;\\n    onItemSelect: (item: RecordType) => void;\\n    onItemRemove: (item: RecordType) => void;\\n    onPageChange: (current: number) => void;\\n    getItems: () => RenderedItem<RecordType>[];\\n    render(): JSX.Element;\\n}\\nexport default ListBody;\\n","antd/transfer/ListItem.d.ts":"import * as React from \'react\';\\ndeclare type ListItemProps<RecordType> = {\\n    renderedText?: string | number;\\n    renderedEl: React.ReactNode;\\n    disabled?: boolean;\\n    checked?: boolean;\\n    prefixCls: string;\\n    onClick: (item: RecordType) => void;\\n    onRemove?: (item: RecordType) => void;\\n    item: RecordType;\\n    showRemove?: boolean;\\n};\\ndeclare const _default: React.MemoExoticComponent<(<RecordType extends import(\\".\\").KeyWise<import(\\".\\").TransferItem>>(props: ListItemProps<RecordType>) => JSX.Element)>;\\nexport default _default;\\n","antd/transfer/operation.d.ts":"import * as React from \'react\';\\nimport { DirectionType } from \'../config-provider\';\\nexport interface TransferOperationProps {\\n    className?: string;\\n    leftArrowText?: string;\\n    rightArrowText?: string;\\n    moveToLeft?: React.MouseEventHandler<HTMLButtonElement>;\\n    moveToRight?: React.MouseEventHandler<HTMLButtonElement>;\\n    leftActive?: boolean;\\n    rightActive?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    direction?: DirectionType;\\n    oneWay?: boolean;\\n}\\ndeclare const Operation: ({ disabled, moveToLeft, moveToRight, leftArrowText, rightArrowText, leftActive, rightActive, className, style, direction, oneWay, }: TransferOperationProps) => JSX.Element;\\nexport default Operation;\\n","antd/transfer/search.d.ts":"import * as React from \'react\';\\nexport interface TransferSearchProps {\\n    prefixCls?: string;\\n    placeholder?: string;\\n    onChange?: (e: React.FormEvent<HTMLElement>) => void;\\n    handleClear?: (e: React.MouseEvent<HTMLElement>) => void;\\n    value?: string;\\n    disabled?: boolean;\\n}\\nexport default function Search(props: TransferSearchProps): JSX.Element;\\n","antd/transfer/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../empty/style\';\\nimport \'../../checkbox/style\';\\nimport \'../../button/style\';\\nimport \'../../input/style\';\\nimport \'../../menu/style\';\\nimport \'../../dropdown/style\';\\nimport \'../../pagination/style\';\\n","antd/tree/DirectoryTree.d.ts":"import * as React from \'react\';\\nimport RcTree from \'rc-tree\';\\nimport { Key } from \'rc-tree/lib/interface\';\\nimport { TreeProps } from \'./Tree\';\\nexport declare type ExpandAction = false | \'click\' | \'doubleClick\';\\nexport interface DirectoryTreeProps extends TreeProps {\\n    expandAction?: ExpandAction;\\n}\\nexport interface DirectoryTreeState {\\n    expandedKeys?: Key[];\\n    selectedKeys?: Key[];\\n}\\ndeclare const ForwardDirectoryTree: React.ForwardRefExoticComponent<DirectoryTreeProps & React.RefAttributes<RcTree>>;\\nexport default ForwardDirectoryTree;\\n","antd/tree/index.d.ts":"import Tree from \'./Tree\';\\nexport { EventDataNode, DataNode } from \'rc-tree/lib/interface\';\\nexport { TreeProps, AntTreeNode, AntTreeNodeMouseEvent, AntTreeNodeExpandedEvent, AntTreeNodeCheckedEvent, AntTreeNodeSelectedEvent, AntdTreeNodeAttribute, AntTreeNodeProps, } from \'./Tree\';\\nexport { ExpandAction as DirectoryTreeExpandAction, DirectoryTreeProps } from \'./DirectoryTree\';\\nexport default Tree;\\n","antd/tree/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\n","antd/tree/Tree.d.ts":"import * as React from \'react\';\\nimport RcTree, { TreeNode, TreeProps as RcTreeProps } from \'rc-tree\';\\nimport { DataNode, Key } from \'rc-tree/lib/interface\';\\nimport DirectoryTree from \'./DirectoryTree\';\\nexport interface AntdTreeNodeAttribute {\\n    eventKey: string;\\n    prefixCls: string;\\n    className: string;\\n    expanded: boolean;\\n    selected: boolean;\\n    checked: boolean;\\n    halfChecked: boolean;\\n    children: React.ReactNode;\\n    title: React.ReactNode;\\n    pos: string;\\n    dragOver: boolean;\\n    dragOverGapTop: boolean;\\n    dragOverGapBottom: boolean;\\n    isLeaf: boolean;\\n    selectable: boolean;\\n    disabled: boolean;\\n    disableCheckbox: boolean;\\n}\\nexport interface AntTreeNodeProps {\\n    className?: string;\\n    checkable?: boolean;\\n    disabled?: boolean;\\n    disableCheckbox?: boolean;\\n    title?: string | React.ReactNode;\\n    key?: Key;\\n    eventKey?: string;\\n    isLeaf?: boolean;\\n    checked?: boolean;\\n    expanded?: boolean;\\n    loading?: boolean;\\n    selected?: boolean;\\n    selectable?: boolean;\\n    icon?: ((treeNode: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;\\n    children?: React.ReactNode;\\n    [customProp: string]: any;\\n}\\nexport interface AntTreeNode extends React.Component<AntTreeNodeProps, {}> {\\n}\\nexport interface AntTreeNodeBaseEvent {\\n    node: AntTreeNode;\\n    nativeEvent: MouseEvent;\\n}\\nexport interface AntTreeNodeCheckedEvent extends AntTreeNodeBaseEvent {\\n    event: \'check\';\\n    checked?: boolean;\\n    checkedNodes?: AntTreeNode[];\\n}\\nexport interface AntTreeNodeSelectedEvent extends AntTreeNodeBaseEvent {\\n    event: \'select\';\\n    selected?: boolean;\\n    selectedNodes?: DataNode[];\\n}\\nexport interface AntTreeNodeExpandedEvent extends AntTreeNodeBaseEvent {\\n    expanded?: boolean;\\n}\\nexport interface AntTreeNodeMouseEvent {\\n    node: AntTreeNode;\\n    event: React.DragEvent<HTMLElement>;\\n}\\nexport interface AntTreeNodeDragEnterEvent extends AntTreeNodeMouseEvent {\\n    expandedKeys: Key[];\\n}\\nexport interface AntTreeNodeDropEvent {\\n    node: AntTreeNode;\\n    dragNode: AntTreeNode;\\n    dragNodesKeys: Key[];\\n    dropPosition: number;\\n    dropToGap?: boolean;\\n    event: React.MouseEvent<HTMLElement>;\\n}\\nexport declare type TreeNodeNormal = DataNode;\\nexport interface TreeProps extends Omit<RcTreeProps, \'prefixCls\' | \'showLine\' | \'direction\'> {\\n    showLine?: boolean | {\\n        showLeafIcon: boolean;\\n    };\\n    className?: string;\\n    /** \u662f\u5426\u652f\u6301\u591a\u9009 */\\n    multiple?: boolean;\\n    /** \u662f\u5426\u81ea\u52a8\u5c55\u5f00\u7236\u8282\u70b9 */\\n    autoExpandParent?: boolean;\\n    /** Checkable\u72b6\u6001\u4e0b\u8282\u70b9\u9009\u62e9\u5b8c\u5168\u53d7\u63a7\uff08\u7236\u5b50\u8282\u70b9\u9009\u4e2d\u72b6\u6001\u4e0d\u518d\u5173\u8054\uff09 */\\n    checkStrictly?: boolean;\\n    /** \u662f\u5426\u652f\u6301\u9009\u4e2d */\\n    checkable?: boolean;\\n    /** \u662f\u5426\u7981\u7528\u6811 */\\n    disabled?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u6240\u6709\u6811\u8282\u70b9 */\\n    defaultExpandAll?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u5bf9\u5e94\u6811\u8282\u70b9 */\\n    defaultExpandParent?: boolean;\\n    /** \u9ed8\u8ba4\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9 */\\n    defaultExpandedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9 */\\n    expandedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9 */\\n    checkedKeys?: Key[] | {\\n        checked: Key[];\\n        halfChecked: Key[];\\n    };\\n    /** \u9ed8\u8ba4\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9 */\\n    defaultCheckedKeys?: Key[];\\n    /** \uff08\u53d7\u63a7\uff09\u8bbe\u7f6e\u9009\u4e2d\u7684\u6811\u8282\u70b9 */\\n    selectedKeys?: Key[];\\n    /** \u9ed8\u8ba4\u9009\u4e2d\u7684\u6811\u8282\u70b9 */\\n    defaultSelectedKeys?: Key[];\\n    selectable?: boolean;\\n    /** \u70b9\u51fb\u6811\u8282\u70b9\u89e6\u53d1 */\\n    filterAntTreeNode?: (node: AntTreeNode) => boolean;\\n    loadedKeys?: Key[];\\n    /** \u8bbe\u7f6e\u8282\u70b9\u53ef\u62d6\u62fd\uff08IE>8\uff09 */\\n    draggable?: ((node: DataNode) => boolean) | boolean;\\n    style?: React.CSSProperties;\\n    showIcon?: boolean;\\n    icon?: ((nodeProps: AntdTreeNodeAttribute) => React.ReactNode) | React.ReactNode;\\n    switcherIcon?: React.ReactElement<any>;\\n    prefixCls?: string;\\n    children?: React.ReactNode;\\n    blockNode?: boolean;\\n}\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<TreeProps & React.RefAttributes<RcTree>> {\\n    TreeNode: typeof TreeNode;\\n    DirectoryTree: typeof DirectoryTree;\\n}\\ndeclare const Tree: CompoundedComponent;\\nexport default Tree;\\n","antd/tree/utils/dictUtil.d.ts":"import { DataNode, Key } from \'rc-tree/lib/interface\';\\n/** \u8ba1\u7b97\u9009\u4e2d\u8303\u56f4\uff0c\u53ea\u8003\u8651expanded\u60c5\u51b5\u4ee5\u4f18\u5316\u6027\u80fd */\\nexport declare function calcRangeKeys({ treeData, expandedKeys, startKey, endKey, }: {\\n    treeData: DataNode[];\\n    expandedKeys: Key[];\\n    startKey?: Key;\\n    endKey?: Key;\\n}): Key[];\\nexport declare function convertDirectoryKeysToNodes(treeData: DataNode[], keys: Key[]): DataNode[];\\n","antd/tree/utils/dropIndicator.d.ts":"/// <reference types=\\"react\\" />\\nexport declare const offset = 4;\\nexport default function dropIndicatorRender(props: {\\n    dropPosition: -1 | 0 | 1;\\n    dropLevelOffset: number;\\n    indent: number;\\n    prefixCls: string;\\n    direction: \'ltr\' | \'rtl\';\\n}): JSX.Element;\\n","antd/tree/utils/iconUtil.d.ts":"import * as React from \'react\';\\nimport { AntTreeNodeProps } from \'../Tree\';\\nexport default function renderSwitcherIcon(prefixCls: string, switcherIcon: React.ReactNode | null | undefined, showLine: boolean | {\\n    showLeafIcon: boolean;\\n} | undefined, { isLeaf, expanded, loading }: AntTreeNodeProps): {} | null;\\n","antd/tree-select/index.d.ts":"import * as React from \'react\';\\nimport { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, TreeSelectProps as RcTreeSelectProps } from \'rc-tree-select\';\\nimport { DefaultValueType } from \'rc-tree-select/lib/interface\';\\nimport { SizeType } from \'../config-provider/SizeContext\';\\ndeclare type RawValue = string | number;\\nexport interface LabeledValue {\\n    key?: string;\\n    value: RawValue;\\n    label: React.ReactNode;\\n}\\nexport declare type SelectValue = RawValue | RawValue[] | LabeledValue | LabeledValue[];\\nexport interface TreeSelectProps<T> extends Omit<RcTreeSelectProps<T>, \'showTreeIcon\' | \'treeMotion\' | \'inputIcon\' | \'mode\' | \'getInputElement\' | \'backfill\'> {\\n    suffixIcon?: React.ReactNode;\\n    size?: SizeType;\\n    bordered?: boolean;\\n}\\nexport interface RefTreeSelectProps {\\n    focus: () => void;\\n    blur: () => void;\\n}\\ndeclare const TreeSelectRef: <T extends DefaultValueType>(props: TreeSelectProps<T> & {\\n    ref?: ((instance: RefTreeSelectProps | null) => void) | React.RefObject<RefTreeSelectProps> | null | undefined;\\n}) => React.ReactElement;\\ndeclare type InternalTreeSelectType = typeof TreeSelectRef;\\ninterface TreeSelectInterface extends InternalTreeSelectType {\\n    TreeNode: typeof TreeNode;\\n    SHOW_ALL: typeof SHOW_ALL;\\n    SHOW_PARENT: typeof SHOW_PARENT;\\n    SHOW_CHILD: typeof SHOW_CHILD;\\n}\\ndeclare const TreeSelect: TreeSelectInterface;\\nexport { TreeNode };\\nexport default TreeSelect;\\n","antd/tree-select/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../select/style\';\\nimport \'../../empty/style\';\\n","antd/typography/Base.d.ts":"import * as React from \'react\';\\nimport { AutoSizeType } from \'rc-textarea/lib/ResizableTextArea\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nimport { TypographyProps } from \'./Typography\';\\nexport declare type BaseType = \'secondary\' | \'success\' | \'warning\' | \'danger\';\\ninterface CopyConfig {\\n    text?: string;\\n    onCopy?: () => void;\\n    icon?: React.ReactNode;\\n    tooltips?: boolean | React.ReactNode;\\n}\\ninterface EditConfig {\\n    editing?: boolean;\\n    icon?: React.ReactNode;\\n    tooltip?: boolean | React.ReactNode;\\n    onStart?: () => void;\\n    onChange?: (value: string) => void;\\n    maxLength?: number;\\n    autoSize?: boolean | AutoSizeType;\\n}\\nexport interface EllipsisConfig {\\n    rows?: number;\\n    expandable?: boolean;\\n    suffix?: string;\\n    symbol?: React.ReactNode;\\n    onExpand?: React.MouseEventHandler<HTMLElement>;\\n    onEllipsis?: (ellipsis: boolean) => void;\\n    tooltip?: React.ReactNode;\\n}\\nexport interface BlockProps extends TypographyProps {\\n    title?: string;\\n    editable?: boolean | EditConfig;\\n    copyable?: boolean | CopyConfig;\\n    type?: BaseType;\\n    disabled?: boolean;\\n    ellipsis?: boolean | EllipsisConfig;\\n    code?: boolean;\\n    mark?: boolean;\\n    underline?: boolean;\\n    delete?: boolean;\\n    strong?: boolean;\\n    keyboard?: boolean;\\n}\\ninterface InternalBlockProps extends BlockProps {\\n    component: string;\\n}\\ninterface BaseState {\\n    edit: boolean;\\n    copied: boolean;\\n    ellipsisText: string;\\n    ellipsisContent: React.ReactNode;\\n    isEllipsis: boolean;\\n    expanded: boolean;\\n    clientRendered: boolean;\\n}\\ndeclare class Base extends React.Component<InternalBlockProps, BaseState> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    static defaultProps: {\\n        children: string;\\n    };\\n    static getDerivedStateFromProps(nextProps: BlockProps): {};\\n    context: ConfigConsumerProps;\\n    editIcon?: HTMLDivElement;\\n    contentRef: React.RefObject<HTMLElement>;\\n    copyId?: number;\\n    rafId?: number;\\n    expandStr?: string;\\n    copyStr?: string;\\n    copiedStr?: string;\\n    editStr?: string;\\n    state: BaseState;\\n    componentDidMount(): void;\\n    componentDidUpdate(prevProps: BlockProps): void;\\n    componentWillUnmount(): void;\\n    getPrefixCls: () => string;\\n    onExpandClick: React.MouseEventHandler<HTMLElement>;\\n    onEditClick: () => void;\\n    onEditChange: (value: string) => void;\\n    onEditCancel: () => void;\\n    onCopyClick: (e: React.MouseEvent<HTMLDivElement>) => void;\\n    getEditable(props?: BlockProps): EditConfig;\\n    getEllipsis(props?: BlockProps): EllipsisConfig;\\n    setEditRef: (node: HTMLDivElement) => void;\\n    triggerEdit: (edit: boolean) => void;\\n    resizeOnNextFrame: () => void;\\n    canUseCSSEllipsis(): boolean;\\n    syncEllipsis(): void;\\n    renderExpand(forceRender?: boolean): JSX.Element | null;\\n    renderEdit(): JSX.Element | undefined;\\n    renderCopy(): JSX.Element | undefined;\\n    renderEditInput(): JSX.Element;\\n    renderOperations(forceRenderExpanded?: boolean): (JSX.Element | null | undefined)[];\\n    renderContent(): JSX.Element;\\n    render(): JSX.Element;\\n}\\nexport default Base;\\n","antd/typography/Editable.d.ts":"import * as React from \'react\';\\nimport { AutoSizeType } from \'rc-textarea/lib/ResizableTextArea\';\\nimport { DirectionType } from \'../config-provider\';\\ninterface EditableProps {\\n    prefixCls?: string;\\n    value: string;\\n    [\'aria-label\']?: string;\\n    onSave: (value: string) => void;\\n    onCancel: () => void;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    direction?: DirectionType;\\n    maxLength?: number;\\n    autoSize?: boolean | AutoSizeType;\\n}\\ndeclare const Editable: React.FC<EditableProps>;\\nexport default Editable;\\n","antd/typography/index.d.ts":"import OriginTypography from \'./Typography\';\\nimport Text from \'./Text\';\\nimport Link from \'./Link\';\\nimport Title from \'./Title\';\\nimport Paragraph from \'./Paragraph\';\\nexport declare type TypographyProps = typeof OriginTypography & {\\n    Text: typeof Text;\\n    Link: typeof Link;\\n    Title: typeof Title;\\n    Paragraph: typeof Paragraph;\\n};\\ndeclare const Typography: TypographyProps;\\nexport default Typography;\\n","antd/typography/Link.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nexport interface LinkProps extends BlockProps, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \'type\'> {\\n    ellipsis?: boolean;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<LinkProps & React.RefAttributes<HTMLElement>>;\\nexport default _default;\\n","antd/typography/Paragraph.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nexport interface ParagraphProps extends BlockProps {\\n}\\ndeclare const Paragraph: React.FC<ParagraphProps>;\\nexport default Paragraph;\\n","antd/typography/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../tooltip/style\';\\nimport \'../../input/style\';\\n","antd/typography/Text.d.ts":"import * as React from \'react\';\\nimport { BlockProps, EllipsisConfig } from \'./Base\';\\nexport interface TextProps extends BlockProps {\\n    ellipsis?: boolean | Omit<EllipsisConfig, \'expandable\' | \'rows\' | \'onExpand\'>;\\n}\\ndeclare const Text: React.FC<TextProps>;\\nexport default Text;\\n","antd/typography/Title.d.ts":"import * as React from \'react\';\\nimport { BlockProps } from \'./Base\';\\nimport { Omit } from \'../_util/type\';\\ndeclare const TITLE_ELE_LIST: [1, 2, 3, 4, 5];\\nexport declare type TitleProps = Omit<BlockProps & {\\n    level?: typeof TITLE_ELE_LIST[number];\\n}, \'strong\'>;\\ndeclare const Title: React.FC<TitleProps>;\\nexport default Title;\\n","antd/typography/Typography.d.ts":"import * as React from \'react\';\\nexport interface TypographyProps {\\n    id?: string;\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    [\'aria-label\']?: string;\\n}\\ndeclare const ExportTypography: React.FC<TypographyProps>;\\nexport default ExportTypography;\\n","antd/typography/util.d.ts":"import * as React from \'react\';\\ninterface Option {\\n    rows: number;\\n    suffix?: string;\\n}\\ndeclare const _default: (originEle: HTMLElement, option: Option, content: React.ReactNode, fixedContent: React.ReactNode[], ellipsisStr: string) => {\\n    content: React.ReactNode;\\n    text: string;\\n    ellipsis: boolean;\\n};\\nexport default _default;\\n","antd/upload/Dragger.d.ts":"import * as React from \'react\';\\nimport { UploadProps } from \'./interface\';\\nexport declare type DraggerProps = UploadProps & {\\n    height?: number;\\n};\\ndeclare const Dragger: React.FC<DraggerProps>;\\nexport default Dragger;\\n","antd/upload/index.d.ts":"import Upload from \'./Upload\';\\nexport { UploadProps, UploadListProps, UploadChangeParam, RcFile } from \'./interface\';\\nexport { DraggerProps } from \'./Dragger\';\\nexport default Upload;\\n","antd/upload/interface.d.ts":"import * as React from \'react\';\\nimport { UploadRequestOption as RcCustomRequestOptions } from \'rc-upload/lib/interface\';\\nimport { ProgressProps } from \'../progress\';\\nexport declare type UploadFileStatus = \'error\' | \'success\' | \'done\' | \'uploading\' | \'removed\';\\nexport interface HttpRequestHeader {\\n    [key: string]: string;\\n}\\nexport interface RcFile extends File {\\n    uid: string;\\n    readonly lastModifiedDate: Date;\\n    readonly webkitRelativePath: string;\\n}\\nexport interface UploadFile<T = any> {\\n    uid: string;\\n    size: number;\\n    name: string;\\n    fileName?: string;\\n    lastModified?: number;\\n    lastModifiedDate?: Date;\\n    url?: string;\\n    status?: UploadFileStatus;\\n    percent?: number;\\n    thumbUrl?: string;\\n    originFileObj?: File | Blob;\\n    response?: T;\\n    error?: any;\\n    linkProps?: any;\\n    type: string;\\n    xhr?: T;\\n    preview?: string;\\n}\\nexport interface UploadChangeParam<T extends object = UploadFile> {\\n    file: T;\\n    fileList: Array<UploadFile>;\\n    event?: {\\n        percent: number;\\n    };\\n}\\nexport interface ShowUploadListInterface {\\n    showRemoveIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n}\\nexport interface UploadLocale {\\n    uploading?: string;\\n    removeFile?: string;\\n    downloadFile?: string;\\n    uploadError?: string;\\n    previewFile?: string;\\n}\\nexport declare type UploadType = \'drag\' | \'select\';\\nexport declare type UploadListType = \'text\' | \'picture\' | \'picture-card\';\\nexport declare type UploadListProgressProps = Omit<ProgressProps, \'percent\' | \'type\'>;\\nexport declare type ItemRender<T = any> = (originNode: React.ReactElement, file: UploadFile, fileList?: Array<UploadFile<T>>) => React.ReactNode;\\ndeclare type PreviewFileHandler = (file: File | Blob) => PromiseLike<string>;\\ndeclare type TransformFileHandler = (file: RcFile) => string | Blob | File | PromiseLike<string | Blob | File>;\\nexport interface UploadProps<T = any> {\\n    type?: UploadType;\\n    name?: string;\\n    defaultFileList?: Array<UploadFile<T>>;\\n    fileList?: Array<UploadFile<T>>;\\n    action?: string | ((file: RcFile) => string) | ((file: RcFile) => PromiseLike<string>);\\n    directory?: boolean;\\n    data?: object | ((file: UploadFile<T>) => object);\\n    method?: \'POST\' | \'PUT\' | \'PATCH\' | \'post\' | \'put\' | \'patch\';\\n    headers?: HttpRequestHeader;\\n    showUploadList?: boolean | ShowUploadListInterface;\\n    multiple?: boolean;\\n    accept?: string;\\n    beforeUpload?: (file: RcFile, FileList: RcFile[]) => boolean | Promise<void | Blob | File>;\\n    onChange?: (info: UploadChangeParam) => void;\\n    listType?: UploadListType;\\n    className?: string;\\n    onPreview?: (file: UploadFile<T>) => void;\\n    onDownload?: (file: UploadFile<T>) => void;\\n    onRemove?: (file: UploadFile<T>) => void | boolean | Promise<void | boolean>;\\n    supportServerRender?: boolean;\\n    style?: React.CSSProperties;\\n    disabled?: boolean;\\n    prefixCls?: string;\\n    customRequest?: (options: RcCustomRequestOptions) => void;\\n    withCredentials?: boolean;\\n    openFileDialogOnClick?: boolean;\\n    locale?: UploadLocale;\\n    id?: string;\\n    previewFile?: PreviewFileHandler;\\n    /** @deprecated Please use `beforeUpload` directly */\\n    transformFile?: TransformFileHandler;\\n    iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;\\n    isImageUrl?: (file: UploadFile) => boolean;\\n    progress?: UploadListProgressProps;\\n    itemRender?: ItemRender<T>;\\n    /** Config max count of `fileList`. Will replace current one when `maxCount` is 1 */\\n    maxCount?: number;\\n}\\nexport interface UploadState<T = any> {\\n    fileList: UploadFile<T>[];\\n    dragState: string;\\n}\\nexport interface UploadListProps<T = any> {\\n    listType?: UploadListType;\\n    onPreview?: (file: UploadFile<T>) => void;\\n    onDownload?: (file: UploadFile<T>) => void;\\n    onRemove?: (file: UploadFile<T>) => void | boolean;\\n    items?: Array<UploadFile<T>>;\\n    progress?: UploadListProgressProps;\\n    prefixCls?: string;\\n    showRemoveIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    locale: UploadLocale;\\n    previewFile?: PreviewFileHandler;\\n    iconRender?: (file: UploadFile<T>, listType?: UploadListType) => React.ReactNode;\\n    isImageUrl?: (file: UploadFile) => boolean;\\n    appendAction?: React.ReactNode;\\n    itemRender?: ItemRender<T>;\\n}\\nexport {};\\n","antd/upload/style/index.d.ts":"import \'../../style/index.less\';\\nimport \'./index.less\';\\nimport \'../../button/style\';\\nimport \'../../progress/style\';\\nimport \'../../tooltip/style\';\\n","antd/upload/Upload.d.ts":"import * as React from \'react\';\\nimport Dragger from \'./Dragger\';\\nimport { UploadProps } from \'./interface\';\\nexport { UploadProps };\\ninterface CompoundedComponent extends React.ForwardRefExoticComponent<React.PropsWithChildren<UploadProps> & React.RefAttributes<any>> {\\n    Dragger: typeof Dragger;\\n}\\ndeclare const Upload: CompoundedComponent;\\nexport default Upload;\\n","antd/upload/UploadList/index.d.ts":"import * as React from \'react\';\\nimport { UploadListProps } from \'../interface\';\\ndeclare const UploadList: React.ForwardRefExoticComponent<UploadListProps<any> & React.RefAttributes<unknown>>;\\nexport default UploadList;\\n","antd/upload/UploadList/ListItem.d.ts":"import * as React from \'react\';\\nimport { ItemRender, UploadFile, UploadListProgressProps, UploadListType, UploadLocale } from \'../interface\';\\nexport interface ListItemProps {\\n    prefixCls: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    locale: UploadLocale;\\n    file: UploadFile;\\n    items: UploadFile[];\\n    listType?: UploadListType;\\n    isImgUrl?: (file: UploadFile) => boolean;\\n    showRemoveIcon?: boolean;\\n    showDownloadIcon?: boolean;\\n    showPreviewIcon?: boolean;\\n    removeIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    downloadIcon?: React.ReactNode | ((file: UploadFile) => React.ReactNode);\\n    iconRender: (file: UploadFile) => React.ReactNode;\\n    actionIconRender: (customIcon: React.ReactNode, callback: () => void, prefixCls: string, title?: string | undefined) => React.ReactNode;\\n    itemRender?: ItemRender;\\n    onPreview: (file: UploadFile, e: React.SyntheticEvent<HTMLElement>) => void;\\n    onClose: (file: UploadFile) => void;\\n    onDownload: (file: UploadFile) => void;\\n    progress?: UploadListProgressProps;\\n}\\ndeclare const ListItem: React.ForwardRefExoticComponent<ListItemProps & React.RefAttributes<HTMLDivElement>>;\\nexport default ListItem;\\n","antd/upload/useFreshState.d.ts":"export default function useFreshState<T>(defaultValue: T, propValue?: T): [(displayValue?: boolean) => T, (newValue: T) => void];\\n","antd/upload/utils.d.ts":"import { RcFile, UploadFile } from \'./interface\';\\nexport declare function T(): boolean;\\nexport declare function fileToObject(file: RcFile): UploadFile;\\nexport declare function getFileItem(file: UploadFile, fileList: UploadFile[]): UploadFile<any>;\\nexport declare function removeFileItem(file: UploadFile, fileList: UploadFile[]): UploadFile<any>[] | null;\\nexport declare const isImageUrl: (file: UploadFile) => boolean;\\nexport declare function previewImage(file: File | Blob): Promise<string>;\\n","antd/version/index.d.ts":"import version from \'./version\';\\nexport default version;\\n","antd/version/style/index.d.ts":"import \'../../style/index.less\';\\n","antd/version/version.d.ts":"declare const _default: \\"4.12.0\\";\\nexport default _default;\\n","antd/_util/colors.d.ts":"import { ElementOf } from \'./type\';\\nexport declare const PresetStatusColorTypes: [\\"success\\", \\"processing\\", \\"error\\", \\"default\\", \\"warning\\"];\\nexport declare const PresetColorTypes: [\\"pink\\", \\"red\\", \\"yellow\\", \\"orange\\", \\"cyan\\", \\"green\\", \\"blue\\", \\"purple\\", \\"geekblue\\", \\"magenta\\", \\"volcano\\", \\"gold\\", \\"lime\\"];\\nexport declare type PresetColorType = ElementOf<typeof PresetColorTypes>;\\nexport declare type PresetStatusColorType = ElementOf<typeof PresetStatusColorTypes>;\\n","antd/_util/devWarning.d.ts":"import { resetWarned } from \'rc-util/lib/warning\';\\nexport { resetWarned };\\ndeclare const _default: (valid: boolean, component: string, message: string) => void;\\nexport default _default;\\n","antd/_util/easings.d.ts":"export declare function easeInOutCubic(t: number, b: number, c: number, d: number): number;\\n","antd/_util/getDataOrAriaProps.d.ts":"export default function getDataOrAriaProps(props: any): any;\\n","antd/_util/getRenderPropValue.d.ts":"import * as React from \'react\';\\nexport declare type RenderFunction = () => React.ReactNode;\\nexport declare const getRenderPropValue: (propValue?: React.ReactNode | RenderFunction) => React.ReactNode;\\n","antd/_util/getScroll.d.ts":"export declare function isWindow(obj: any): boolean;\\nexport default function getScroll(target: HTMLElement | Window | Document | null, top: boolean): number;\\n","antd/_util/hooks/useForceUpdate.d.ts":"import * as React from \'react\';\\nexport default function useForceUpdate(): React.DispatchWithoutAction;\\n","antd/_util/hooks/usePatchElement.d.ts":"import * as React from \'react\';\\nexport default function usePatchElement(): [\\n    React.ReactElement[],\\n    (element: React.ReactElement) => Function\\n];\\n","antd/_util/hooks/useSyncState.d.ts":"declare type UseSyncStateProps<T> = [() => T, (newValue: T) => void];\\nexport default function useSyncState<T>(initialValue: T): UseSyncStateProps<T>;\\nexport {};\\n","antd/_util/isNumeric.d.ts":"declare const isNumeric: (value: any) => boolean;\\nexport default isNumeric;\\n","antd/_util/motion.d.ts":"import { CSSMotionProps } from \'rc-motion\';\\ndeclare const collapseMotion: CSSMotionProps;\\nexport default collapseMotion;\\n","antd/_util/raf.d.ts":"interface RafMap {\\n    [id: number]: number;\\n}\\ndeclare function wrapperRaf(callback: () => void, delayFrames?: number): number;\\ndeclare namespace wrapperRaf {\\n    var cancel: (pid?: number | undefined) => void;\\n    var ids: RafMap;\\n}\\nexport default wrapperRaf;\\n","antd/_util/reactNode.d.ts":"import * as React from \'react\';\\nexport declare const isValidElement: typeof React.isValidElement;\\ndeclare type AnyObject = Record<any, any>;\\ndeclare type RenderProps = undefined | AnyObject | ((originProps: AnyObject) => AnyObject | undefined);\\nexport declare function replaceElement(element: React.ReactNode, replacement: React.ReactNode, props: RenderProps): React.ReactNode;\\nexport declare function cloneElement(element: React.ReactNode, props?: RenderProps): React.ReactElement;\\nexport {};\\n","antd/_util/responsiveObserve.d.ts":"export declare type Breakpoint = \'xxl\' | \'xl\' | \'lg\' | \'md\' | \'sm\' | \'xs\';\\nexport declare type BreakpointMap = Record<Breakpoint, string>;\\nexport declare type ScreenMap = Partial<Record<Breakpoint, boolean>>;\\nexport declare type ScreenSizeMap = Partial<Record<Breakpoint, number>>;\\nexport declare const responsiveArray: Breakpoint[];\\nexport declare const responsiveMap: BreakpointMap;\\ndeclare type SubscribeFunc = (screens: ScreenMap) => void;\\ndeclare const responsiveObserve: {\\n    matchHandlers: {\\n        [prop: string]: {\\n            mql: MediaQueryList;\\n            listener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;\\n        };\\n    };\\n    dispatch(pointMap: ScreenMap): boolean;\\n    subscribe(func: SubscribeFunc): number;\\n    unsubscribe(token: number): void;\\n    unregister(): void;\\n    register(): void;\\n};\\nexport default responsiveObserve;\\n","antd/_util/scrollTo.d.ts":"interface ScrollToOptions {\\n    /** Scroll container, default as window */\\n    getContainer?: () => HTMLElement | Window | Document;\\n    /** Scroll end callback */\\n    callback?: () => any;\\n    /** Animation duration, default as 450 */\\n    duration?: number;\\n}\\nexport default function scrollTo(y: number, options?: ScrollToOptions): void;\\nexport {};\\n","antd/_util/styleChecker.d.ts":"export declare const canUseDocElement: () => false | HTMLElement;\\nexport declare const isStyleSupport: (styleName: string | Array<string>) => boolean;\\nexport declare const isFlexSupported: boolean;\\nexport declare const isFlexGapSupported: boolean;\\n","antd/_util/throttleByAnimationFrame.d.ts":"export declare function throttleByAnimationFrame(fn: (...args: any[]) => void): (...args: any[]) => void;\\nexport declare function throttleByAnimationFrameDecorator(): (target: any, key: string, descriptor: any) => {\\n    configurable: boolean;\\n    get(): any;\\n};\\n","antd/_util/transButton.d.ts":"/**\\n * Wrap of sub component which need use as Button capacity (like Icon component).\\n *\\n * This helps accessibility reader to tread as a interactive button to operation.\\n */\\nimport * as React from \'react\';\\ninterface TransButtonProps extends React.HTMLAttributes<HTMLDivElement> {\\n    onClick?: (e?: React.MouseEvent<HTMLDivElement>) => void;\\n    noStyle?: boolean;\\n    autoFocus?: boolean;\\n    disabled?: boolean;\\n}\\ndeclare const TransButton: React.ForwardRefExoticComponent<TransButtonProps & React.RefAttributes<HTMLDivElement>>;\\nexport default TransButton;\\n","antd/_util/type.d.ts":"export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\\nexport declare const tuple: <T extends string[]>(...args: T) => T;\\nexport declare const tupleNum: <T extends number[]>(...args: T) => T;\\n/**\\n * https://stackoverflow.com/a/59187769 Extract the type of an element of an array/tuple without\\n * performing indexing\\n */\\nexport declare type ElementOf<T> = T extends (infer E)[] ? E : T extends readonly (infer F)[] ? F : never;\\n/** https://github.com/Microsoft/TypeScript/issues/29729 */\\nexport declare type LiteralUnion<T extends U, U> = T | (U & {});\\n","antd/_util/unreachableException.d.ts":"export default class UnreachableException {\\n    constructor(value: never);\\n}\\n","antd/_util/wave.d.ts":"import * as React from \'react\';\\nimport { ConfigConsumerProps } from \'../config-provider\';\\nexport default class Wave extends React.Component<{\\n    insertExtraNode?: boolean;\\n}> {\\n    static contextType: React.Context<ConfigConsumerProps>;\\n    private instance?;\\n    private containerRef;\\n    private extraNode;\\n    private clickWaveTimeoutId;\\n    private animationStartId;\\n    private animationStart;\\n    private destroyed;\\n    private csp?;\\n    context: ConfigConsumerProps;\\n    componentDidMount(): void;\\n    componentWillUnmount(): void;\\n    onClick: (node: HTMLElement, waveColor: string) => void;\\n    onTransitionStart: (e: AnimationEvent) => void;\\n    onTransitionEnd: (e: AnimationEvent) => void;\\n    getAttributeName(): string;\\n    bindAnimationEvent: (node: HTMLElement) => {\\n        cancel: () => void;\\n    } | undefined;\\n    resetEffect(node: HTMLElement): void;\\n    renderWave: ({ csp }: ConfigConsumerProps) => {} | null | undefined;\\n    render(): JSX.Element;\\n}\\n","rc-table/es/Body/BodyRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent, GetComponentProps, Key, GetRowKey } from \'../interface\';\\nexport interface BodyRowProps<RecordType> {\\n    record: RecordType;\\n    index: number;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    recordKey: Key;\\n    expandedKeys: Set<Key>;\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    indent?: number;\\n    rowKey: React.Key;\\n    getRowKey: GetRowKey<RecordType>;\\n    childrenColumnName: string;\\n}\\ndeclare function BodyRow<RecordType extends {\\n    children?: readonly RecordType[];\\n}>(props: BodyRowProps<RecordType>): JSX.Element;\\ndeclare namespace BodyRow {\\n    var displayName: string;\\n}\\nexport default BodyRow;\\n","rc-table/es/Body/ExpandedRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent } from \'../interface\';\\nexport interface ExpandedRowProps {\\n    prefixCls: string;\\n    component: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    componentWidth: number;\\n    className: string;\\n    expanded: boolean;\\n    children: React.ReactNode;\\n    colSpan: number;\\n}\\ndeclare function ExpandedRow({ prefixCls, children, component: Component, cellComponent, fixHeader, fixColumn, horizonScroll, className, expanded, componentWidth, colSpan, }: ExpandedRowProps): JSX.Element;\\nexport default ExpandedRow;\\n","rc-table/es/Body/index.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, Key, GetComponentProps } from \'../interface\';\\nexport interface BodyProps<RecordType> {\\n    data: readonly RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    measureColumnWidth: boolean;\\n    expandedKeys: Set<Key>;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    emptyNode: React.ReactNode;\\n    childrenColumnName: string;\\n}\\ndeclare function Body<RecordType>({ data, getRowKey, measureColumnWidth, expandedKeys, onRow, rowExpandable, emptyNode, childrenColumnName, }: BodyProps<RecordType>): JSX.Element;\\ndeclare const MemoBody: React.MemoExoticComponent<typeof Body>;\\nexport default MemoBody;\\n","rc-table/es/Body/MeasureCell.d.ts":"import * as React from \'react\';\\nexport interface MeasureCellProps {\\n    columnKey: React.Key;\\n    onColumnResize: (key: React.Key, width: number) => void;\\n}\\nexport default function MeasureCell({ columnKey, onColumnResize }: MeasureCellProps): JSX.Element;\\n","rc-table/es/Cell/index.d.ts":"import * as React from \'react\';\\nimport { DataIndex, ColumnType, CustomizeComponent, DefaultRecordType, AlignType, CellEllipsisType } from \'../interface\';\\nexport interface CellProps<RecordType extends DefaultRecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    record?: RecordType;\\n    /** `record` index. Not `column` index. */\\n    index?: number;\\n    dataIndex?: DataIndex;\\n    render?: ColumnType<RecordType>[\'render\'];\\n    component?: CustomizeComponent;\\n    children?: React.ReactNode;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    fixLeft?: number | false;\\n    fixRight?: number | false;\\n    firstFixLeft?: boolean;\\n    lastFixLeft?: boolean;\\n    firstFixRight?: boolean;\\n    lastFixRight?: boolean;\\n    /** @private Used for `expandable` with nest tree */\\n    appendNode?: React.ReactNode;\\n    additionalProps?: React.HTMLAttributes<HTMLElement>;\\n    rowType?: \'header\' | \'body\' | \'footer\';\\n    isSticky?: boolean;\\n}\\ndeclare const MemoCell: React.MemoExoticComponent<React.ForwardRefExoticComponent<CellProps<any> & React.RefAttributes<any>>>;\\nexport default MemoCell;\\n","rc-table/es/ColGroup.d.ts":"/// <reference types=\\"react\\" />\\nimport { ColumnType } from \'./interface\';\\nexport interface ColGroupProps<RecordType> {\\n    colWidths: readonly (number | string)[];\\n    columns?: readonly ColumnType<RecordType>[];\\n    columCount?: number;\\n}\\ndeclare function ColGroup<RecordType>({ colWidths, columns, columCount }: ColGroupProps<RecordType>): JSX.Element;\\nexport default ColGroup;\\n","rc-table/es/context/BodyContext.d.ts":"import * as React from \'react\';\\nimport { ColumnType, DefaultRecordType, ColumnsType, TableLayout, RenderExpandIcon, ExpandableType, RowClassName, TriggerEventHandler, ExpandedRowRender } from \'../interface\';\\nexport interface BodyContextProps<RecordType = DefaultRecordType> {\\n    rowClassName: string | RowClassName<RecordType>;\\n    expandedRowClassName: RowClassName<RecordType>;\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    componentWidth: number;\\n    tableLayout: TableLayout;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    indentSize: number;\\n    expandableType: ExpandableType;\\n    expandRowByClick: boolean;\\n    expandedRowRender: ExpandedRowRender<RecordType>;\\n    expandIcon: RenderExpandIcon<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIconColumnIndex: number;\\n}\\ndeclare const BodyContext: React.Context<BodyContextProps<Record<string, any>>>;\\nexport default BodyContext;\\n","rc-table/es/context/ResizeContext.d.ts":"import * as React from \'react\';\\ninterface ResizeContextProps {\\n    onColumnResize: (columnKey: React.Key, width: number) => void;\\n}\\ndeclare const ResizeContext: React.Context<ResizeContextProps>;\\nexport default ResizeContext;\\n","rc-table/es/context/TableContext.d.ts":"import * as React from \'react\';\\nimport { GetComponent } from \'../interface\';\\nimport { FixedInfo } from \'../utils/fixUtil\';\\nexport interface TableContextProps {\\n    prefixCls: string;\\n    getComponent: GetComponent;\\n    scrollbarSize: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixedInfoList: readonly FixedInfo[];\\n    isSticky: boolean;\\n}\\ndeclare const TableContext: React.Context<TableContextProps>;\\nexport default TableContext;\\n","rc-table/es/Footer/Cell.d.ts":"import * as React from \'react\';\\nimport { AlignType } from \'../interface\';\\nexport interface SummaryCellProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    index: number;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    align?: AlignType;\\n}\\nexport default function SummaryCell({ className, index, children, colSpan, rowSpan, align, }: SummaryCellProps): JSX.Element;\\n","rc-table/es/Footer/index.d.ts":"import * as React from \'react\';\\nimport Cell from \'./Cell\';\\nimport Row from \'./Row\';\\nexport interface FooterProps {\\n    children: React.ReactNode;\\n}\\ndeclare function Footer({ children }: FooterProps): JSX.Element;\\nexport default Footer;\\nexport declare const FooterComponents: {\\n    Cell: typeof Cell;\\n    Row: typeof Row;\\n};\\n","rc-table/es/Footer/Row.d.ts":"import * as React from \'react\';\\nexport interface FooterRowProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport default function FooterRow(props: FooterRowProps): JSX.Element;\\n","rc-table/es/Header/FixedHeader.d.ts":"import * as React from \'react\';\\nimport { HeaderProps } from \'./Header\';\\nexport interface FixedHeaderProps<RecordType> extends HeaderProps<RecordType> {\\n    noData: boolean;\\n    colWidths: readonly number[];\\n    columCount: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixHeader: boolean;\\n    offsetHeader: number;\\n    stickyClassName?: string;\\n    onScroll: (info: {\\n        currentTarget: HTMLDivElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}\\ndeclare const FixedHeader: React.ForwardRefExoticComponent<FixedHeaderProps<unknown> & React.RefAttributes<HTMLDivElement>>;\\nexport default FixedHeader;\\n","rc-table/es/Header/Header.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, StickyOffsets, ColumnType, GetComponentProps } from \'../interface\';\\nexport interface HeaderProps<RecordType> {\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n}\\ndeclare function Header<RecordType>({ stickyOffsets, columns, flattenColumns, onHeaderRow, }: HeaderProps<RecordType>): React.ReactElement;\\nexport default Header;\\n","rc-table/es/Header/HeaderRow.d.ts":"/// <reference types=\\"react\\" />\\nimport { CellType, StickyOffsets, ColumnType, CustomizeComponent, GetComponentProps } from \'../interface\';\\nexport interface RowProps<RecordType> {\\n    cells: readonly CellType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    index: number;\\n}\\ndeclare function HeaderRow<RecordType>({ cells, stickyOffsets, flattenColumns, rowComponent: RowComponent, cellComponent: CellComponent, onHeaderRow, index, }: RowProps<RecordType>): JSX.Element;\\ndeclare namespace HeaderRow {\\n    var displayName: string;\\n}\\nexport default HeaderRow;\\n","rc-table/es/hooks/useColumns.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, ColumnType, Key, GetRowKey, TriggerEventHandler, RenderExpandIcon } from \'../interface\';\\nexport declare function convertChildrenToColumns<RecordType>(children: React.ReactNode): ColumnsType<RecordType>;\\n/**\\n * Parse `columns` & `children` into `columns`.\\n */\\ndeclare function useColumns<RecordType>({ prefixCls, columns, children, expandable, expandedKeys, getRowKey, onTriggerExpand, expandIcon, rowExpandable, expandIconColumnIndex, direction, expandRowByClick, columnWidth, }: {\\n    prefixCls?: string;\\n    columns?: ColumnsType<RecordType>;\\n    children?: React.ReactNode;\\n    expandable: boolean;\\n    expandedKeys: Set<Key>;\\n    getRowKey: GetRowKey<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    expandIconColumnIndex?: number;\\n    direction?: \'ltr\' | \'rtl\';\\n    expandRowByClick?: boolean;\\n    columnWidth?: number | string;\\n}, transformColumns: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>): [ColumnsType<RecordType>, readonly ColumnType<RecordType>[]];\\nexport default useColumns;\\n","rc-table/es/hooks/useFrame.d.ts":"export declare type Updater<State> = (prev: State) => State;\\n/**\\n * Execute code before next frame but async\\n */\\nexport declare function useLayoutState<State>(defaultState: State): [State, (updater: Updater<State>) => void];\\n/** Lock frame, when frame pass reset the lock. */\\nexport declare function useTimeoutLock<State>(defaultState?: State): [(state: State) => void, () => State | null];\\n","rc-table/es/hooks/useSticky.d.ts":"import { TableSticky } from \'../interface\';\\n/** Sticky header hooks */\\nexport default function useSticky(sticky: boolean | TableSticky, prefixCls: string): {\\n    isSticky: boolean;\\n    offsetHeader: number;\\n    offsetScroll: number;\\n    stickyClassName: string;\\n    container: Window | HTMLElement;\\n};\\n","rc-table/es/hooks/useStickyOffsets.d.ts":"import { StickyOffsets } from \'../interface\';\\n/**\\n * Get sticky column offset width\\n */\\ndeclare function useStickyOffsets(colWidths: number[], columnCount: number, direction: \'ltr\' | \'rtl\'): StickyOffsets;\\nexport default useStickyOffsets;\\n","rc-table/es/index.d.ts":"import Table from \'./Table\';\\nimport { FooterComponents as Summary } from \'./Footer\';\\nimport Column from \'./sugar/Column\';\\nimport ColumnGroup from \'./sugar/ColumnGroup\';\\nimport { INTERNAL_COL_DEFINE } from \'./utils/legacyUtil\';\\nexport { Summary, Column, ColumnGroup, INTERNAL_COL_DEFINE };\\nexport default Table;\\n","rc-table/es/interface.d.ts":"import * as React from \'react\';\\n/**\\n * ColumnType which applied in antd: https://ant.design/components/table-cn/#Column\\n * - defaultSortOrder\\n * - filterDropdown\\n * - filterDropdownVisible\\n * - filtered\\n * - filteredValue\\n * - filterIcon\\n * - filterMultiple\\n * - filters\\n * - sorter\\n * - sortOrder\\n * - sortDirections\\n * - onFilter\\n * - onFilterDropdownVisibleChange\\n */\\nexport declare type Key = React.Key;\\nexport declare type FixedType = \'left\' | \'right\' | boolean;\\nexport declare type DefaultRecordType = Record<string, any>;\\nexport declare type TableLayout = \'auto\' | \'fixed\';\\nexport declare type RowClassName<RecordType> = (record: RecordType, index: number, indent: number) => string;\\nexport interface CellType<RecordType> {\\n    key?: Key;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    column?: ColumnsType<RecordType>[number];\\n    colSpan?: number;\\n    rowSpan?: number;\\n    /** Only used for table header */\\n    hasSubColumns?: boolean;\\n    colStart?: number;\\n    colEnd?: number;\\n}\\nexport interface RenderedCell<RecordType> {\\n    props?: CellType<RecordType>;\\n    children?: React.ReactNode;\\n}\\nexport declare type DataIndex = string | number | readonly (string | number)[];\\nexport declare type CellEllipsisType = {\\n    showTitle?: boolean;\\n} | boolean;\\ninterface ColumnSharedType<RecordType> {\\n    title?: React.ReactNode;\\n    key?: Key;\\n    className?: string;\\n    fixed?: FixedType;\\n    onHeaderCell?: GetComponentProps<ColumnsType<RecordType>[number]>;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n}\\nexport interface ColumnGroupType<RecordType> extends ColumnSharedType<RecordType> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type AlignType = \'left\' | \'center\' | \'right\';\\nexport interface ColumnType<RecordType> extends ColumnSharedType<RecordType> {\\n    colSpan?: number;\\n    dataIndex?: DataIndex;\\n    render?: (value: any, record: RecordType, index: number) => React.ReactNode | RenderedCell<RecordType>;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    rowSpan?: number;\\n    width?: number | string;\\n    onCell?: GetComponentProps<RecordType>;\\n    /** @deprecated Please use `onCell` instead */\\n    onCellClick?: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = readonly (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport declare type GetRowKey<RecordType> = (record: RecordType, index?: number) => Key;\\nexport interface StickyOffsets {\\n    left: readonly number[];\\n    right: readonly number[];\\n    isSticky?: boolean;\\n}\\nexport declare type GetComponentProps<DataType> = (data: DataType, index?: number) => React.HTMLAttributes<HTMLElement>;\\ndeclare type Component<P> = React.ComponentType<P> | React.ForwardRefExoticComponent<P> | React.FC<P> | keyof React.ReactHTML;\\nexport declare type CustomizeComponent = Component<any>;\\nexport declare type CustomizeScrollBody<RecordType> = (data: readonly RecordType[], info: {\\n    scrollbarSize: number;\\n    ref: React.Ref<{\\n        scrollLeft: number;\\n    }>;\\n    onScroll: (info: {\\n        currentTarget?: HTMLElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}) => React.ReactNode;\\nexport interface TableComponents<RecordType> {\\n    table?: CustomizeComponent;\\n    header?: {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n    body?: CustomizeScrollBody<RecordType> | {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n}\\nexport declare type GetComponent = (path: readonly string[], defaultComponent?: CustomizeComponent) => CustomizeComponent;\\nexport declare type ExpandableType = false | \'row\' | \'nest\';\\nexport interface LegacyExpandableProps<RecordType> {\\n    /** @deprecated Use `expandable.expandedRowKeys` instead */\\n    expandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.defaultExpandedRowKeys` instead */\\n    defaultExpandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.expandedRowRender` instead */\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    /** @deprecated Use `expandable.expandRowByClick` instead */\\n    expandRowByClick?: boolean;\\n    /** @deprecated Use `expandable.expandIcon` instead */\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    /** @deprecated Use `expandable.onExpand` instead */\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    /** @deprecated Use `expandable.onExpandedRowsChange` instead */\\n    onExpandedRowsChange?: (expandedKeys: Key[]) => void;\\n    /** @deprecated Use `expandable.defaultExpandAllRows` instead */\\n    defaultExpandAllRows?: boolean;\\n    /** @deprecated Use `expandable.indentSize` instead */\\n    indentSize?: number;\\n    /** @deprecated Use `expandable.expandIconColumnIndex` instead */\\n    expandIconColumnIndex?: number;\\n    /** @deprecated Use `expandable.expandedRowClassName` instead */\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    /** @deprecated Use `expandable.childrenColumnName` instead */\\n    childrenColumnName?: string;\\n}\\nexport declare type ExpandedRowRender<ValueType> = (record: ValueType, index: number, indent: number, expanded: boolean) => React.ReactNode;\\nexport interface RenderExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    expanded: boolean;\\n    record: RecordType;\\n    expandable: boolean;\\n    onExpand: TriggerEventHandler<RecordType>;\\n}\\nexport declare type RenderExpandIcon<RecordType> = (props: RenderExpandIconProps<RecordType>) => React.ReactNode;\\nexport interface ExpandableConfig<RecordType> {\\n    expandedRowKeys?: readonly Key[];\\n    defaultExpandedRowKeys?: readonly Key[];\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    expandRowByClick?: boolean;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    onExpandedRowsChange?: (expandedKeys: readonly Key[]) => void;\\n    defaultExpandAllRows?: boolean;\\n    indentSize?: number;\\n    expandIconColumnIndex?: number;\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    childrenColumnName?: string;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    columnWidth?: number | string;\\n}\\nexport declare type PanelRender<RecordType> = (data: readonly RecordType[]) => React.ReactNode;\\nexport declare type TriggerEventHandler<RecordType> = (record: RecordType, event: React.MouseEvent<HTMLElement>) => void;\\nexport interface TableSticky {\\n    offsetHeader?: number;\\n    offsetScroll?: number;\\n    getContainer?: () => Window | HTMLElement;\\n}\\nexport {};\\n","rc-table/es/Panel/index.d.ts":"import * as React from \'react\';\\nexport interface TitleProps {\\n    className: string;\\n    children: React.ReactNode;\\n}\\ndeclare function Panel({ className, children }: TitleProps): JSX.Element;\\nexport default Panel;\\n","rc-table/es/stickyScrollBar.d.ts":"import * as React from \'react\';\\ninterface StickyScrollBarProps {\\n    scrollBodyRef: React.RefObject<HTMLDivElement>;\\n    onScroll: (params: {\\n        scrollLeft?: number;\\n    }) => void;\\n    offsetScroll: number;\\n    container: HTMLElement | Window;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<StickyScrollBarProps & React.RefAttributes<unknown>>;\\nexport default _default;\\n","rc-table/es/sugar/Column.d.ts":"import { ColumnType } from \'../interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): any;\\nexport default Column;\\n","rc-table/es/sugar/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnProps } from \'./Column\';\\nimport { ColumnType } from \'../interface\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | readonly React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): any;\\nexport default ColumnGroup;\\n","rc-table/es/Table.d.ts":"/**\\n * Feature:\\n *  - fixed not need to set width\\n *  - support `rowExpandable` to config row expand logic\\n *  - add `summary` to support `() => ReactNode`\\n *\\n * Update:\\n *  - `dataIndex` is `array[]` now\\n *  - `expandable` wrap all the expand related props\\n *\\n * Removed:\\n *  - expandIconAsCell\\n *  - useFixedHeader\\n *  - rowRef\\n *  - columns[number].onCellClick\\n *  - onRowClick\\n *  - onRowDoubleClick\\n *  - onRowMouseEnter\\n *  - onRowMouseLeave\\n *  - getBodyWrapper\\n *  - bodyStyle\\n *\\n * Deprecated:\\n *  - All expanded props, move into expandable\\n */\\nimport * as React from \'react\';\\nimport { GetRowKey, ColumnsType, TableComponents, DefaultRecordType, GetComponentProps, ExpandableConfig, LegacyExpandableProps, PanelRender, TableLayout, RowClassName, ColumnType, TableSticky } from \'./interface\';\\nexport declare const INTERNAL_HOOKS = \\"rc-table-internal-hook\\";\\nexport interface TableProps<RecordType = unknown> extends LegacyExpandableProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    data?: readonly RecordType[];\\n    columns?: ColumnsType<RecordType>;\\n    rowKey?: string | GetRowKey<RecordType>;\\n    tableLayout?: TableLayout;\\n    scroll?: {\\n        x?: number | true | string;\\n        y?: number | string;\\n    };\\n    /** Config expand rows */\\n    expandable?: ExpandableConfig<RecordType>;\\n    indentSize?: number;\\n    rowClassName?: string | RowClassName<RecordType>;\\n    title?: PanelRender<RecordType>;\\n    footer?: PanelRender<RecordType>;\\n    summary?: (data: readonly RecordType[]) => React.ReactNode;\\n    id?: string;\\n    showHeader?: boolean;\\n    components?: TableComponents<RecordType>;\\n    onRow?: GetComponentProps<RecordType>;\\n    onHeaderRow?: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    direction?: \'ltr\' | \'rtl\';\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalHooks?: string;\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    transformColumns?: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\n    /**\\n     * @private Internal usage, may remove by refactor.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalRefs?: {\\n        body: React.MutableRefObject<HTMLDivElement>;\\n    };\\n    sticky?: boolean | TableSticky;\\n}\\ndeclare function Table<RecordType extends DefaultRecordType>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var Column: typeof import(\\"./sugar/Column\\").default;\\n    var ColumnGroup: typeof import(\\"./sugar/ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"./Footer/Cell\\").default;\\n        Row: typeof import(\\"./Footer/Row\\").default;\\n    };\\n    var defaultProps: {\\n        rowKey: string;\\n        prefixCls: string;\\n        emptyText: () => string;\\n    };\\n}\\nexport default Table;\\n","rc-table/es/utils/expandUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { RenderExpandIconProps, Key, GetRowKey } from \'../interface\';\\nexport declare function renderExpandIcon<RecordType>({ prefixCls, record, onExpand, expanded, expandable, }: RenderExpandIconProps<RecordType>): JSX.Element;\\nexport declare function findAllChildrenKeys<RecordType>(data: readonly RecordType[], getRowKey: GetRowKey<RecordType>, childrenColumnName: string): Key[];\\n","rc-table/es/utils/fixUtil.d.ts":"import { StickyOffsets, FixedType } from \'../interface\';\\nexport interface FixedInfo {\\n    fixLeft: number | false;\\n    fixRight: number | false;\\n    lastFixLeft: boolean;\\n    firstFixRight: boolean;\\n    lastFixRight: boolean;\\n    firstFixLeft: boolean;\\n    isSticky: boolean;\\n}\\nexport declare function getCellFixedInfo(colStart: number, colEnd: number, columns: readonly {\\n    fixed?: FixedType;\\n}[], stickyOffsets: StickyOffsets, direction: \'ltr\' | \'rtl\'): FixedInfo;\\n","rc-table/es/utils/legacyUtil.d.ts":"import { ExpandableConfig, LegacyExpandableProps } from \'../interface\';\\nexport declare const INTERNAL_COL_DEFINE = \\"RC_TABLE_INTERNAL_COL_DEFINE\\";\\nexport declare function getExpandableProps<RecordType>(props: LegacyExpandableProps<RecordType> & {\\n    expandable?: ExpandableConfig<RecordType>;\\n}): ExpandableConfig<RecordType>;\\n/**\\n * Returns only data- and aria- key/value pairs\\n * @param {object} props\\n */\\nexport declare function getDataAndAriaProps(props: object): {};\\n","rc-table/es/utils/valueUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { Key, DataIndex } from \'../interface\';\\nexport declare function getPathValue<ValueType, ObjectType extends object>(record: ObjectType, path: DataIndex): ValueType;\\ninterface GetColumnKeyColumn {\\n    key?: Key;\\n    dataIndex?: DataIndex;\\n}\\nexport declare function getColumnsKey(columns: readonly GetColumnKeyColumn[]): import(\\"react\\").Key[];\\nexport declare function mergeObject<ReturnObject extends object>(...objects: Partial<ReturnObject>[]): ReturnObject;\\nexport declare function validateValue<T>(val: T): boolean;\\nexport {};\\n","rc-table/lib/Body/BodyRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent, GetComponentProps, Key, GetRowKey } from \'../interface\';\\nexport interface BodyRowProps<RecordType> {\\n    record: RecordType;\\n    index: number;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    recordKey: Key;\\n    expandedKeys: Set<Key>;\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    indent?: number;\\n    rowKey: React.Key;\\n    getRowKey: GetRowKey<RecordType>;\\n    childrenColumnName: string;\\n}\\ndeclare function BodyRow<RecordType extends {\\n    children?: readonly RecordType[];\\n}>(props: BodyRowProps<RecordType>): JSX.Element;\\ndeclare namespace BodyRow {\\n    var displayName: string;\\n}\\nexport default BodyRow;\\n","rc-table/lib/Body/ExpandedRow.d.ts":"import * as React from \'react\';\\nimport { CustomizeComponent } from \'../interface\';\\nexport interface ExpandedRowProps {\\n    prefixCls: string;\\n    component: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    componentWidth: number;\\n    className: string;\\n    expanded: boolean;\\n    children: React.ReactNode;\\n    colSpan: number;\\n}\\ndeclare function ExpandedRow({ prefixCls, children, component: Component, cellComponent, fixHeader, fixColumn, horizonScroll, className, expanded, componentWidth, colSpan, }: ExpandedRowProps): JSX.Element;\\nexport default ExpandedRow;\\n","rc-table/lib/Body/index.d.ts":"import * as React from \'react\';\\nimport { GetRowKey, Key, GetComponentProps } from \'../interface\';\\nexport interface BodyProps<RecordType> {\\n    data: readonly RecordType[];\\n    getRowKey: GetRowKey<RecordType>;\\n    measureColumnWidth: boolean;\\n    expandedKeys: Set<Key>;\\n    onRow: GetComponentProps<RecordType>;\\n    rowExpandable: (record: RecordType) => boolean;\\n    emptyNode: React.ReactNode;\\n    childrenColumnName: string;\\n}\\ndeclare function Body<RecordType>({ data, getRowKey, measureColumnWidth, expandedKeys, onRow, rowExpandable, emptyNode, childrenColumnName, }: BodyProps<RecordType>): JSX.Element;\\ndeclare const MemoBody: React.MemoExoticComponent<typeof Body>;\\nexport default MemoBody;\\n","rc-table/lib/Body/MeasureCell.d.ts":"import * as React from \'react\';\\nexport interface MeasureCellProps {\\n    columnKey: React.Key;\\n    onColumnResize: (key: React.Key, width: number) => void;\\n}\\nexport default function MeasureCell({ columnKey, onColumnResize }: MeasureCellProps): JSX.Element;\\n","rc-table/lib/Cell/index.d.ts":"import * as React from \'react\';\\nimport { DataIndex, ColumnType, CustomizeComponent, DefaultRecordType, AlignType, CellEllipsisType } from \'../interface\';\\nexport interface CellProps<RecordType extends DefaultRecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    record?: RecordType;\\n    /** `record` index. Not `column` index. */\\n    index?: number;\\n    dataIndex?: DataIndex;\\n    render?: ColumnType<RecordType>[\'render\'];\\n    component?: CustomizeComponent;\\n    children?: React.ReactNode;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    fixLeft?: number | false;\\n    fixRight?: number | false;\\n    firstFixLeft?: boolean;\\n    lastFixLeft?: boolean;\\n    firstFixRight?: boolean;\\n    lastFixRight?: boolean;\\n    /** @private Used for `expandable` with nest tree */\\n    appendNode?: React.ReactNode;\\n    additionalProps?: React.HTMLAttributes<HTMLElement>;\\n    rowType?: \'header\' | \'body\' | \'footer\';\\n    isSticky?: boolean;\\n}\\ndeclare const MemoCell: React.MemoExoticComponent<React.ForwardRefExoticComponent<CellProps<any> & React.RefAttributes<any>>>;\\nexport default MemoCell;\\n","rc-table/lib/ColGroup.d.ts":"/// <reference types=\\"react\\" />\\nimport { ColumnType } from \'./interface\';\\nexport interface ColGroupProps<RecordType> {\\n    colWidths: readonly (number | string)[];\\n    columns?: readonly ColumnType<RecordType>[];\\n    columCount?: number;\\n}\\ndeclare function ColGroup<RecordType>({ colWidths, columns, columCount }: ColGroupProps<RecordType>): JSX.Element;\\nexport default ColGroup;\\n","rc-table/lib/context/BodyContext.d.ts":"import * as React from \'react\';\\nimport { ColumnType, DefaultRecordType, ColumnsType, TableLayout, RenderExpandIcon, ExpandableType, RowClassName, TriggerEventHandler, ExpandedRowRender } from \'../interface\';\\nexport interface BodyContextProps<RecordType = DefaultRecordType> {\\n    rowClassName: string | RowClassName<RecordType>;\\n    expandedRowClassName: RowClassName<RecordType>;\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    componentWidth: number;\\n    tableLayout: TableLayout;\\n    fixHeader: boolean;\\n    fixColumn: boolean;\\n    horizonScroll: boolean;\\n    indentSize: number;\\n    expandableType: ExpandableType;\\n    expandRowByClick: boolean;\\n    expandedRowRender: ExpandedRowRender<RecordType>;\\n    expandIcon: RenderExpandIcon<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIconColumnIndex: number;\\n}\\ndeclare const BodyContext: React.Context<BodyContextProps<Record<string, any>>>;\\nexport default BodyContext;\\n","rc-table/lib/context/ResizeContext.d.ts":"import * as React from \'react\';\\ninterface ResizeContextProps {\\n    onColumnResize: (columnKey: React.Key, width: number) => void;\\n}\\ndeclare const ResizeContext: React.Context<ResizeContextProps>;\\nexport default ResizeContext;\\n","rc-table/lib/context/TableContext.d.ts":"import * as React from \'react\';\\nimport { GetComponent } from \'../interface\';\\nimport { FixedInfo } from \'../utils/fixUtil\';\\nexport interface TableContextProps {\\n    prefixCls: string;\\n    getComponent: GetComponent;\\n    scrollbarSize: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixedInfoList: readonly FixedInfo[];\\n    isSticky: boolean;\\n}\\ndeclare const TableContext: React.Context<TableContextProps>;\\nexport default TableContext;\\n","rc-table/lib/Footer/Cell.d.ts":"import * as React from \'react\';\\nimport { AlignType } from \'../interface\';\\nexport interface SummaryCellProps {\\n    className?: string;\\n    children?: React.ReactNode;\\n    index: number;\\n    colSpan?: number;\\n    rowSpan?: number;\\n    align?: AlignType;\\n}\\nexport default function SummaryCell({ className, index, children, colSpan, rowSpan, align, }: SummaryCellProps): JSX.Element;\\n","rc-table/lib/Footer/index.d.ts":"import * as React from \'react\';\\nimport Cell from \'./Cell\';\\nimport Row from \'./Row\';\\nexport interface FooterProps {\\n    children: React.ReactNode;\\n}\\ndeclare function Footer({ children }: FooterProps): JSX.Element;\\nexport default Footer;\\nexport declare const FooterComponents: {\\n    Cell: typeof Cell;\\n    Row: typeof Row;\\n};\\n","rc-table/lib/Footer/Row.d.ts":"import * as React from \'react\';\\nexport interface FooterRowProps {\\n    children?: React.ReactNode;\\n    className?: string;\\n    style?: React.CSSProperties;\\n}\\nexport default function FooterRow(props: FooterRowProps): JSX.Element;\\n","rc-table/lib/Header/FixedHeader.d.ts":"import * as React from \'react\';\\nimport { HeaderProps } from \'./Header\';\\nexport interface FixedHeaderProps<RecordType> extends HeaderProps<RecordType> {\\n    noData: boolean;\\n    colWidths: readonly number[];\\n    columCount: number;\\n    direction: \'ltr\' | \'rtl\';\\n    fixHeader: boolean;\\n    offsetHeader: number;\\n    stickyClassName?: string;\\n    onScroll: (info: {\\n        currentTarget: HTMLDivElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}\\ndeclare const FixedHeader: React.ForwardRefExoticComponent<FixedHeaderProps<unknown> & React.RefAttributes<HTMLDivElement>>;\\nexport default FixedHeader;\\n","rc-table/lib/Header/Header.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, StickyOffsets, ColumnType, GetComponentProps } from \'../interface\';\\nexport interface HeaderProps<RecordType> {\\n    columns: ColumnsType<RecordType>;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n}\\ndeclare function Header<RecordType>({ stickyOffsets, columns, flattenColumns, onHeaderRow, }: HeaderProps<RecordType>): React.ReactElement;\\nexport default Header;\\n","rc-table/lib/Header/HeaderRow.d.ts":"/// <reference types=\\"react\\" />\\nimport { CellType, StickyOffsets, ColumnType, CustomizeComponent, GetComponentProps } from \'../interface\';\\nexport interface RowProps<RecordType> {\\n    cells: readonly CellType<RecordType>[];\\n    stickyOffsets: StickyOffsets;\\n    flattenColumns: readonly ColumnType<RecordType>[];\\n    rowComponent: CustomizeComponent;\\n    cellComponent: CustomizeComponent;\\n    onHeaderRow: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    index: number;\\n}\\ndeclare function HeaderRow<RecordType>({ cells, stickyOffsets, flattenColumns, rowComponent: RowComponent, cellComponent: CellComponent, onHeaderRow, index, }: RowProps<RecordType>): JSX.Element;\\ndeclare namespace HeaderRow {\\n    var displayName: string;\\n}\\nexport default HeaderRow;\\n","rc-table/lib/hooks/useColumns.d.ts":"import * as React from \'react\';\\nimport { ColumnsType, ColumnType, Key, GetRowKey, TriggerEventHandler, RenderExpandIcon } from \'../interface\';\\nexport declare function convertChildrenToColumns<RecordType>(children: React.ReactNode): ColumnsType<RecordType>;\\n/**\\n * Parse `columns` & `children` into `columns`.\\n */\\ndeclare function useColumns<RecordType>({ prefixCls, columns, children, expandable, expandedKeys, getRowKey, onTriggerExpand, expandIcon, rowExpandable, expandIconColumnIndex, direction, expandRowByClick, columnWidth, }: {\\n    prefixCls?: string;\\n    columns?: ColumnsType<RecordType>;\\n    children?: React.ReactNode;\\n    expandable: boolean;\\n    expandedKeys: Set<Key>;\\n    getRowKey: GetRowKey<RecordType>;\\n    onTriggerExpand: TriggerEventHandler<RecordType>;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    expandIconColumnIndex?: number;\\n    direction?: \'ltr\' | \'rtl\';\\n    expandRowByClick?: boolean;\\n    columnWidth?: number | string;\\n}, transformColumns: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>): [ColumnsType<RecordType>, readonly ColumnType<RecordType>[]];\\nexport default useColumns;\\n","rc-table/lib/hooks/useFrame.d.ts":"export declare type Updater<State> = (prev: State) => State;\\n/**\\n * Execute code before next frame but async\\n */\\nexport declare function useLayoutState<State>(defaultState: State): [State, (updater: Updater<State>) => void];\\n/** Lock frame, when frame pass reset the lock. */\\nexport declare function useTimeoutLock<State>(defaultState?: State): [(state: State) => void, () => State | null];\\n","rc-table/lib/hooks/useSticky.d.ts":"import { TableSticky } from \'../interface\';\\n/** Sticky header hooks */\\nexport default function useSticky(sticky: boolean | TableSticky, prefixCls: string): {\\n    isSticky: boolean;\\n    offsetHeader: number;\\n    offsetScroll: number;\\n    stickyClassName: string;\\n    container: Window | HTMLElement;\\n};\\n","rc-table/lib/hooks/useStickyOffsets.d.ts":"import { StickyOffsets } from \'../interface\';\\n/**\\n * Get sticky column offset width\\n */\\ndeclare function useStickyOffsets(colWidths: number[], columnCount: number, direction: \'ltr\' | \'rtl\'): StickyOffsets;\\nexport default useStickyOffsets;\\n","rc-table/lib/index.d.ts":"import Table from \'./Table\';\\nimport { FooterComponents as Summary } from \'./Footer\';\\nimport Column from \'./sugar/Column\';\\nimport ColumnGroup from \'./sugar/ColumnGroup\';\\nimport { INTERNAL_COL_DEFINE } from \'./utils/legacyUtil\';\\nexport { Summary, Column, ColumnGroup, INTERNAL_COL_DEFINE };\\nexport default Table;\\n","rc-table/lib/interface.d.ts":"import * as React from \'react\';\\n/**\\n * ColumnType which applied in antd: https://ant.design/components/table-cn/#Column\\n * - defaultSortOrder\\n * - filterDropdown\\n * - filterDropdownVisible\\n * - filtered\\n * - filteredValue\\n * - filterIcon\\n * - filterMultiple\\n * - filters\\n * - sorter\\n * - sortOrder\\n * - sortDirections\\n * - onFilter\\n * - onFilterDropdownVisibleChange\\n */\\nexport declare type Key = React.Key;\\nexport declare type FixedType = \'left\' | \'right\' | boolean;\\nexport declare type DefaultRecordType = Record<string, any>;\\nexport declare type TableLayout = \'auto\' | \'fixed\';\\nexport declare type RowClassName<RecordType> = (record: RecordType, index: number, indent: number) => string;\\nexport interface CellType<RecordType> {\\n    key?: Key;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    column?: ColumnsType<RecordType>[number];\\n    colSpan?: number;\\n    rowSpan?: number;\\n    /** Only used for table header */\\n    hasSubColumns?: boolean;\\n    colStart?: number;\\n    colEnd?: number;\\n}\\nexport interface RenderedCell<RecordType> {\\n    props?: CellType<RecordType>;\\n    children?: React.ReactNode;\\n}\\nexport declare type DataIndex = string | number | readonly (string | number)[];\\nexport declare type CellEllipsisType = {\\n    showTitle?: boolean;\\n} | boolean;\\ninterface ColumnSharedType<RecordType> {\\n    title?: React.ReactNode;\\n    key?: Key;\\n    className?: string;\\n    fixed?: FixedType;\\n    onHeaderCell?: GetComponentProps<ColumnsType<RecordType>[number]>;\\n    ellipsis?: CellEllipsisType;\\n    align?: AlignType;\\n}\\nexport interface ColumnGroupType<RecordType> extends ColumnSharedType<RecordType> {\\n    children: ColumnsType<RecordType>;\\n}\\nexport declare type AlignType = \'left\' | \'center\' | \'right\';\\nexport interface ColumnType<RecordType> extends ColumnSharedType<RecordType> {\\n    colSpan?: number;\\n    dataIndex?: DataIndex;\\n    render?: (value: any, record: RecordType, index: number) => React.ReactNode | RenderedCell<RecordType>;\\n    shouldCellUpdate?: (record: RecordType, prevRecord: RecordType) => boolean;\\n    rowSpan?: number;\\n    width?: number | string;\\n    onCell?: GetComponentProps<RecordType>;\\n    /** @deprecated Please use `onCell` instead */\\n    onCellClick?: (record: RecordType, e: React.MouseEvent<HTMLElement>) => void;\\n}\\nexport declare type ColumnsType<RecordType = unknown> = readonly (ColumnGroupType<RecordType> | ColumnType<RecordType>)[];\\nexport declare type GetRowKey<RecordType> = (record: RecordType, index?: number) => Key;\\nexport interface StickyOffsets {\\n    left: readonly number[];\\n    right: readonly number[];\\n    isSticky?: boolean;\\n}\\nexport declare type GetComponentProps<DataType> = (data: DataType, index?: number) => React.HTMLAttributes<HTMLElement>;\\ndeclare type Component<P> = React.ComponentType<P> | React.ForwardRefExoticComponent<P> | React.FC<P> | keyof React.ReactHTML;\\nexport declare type CustomizeComponent = Component<any>;\\nexport declare type CustomizeScrollBody<RecordType> = (data: readonly RecordType[], info: {\\n    scrollbarSize: number;\\n    ref: React.Ref<{\\n        scrollLeft: number;\\n    }>;\\n    onScroll: (info: {\\n        currentTarget?: HTMLElement;\\n        scrollLeft?: number;\\n    }) => void;\\n}) => React.ReactNode;\\nexport interface TableComponents<RecordType> {\\n    table?: CustomizeComponent;\\n    header?: {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n    body?: CustomizeScrollBody<RecordType> | {\\n        wrapper?: CustomizeComponent;\\n        row?: CustomizeComponent;\\n        cell?: CustomizeComponent;\\n    };\\n}\\nexport declare type GetComponent = (path: readonly string[], defaultComponent?: CustomizeComponent) => CustomizeComponent;\\nexport declare type ExpandableType = false | \'row\' | \'nest\';\\nexport interface LegacyExpandableProps<RecordType> {\\n    /** @deprecated Use `expandable.expandedRowKeys` instead */\\n    expandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.defaultExpandedRowKeys` instead */\\n    defaultExpandedRowKeys?: Key[];\\n    /** @deprecated Use `expandable.expandedRowRender` instead */\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    /** @deprecated Use `expandable.expandRowByClick` instead */\\n    expandRowByClick?: boolean;\\n    /** @deprecated Use `expandable.expandIcon` instead */\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    /** @deprecated Use `expandable.onExpand` instead */\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    /** @deprecated Use `expandable.onExpandedRowsChange` instead */\\n    onExpandedRowsChange?: (expandedKeys: Key[]) => void;\\n    /** @deprecated Use `expandable.defaultExpandAllRows` instead */\\n    defaultExpandAllRows?: boolean;\\n    /** @deprecated Use `expandable.indentSize` instead */\\n    indentSize?: number;\\n    /** @deprecated Use `expandable.expandIconColumnIndex` instead */\\n    expandIconColumnIndex?: number;\\n    /** @deprecated Use `expandable.expandedRowClassName` instead */\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    /** @deprecated Use `expandable.childrenColumnName` instead */\\n    childrenColumnName?: string;\\n}\\nexport declare type ExpandedRowRender<ValueType> = (record: ValueType, index: number, indent: number, expanded: boolean) => React.ReactNode;\\nexport interface RenderExpandIconProps<RecordType> {\\n    prefixCls: string;\\n    expanded: boolean;\\n    record: RecordType;\\n    expandable: boolean;\\n    onExpand: TriggerEventHandler<RecordType>;\\n}\\nexport declare type RenderExpandIcon<RecordType> = (props: RenderExpandIconProps<RecordType>) => React.ReactNode;\\nexport interface ExpandableConfig<RecordType> {\\n    expandedRowKeys?: readonly Key[];\\n    defaultExpandedRowKeys?: readonly Key[];\\n    expandedRowRender?: ExpandedRowRender<RecordType>;\\n    expandRowByClick?: boolean;\\n    expandIcon?: RenderExpandIcon<RecordType>;\\n    onExpand?: (expanded: boolean, record: RecordType) => void;\\n    onExpandedRowsChange?: (expandedKeys: readonly Key[]) => void;\\n    defaultExpandAllRows?: boolean;\\n    indentSize?: number;\\n    expandIconColumnIndex?: number;\\n    expandedRowClassName?: RowClassName<RecordType>;\\n    childrenColumnName?: string;\\n    rowExpandable?: (record: RecordType) => boolean;\\n    columnWidth?: number | string;\\n}\\nexport declare type PanelRender<RecordType> = (data: readonly RecordType[]) => React.ReactNode;\\nexport declare type TriggerEventHandler<RecordType> = (record: RecordType, event: React.MouseEvent<HTMLElement>) => void;\\nexport interface TableSticky {\\n    offsetHeader?: number;\\n    offsetScroll?: number;\\n    getContainer?: () => Window | HTMLElement;\\n}\\nexport {};\\n","rc-table/lib/Panel/index.d.ts":"import * as React from \'react\';\\nexport interface TitleProps {\\n    className: string;\\n    children: React.ReactNode;\\n}\\ndeclare function Panel({ className, children }: TitleProps): JSX.Element;\\nexport default Panel;\\n","rc-table/lib/stickyScrollBar.d.ts":"import * as React from \'react\';\\ninterface StickyScrollBarProps {\\n    scrollBodyRef: React.RefObject<HTMLDivElement>;\\n    onScroll: (params: {\\n        scrollLeft?: number;\\n    }) => void;\\n    offsetScroll: number;\\n    container: HTMLElement | Window;\\n}\\ndeclare const _default: React.ForwardRefExoticComponent<StickyScrollBarProps & React.RefAttributes<unknown>>;\\nexport default _default;\\n","rc-table/lib/sugar/Column.d.ts":"import { ColumnType } from \'../interface\';\\nexport interface ColumnProps<RecordType> extends ColumnType<RecordType> {\\n    children?: null;\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function Column<RecordType>(_: ColumnProps<RecordType>): any;\\nexport default Column;\\n","rc-table/lib/sugar/ColumnGroup.d.ts":"import * as React from \'react\';\\nimport { ColumnProps } from \'./Column\';\\nimport { ColumnType } from \'../interface\';\\nexport interface ColumnGroupProps<RecordType> extends Omit<ColumnType<RecordType>, \'children\'> {\\n    children: React.ReactElement<ColumnProps<RecordType>> | readonly React.ReactElement<ColumnProps<RecordType>>[];\\n}\\n/**\\n * This is a syntactic sugar for `columns` prop.\\n * So HOC will not work on this.\\n */\\ndeclare function ColumnGroup<RecordType>(_: ColumnGroupProps<RecordType>): any;\\nexport default ColumnGroup;\\n","rc-table/lib/Table.d.ts":"/**\\n * Feature:\\n *  - fixed not need to set width\\n *  - support `rowExpandable` to config row expand logic\\n *  - add `summary` to support `() => ReactNode`\\n *\\n * Update:\\n *  - `dataIndex` is `array[]` now\\n *  - `expandable` wrap all the expand related props\\n *\\n * Removed:\\n *  - expandIconAsCell\\n *  - useFixedHeader\\n *  - rowRef\\n *  - columns[number].onCellClick\\n *  - onRowClick\\n *  - onRowDoubleClick\\n *  - onRowMouseEnter\\n *  - onRowMouseLeave\\n *  - getBodyWrapper\\n *  - bodyStyle\\n *\\n * Deprecated:\\n *  - All expanded props, move into expandable\\n */\\nimport * as React from \'react\';\\nimport { GetRowKey, ColumnsType, TableComponents, DefaultRecordType, GetComponentProps, ExpandableConfig, LegacyExpandableProps, PanelRender, TableLayout, RowClassName, ColumnType, TableSticky } from \'./interface\';\\nexport declare const INTERNAL_HOOKS = \\"rc-table-internal-hook\\";\\nexport interface TableProps<RecordType = unknown> extends LegacyExpandableProps<RecordType> {\\n    prefixCls?: string;\\n    className?: string;\\n    style?: React.CSSProperties;\\n    children?: React.ReactNode;\\n    data?: readonly RecordType[];\\n    columns?: ColumnsType<RecordType>;\\n    rowKey?: string | GetRowKey<RecordType>;\\n    tableLayout?: TableLayout;\\n    scroll?: {\\n        x?: number | true | string;\\n        y?: number | string;\\n    };\\n    /** Config expand rows */\\n    expandable?: ExpandableConfig<RecordType>;\\n    indentSize?: number;\\n    rowClassName?: string | RowClassName<RecordType>;\\n    title?: PanelRender<RecordType>;\\n    footer?: PanelRender<RecordType>;\\n    summary?: (data: readonly RecordType[]) => React.ReactNode;\\n    id?: string;\\n    showHeader?: boolean;\\n    components?: TableComponents<RecordType>;\\n    onRow?: GetComponentProps<RecordType>;\\n    onHeaderRow?: GetComponentProps<readonly ColumnType<RecordType>[]>;\\n    emptyText?: React.ReactNode | (() => React.ReactNode);\\n    direction?: \'ltr\' | \'rtl\';\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalHooks?: string;\\n    /**\\n     * @private Internal usage, may remove by refactor. Should always use `columns` instead.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    transformColumns?: (columns: ColumnsType<RecordType>) => ColumnsType<RecordType>;\\n    /**\\n     * @private Internal usage, may remove by refactor.\\n     *\\n     * !!! DO NOT USE IN PRODUCTION ENVIRONMENT !!!\\n     */\\n    internalRefs?: {\\n        body: React.MutableRefObject<HTMLDivElement>;\\n    };\\n    sticky?: boolean | TableSticky;\\n}\\ndeclare function Table<RecordType extends DefaultRecordType>(props: TableProps<RecordType>): JSX.Element;\\ndeclare namespace Table {\\n    var Column: typeof import(\\"./sugar/Column\\").default;\\n    var ColumnGroup: typeof import(\\"./sugar/ColumnGroup\\").default;\\n    var Summary: {\\n        Cell: typeof import(\\"./Footer/Cell\\").default;\\n        Row: typeof import(\\"./Footer/Row\\").default;\\n    };\\n    var defaultProps: {\\n        rowKey: string;\\n        prefixCls: string;\\n        emptyText: () => string;\\n    };\\n}\\nexport default Table;\\n","rc-table/lib/utils/expandUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { RenderExpandIconProps, Key, GetRowKey } from \'../interface\';\\nexport declare function renderExpandIcon<RecordType>({ prefixCls, record, onExpand, expanded, expandable, }: RenderExpandIconProps<RecordType>): JSX.Element;\\nexport declare function findAllChildrenKeys<RecordType>(data: readonly RecordType[], getRowKey: GetRowKey<RecordType>, childrenColumnName: string): Key[];\\n","rc-table/lib/utils/fixUtil.d.ts":"import { StickyOffsets, FixedType } from \'../interface\';\\nexport interface FixedInfo {\\n    fixLeft: number | false;\\n    fixRight: number | false;\\n    lastFixLeft: boolean;\\n    firstFixRight: boolean;\\n    lastFixRight: boolean;\\n    firstFixLeft: boolean;\\n    isSticky: boolean;\\n}\\nexport declare function getCellFixedInfo(colStart: number, colEnd: number, columns: readonly {\\n    fixed?: FixedType;\\n}[], stickyOffsets: StickyOffsets, direction: \'ltr\' | \'rtl\'): FixedInfo;\\n","rc-table/lib/utils/legacyUtil.d.ts":"import { ExpandableConfig, LegacyExpandableProps } from \'../interface\';\\nexport declare const INTERNAL_COL_DEFINE = \\"RC_TABLE_INTERNAL_COL_DEFINE\\";\\nexport declare function getExpandableProps<RecordType>(props: LegacyExpandableProps<RecordType> & {\\n    expandable?: ExpandableConfig<RecordType>;\\n}): ExpandableConfig<RecordType>;\\n/**\\n * Returns only data- and aria- key/value pairs\\n * @param {object} props\\n */\\nexport declare function getDataAndAriaProps(props: object): {};\\n","rc-table/lib/utils/valueUtil.d.ts":"/// <reference types=\\"react\\" />\\nimport { Key, DataIndex } from \'../interface\';\\nexport declare function getPathValue<ValueType, ObjectType extends object>(record: ObjectType, path: DataIndex): ValueType;\\ninterface GetColumnKeyColumn {\\n    key?: Key;\\n    dataIndex?: DataIndex;\\n}\\nexport declare function getColumnsKey(columns: readonly GetColumnKeyColumn[]): import(\\"react\\").Key[];\\nexport declare function mergeObject<ReturnObject extends object>(...objects: Partial<ReturnObject>[]): ReturnObject;\\nexport declare function validateValue<T>(val: T): boolean;\\nexport {};\\n"}}')},575:function(e){e.exports=JSON.parse("{\"version\":\"3.0.0\",\"types\":{\"@apollo/client/cache/core/cache.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { StoreObject, Reference } from '../../utilities';\\r\\nimport { DataProxy } from './types/DataProxy';\\r\\nimport { Cache } from './types/Cache';\\r\\nexport declare type Transaction<T> = (c: ApolloCache<T>) => void;\\r\\nexport declare abstract class ApolloCache<TSerialized> implements DataProxy {\\r\\n    abstract read<T, TVariables = any>(query: Cache.ReadOptions<TVariables, T>): T | null;\\r\\n    abstract write<TResult = any, TVariables = any>(write: Cache.WriteOptions<TResult, TVariables>): Reference | undefined;\\r\\n    abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\\r\\n    abstract watch(watch: Cache.WatchOptions): () => void;\\r\\n    abstract reset(): Promise<void>;\\r\\n    abstract evict(options: Cache.EvictOptions): boolean;\\r\\n    abstract restore(serializedState: TSerialized): ApolloCache<TSerialized>;\\r\\n    abstract extract(optimistic?: boolean): TSerialized;\\r\\n    abstract removeOptimistic(id: string): void;\\r\\n    abstract performTransaction(transaction: Transaction<TSerialized>, optimisticId?: string | null): void;\\r\\n    recordOptimisticTransaction(transaction: Transaction<TSerialized>, optimisticId: string): void;\\r\\n    transformDocument(document: DocumentNode): DocumentNode;\\r\\n    identify(object: StoreObject | Reference): string | undefined;\\r\\n    gc(): string[];\\r\\n    modify(options: Cache.ModifyOptions): boolean;\\r\\n    transformForLink(document: DocumentNode): DocumentNode;\\r\\n    readQuery<QueryType, TVariables = any>(options: DataProxy.Query<TVariables, QueryType>, optimistic?: boolean): QueryType | null;\\r\\n    private getFragmentDoc;\\r\\n    readFragment<FragmentType, TVariables = any>(options: DataProxy.Fragment<TVariables, FragmentType>, optimistic?: boolean): FragmentType | null;\\r\\n    writeQuery<TData = any, TVariables = any>(options: Cache.WriteQueryOptions<TData, TVariables>): Reference | undefined;\\r\\n    writeFragment<TData = any, TVariables = any>(options: Cache.WriteFragmentOptions<TData, TVariables>): Reference | undefined;\\r\\n}\\r\\n\",\"@apollo/client/cache/core/types/Cache.d.ts\":\"import { DataProxy } from './DataProxy';\\r\\nimport { Modifier, Modifiers } from './common';\\r\\nexport declare namespace Cache {\\r\\n    type WatchCallback = (diff: Cache.DiffResult<any>) => void;\\r\\n    interface ReadOptions<TVariables = any, TData = any> extends DataProxy.Query<TVariables, TData> {\\r\\n        rootId?: string;\\r\\n        previousResult?: any;\\r\\n        optimistic: boolean;\\r\\n    }\\r\\n    interface WriteOptions<TResult = any, TVariables = any> extends DataProxy.Query<TVariables, TResult> {\\r\\n        dataId?: string;\\r\\n        result: TResult;\\r\\n        broadcast?: boolean;\\r\\n    }\\r\\n    interface DiffOptions extends ReadOptions {\\r\\n        returnPartialData?: boolean;\\r\\n    }\\r\\n    interface WatchOptions extends ReadOptions {\\r\\n        immediate?: boolean;\\r\\n        callback: WatchCallback;\\r\\n    }\\r\\n    interface EvictOptions {\\r\\n        id?: string;\\r\\n        fieldName?: string;\\r\\n        args?: Record<string, any>;\\r\\n        broadcast?: boolean;\\r\\n    }\\r\\n    interface ModifyOptions {\\r\\n        id?: string;\\r\\n        fields: Modifiers | Modifier<any>;\\r\\n        optimistic?: boolean;\\r\\n        broadcast?: boolean;\\r\\n    }\\r\\n    export import DiffResult = DataProxy.DiffResult;\\r\\n    export import WriteQueryOptions = DataProxy.WriteQueryOptions;\\r\\n    export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\\r\\n    export import Fragment = DataProxy.Fragment;\\r\\n}\\r\\n\",\"@apollo/client/cache/core/types/common.d.ts\":\"import { FieldNode } from 'graphql';\\r\\nimport { Reference, StoreObject, StoreValue, isReference } from '../../../utilities';\\r\\nimport { StorageType } from '../../inmemory/policies';\\r\\nexport declare type SafeReadonly<T> = T extends object ? Readonly<T> : T;\\r\\nexport declare class MissingFieldError {\\r\\n    readonly message: string;\\r\\n    readonly path: (string | number)[];\\r\\n    readonly query: import('graphql').DocumentNode;\\r\\n    readonly clientOnly: boolean;\\r\\n    readonly variables?: Record<string, any> | undefined;\\r\\n    constructor(message: string, path: (string | number)[], query: import('graphql').DocumentNode, clientOnly: boolean, variables?: Record<string, any> | undefined);\\r\\n}\\r\\nexport interface FieldSpecifier {\\r\\n    typename?: string;\\r\\n    fieldName: string;\\r\\n    field?: FieldNode;\\r\\n    args?: Record<string, any>;\\r\\n    variables?: Record<string, any>;\\r\\n}\\r\\nexport interface ReadFieldOptions extends FieldSpecifier {\\r\\n    from?: StoreObject | Reference;\\r\\n}\\r\\nexport interface ReadFieldFunction {\\r\\n    <V = StoreValue>(options: ReadFieldOptions): SafeReadonly<V> | undefined;\\r\\n    <V = StoreValue>(fieldName: string, from?: StoreObject | Reference): SafeReadonly<V> | undefined;\\r\\n}\\r\\nexport declare type ToReferenceFunction = (objOrIdOrRef: StoreObject | string | Reference, mergeIntoStore?: boolean) => Reference | undefined;\\r\\nexport declare type CanReadFunction = (value: StoreValue) => boolean;\\r\\nexport declare type Modifier<T> = (value: T, details: {\\r\\n    DELETE: any;\\r\\n    INVALIDATE: any;\\r\\n    fieldName: string;\\r\\n    storeFieldName: string;\\r\\n    readField: ReadFieldFunction;\\r\\n    canRead: CanReadFunction;\\r\\n    isReference: typeof isReference;\\r\\n    toReference: ToReferenceFunction;\\r\\n    storage: StorageType;\\r\\n}) => T;\\r\\nexport declare type Modifiers = {\\r\\n    [fieldName: string]: Modifier<any>;\\r\\n};\\r\\n\",\"@apollo/client/cache/core/types/DataProxy.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { MissingFieldError } from './common';\\r\\nexport declare namespace DataProxy {\\r\\n    interface Query<TVariables, TData> {\\r\\n        query: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n        variables?: TVariables;\\r\\n        id?: string;\\r\\n    }\\r\\n    interface Fragment<TVariables, TData> {\\r\\n        id?: string;\\r\\n        fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n        fragmentName?: string;\\r\\n        variables?: TVariables;\\r\\n    }\\r\\n    interface WriteQueryOptions<TData, TVariables> extends Query<TVariables, TData> {\\r\\n        data: TData;\\r\\n        broadcast?: boolean;\\r\\n    }\\r\\n    interface WriteFragmentOptions<TData, TVariables> extends Fragment<TVariables, TData> {\\r\\n        data: TData;\\r\\n        broadcast?: boolean;\\r\\n    }\\r\\n    type DiffResult<T> = {\\r\\n        result?: T;\\r\\n        complete?: boolean;\\r\\n        missing?: MissingFieldError[];\\r\\n        fromOptimisticTransaction?: boolean;\\r\\n    };\\r\\n}\\r\\nexport interface DataProxy {\\r\\n    readQuery<QueryType, TVariables = any>(options: DataProxy.Query<TVariables, QueryType>, optimistic?: boolean): QueryType | null;\\r\\n    readFragment<FragmentType, TVariables = any>(options: DataProxy.Fragment<TVariables, FragmentType>, optimistic?: boolean): FragmentType | null;\\r\\n    writeQuery<TData = any, TVariables = any>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;\\r\\n    writeFragment<TData = any, TVariables = any>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;\\r\\n}\\r\\n\",\"@apollo/client/cache/index.d.ts\":\"export { Transaction, ApolloCache } from './core/cache';\\r\\nexport { Cache } from './core/types/Cache';\\r\\nexport { DataProxy } from './core/types/DataProxy';\\r\\nexport { MissingFieldError } from './core/types/common';\\r\\nexport { Reference, isReference, makeReference, } from '../utilities';\\r\\nexport { InMemoryCache, InMemoryCacheConfig, } from './inmemory/inMemoryCache';\\r\\nexport { ReactiveVar, makeVar, cacheSlot, } from './inmemory/reactiveVars';\\r\\nexport { defaultDataIdFromObject, TypePolicies, TypePolicy, FieldPolicy, FieldReadFunction, FieldMergeFunction, FieldFunctionOptions, PossibleTypesMap, } from './inmemory/policies';\\r\\nexport * from './inmemory/types';\\r\\n\",\"@apollo/client/cache/inmemory/entityStore.d.ts\":\"import { KeyTrie } from 'optimism';\\r\\nimport { StoreValue, StoreObject, Reference } from '../../utilities';\\r\\nimport { NormalizedCache, NormalizedCacheObject } from './types';\\r\\nimport { Policies, StorageType } from './policies';\\r\\nimport { Cache } from '../core/types/Cache';\\r\\nimport { SafeReadonly, Modifier, Modifiers, ToReferenceFunction, CanReadFunction } from '../core/types/common';\\r\\nexport declare abstract class EntityStore implements NormalizedCache {\\r\\n    readonly policies: Policies;\\r\\n    readonly group: CacheGroup;\\r\\n    protected data: NormalizedCacheObject;\\r\\n    constructor(policies: Policies, group: CacheGroup);\\r\\n    abstract addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer;\\r\\n    abstract removeLayer(layerId: string): EntityStore;\\r\\n    toObject(): NormalizedCacheObject;\\r\\n    has(dataId: string): boolean;\\r\\n    get(dataId: string, fieldName: string): StoreValue;\\r\\n    protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined;\\r\\n    merge(dataId: string, incoming: StoreObject): void;\\r\\n    modify(dataId: string, fields: Modifier<any> | Modifiers): boolean;\\r\\n    delete(dataId: string, fieldName?: string, args?: Record<string, any>): boolean;\\r\\n    evict(options: Cache.EvictOptions): boolean;\\r\\n    clear(): void;\\r\\n    replace(newData: NormalizedCacheObject | null): void;\\r\\n    abstract getStorage(idOrObj: string | StoreObject, storeFieldName: string): StorageType;\\r\\n    private rootIds;\\r\\n    retain(rootId: string): number;\\r\\n    release(rootId: string): number;\\r\\n    getRootIdSet(ids?: Set<string>): Set<string>;\\r\\n    gc(): string[];\\r\\n    private refs;\\r\\n    findChildRefIds(dataId: string): Record<string, true>;\\r\\n    makeCacheKey(...args: any[]): object;\\r\\n    getFieldValue: <T = StoreValue>(objectOrReference: StoreObject | Reference, storeFieldName: string) => SafeReadonly<T>;\\r\\n    canRead: CanReadFunction;\\r\\n    toReference: ToReferenceFunction;\\r\\n}\\r\\nexport declare type FieldValueGetter = EntityStore[\\\"getFieldValue\\\"];\\r\\ndeclare class CacheGroup {\\r\\n    readonly caching: boolean;\\r\\n    private d;\\r\\n    constructor(caching: boolean);\\r\\n    depend(dataId: string, storeFieldName: string): void;\\r\\n    dirty(dataId: string, storeFieldName: string): void;\\r\\n    readonly keyMaker: KeyTrie<object>;\\r\\n}\\r\\nexport declare namespace EntityStore {\\r\\n    class Root extends EntityStore {\\r\\n        private sharedLayerGroup;\\r\\n        constructor({ policies, resultCaching, seed, }: {\\r\\n            policies: Policies;\\r\\n            resultCaching?: boolean;\\r\\n            seed?: NormalizedCacheObject;\\r\\n        });\\r\\n        addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer;\\r\\n        removeLayer(): Root;\\r\\n        readonly storageTrie: KeyTrie<Record<string, any>>;\\r\\n        getStorage(idOrObj: string | StoreObject, storeFieldName: string): StorageType;\\r\\n    }\\r\\n}\\r\\ndeclare class Layer extends EntityStore {\\r\\n    readonly id: string;\\r\\n    readonly parent: EntityStore;\\r\\n    readonly replay: (layer: EntityStore) => any;\\r\\n    readonly group: CacheGroup;\\r\\n    constructor(id: string, parent: EntityStore, replay: (layer: EntityStore) => any, group: CacheGroup);\\r\\n    addLayer(layerId: string, replay: (layer: EntityStore) => any): Layer;\\r\\n    removeLayer(layerId: string): EntityStore;\\r\\n    toObject(): NormalizedCacheObject;\\r\\n    findChildRefIds(dataId: string): Record<string, true>;\\r\\n    getStorage(idOrObj: string | StoreObject, storeFieldName: string): StorageType;\\r\\n}\\r\\nexport declare function supportsResultCaching(store: any): store is EntityStore;\\r\\nexport {};\\r\\n\",\"@apollo/client/cache/inmemory/fixPolyfills.d.ts\":\"\",\"@apollo/client/cache/inmemory/fixPolyfills.native.d.ts\":\"export {};\\r\\n\",\"@apollo/client/cache/inmemory/helpers.d.ts\":\"import { FieldNode, SelectionSetNode } from 'graphql';\\r\\nimport { NormalizedCache } from './types';\\r\\nimport { Reference, StoreValue, StoreObject, DeepMerger } from '../../utilities';\\r\\nexport declare const hasOwn: (v: string | number | symbol) => boolean;\\r\\nexport declare function getTypenameFromStoreObject(store: NormalizedCache, objectOrReference: StoreObject | Reference): string | undefined;\\r\\nexport declare const TypeOrFieldNameRegExp: RegExp;\\r\\nexport declare function fieldNameFromStoreName(storeFieldName: string): string;\\r\\nexport declare function selectionSetMatchesResult(selectionSet: SelectionSetNode, result: Record<string, any>, variables?: Record<string, any>): boolean;\\r\\nexport interface FieldValueToBeMerged {\\r\\n    __field: FieldNode;\\r\\n    __typename: string;\\r\\n    __value: StoreValue;\\r\\n}\\r\\nexport declare function storeValueIsStoreObject(value: StoreValue): value is StoreObject;\\r\\nexport declare function isFieldValueToBeMerged(value: any): value is FieldValueToBeMerged;\\r\\nexport declare function makeProcessedFieldsMerger(): DeepMerger<[]>;\\r\\n\",\"@apollo/client/cache/inmemory/inMemoryCache.d.ts\":\"import './fixPolyfills';\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { ApolloCache } from '../core/cache';\\r\\nimport { Cache } from '../core/types/Cache';\\r\\nimport { StoreObject, Reference } from '../../utilities';\\r\\nimport { ApolloReducerConfig, NormalizedCacheObject } from './types';\\r\\nimport { makeVar } from './reactiveVars';\\r\\nimport { PossibleTypesMap, Policies, TypePolicies } from './policies';\\r\\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\\r\\n    resultCaching?: boolean;\\r\\n    possibleTypes?: PossibleTypesMap;\\r\\n    typePolicies?: TypePolicies;\\r\\n}\\r\\nexport declare class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\\r\\n    private data;\\r\\n    private optimisticData;\\r\\n    protected config: InMemoryCacheConfig;\\r\\n    private watches;\\r\\n    private addTypename;\\r\\n    private typenameDocumentCache;\\r\\n    private storeReader;\\r\\n    private storeWriter;\\r\\n    readonly policies: Policies;\\r\\n    readonly makeVar: typeof makeVar;\\r\\n    constructor(config?: InMemoryCacheConfig);\\r\\n    restore(data: NormalizedCacheObject): this;\\r\\n    extract(optimistic?: boolean): NormalizedCacheObject;\\r\\n    read<T>(options: Cache.ReadOptions): T | null;\\r\\n    write(options: Cache.WriteOptions): Reference | undefined;\\r\\n    modify(options: Cache.ModifyOptions): boolean;\\r\\n    diff<T>(options: Cache.DiffOptions): Cache.DiffResult<T>;\\r\\n    watch(watch: Cache.WatchOptions): () => void;\\r\\n    gc(): string[];\\r\\n    retain(rootId: string, optimistic?: boolean): number;\\r\\n    release(rootId: string, optimistic?: boolean): number;\\r\\n    identify(object: StoreObject | Reference): string | undefined;\\r\\n    evict(options: Cache.EvictOptions): boolean;\\r\\n    reset(): Promise<void>;\\r\\n    removeOptimistic(idToRemove: string): void;\\r\\n    private txCount;\\r\\n    performTransaction(transaction: (cache: InMemoryCache) => any, optimisticId?: string | null): void;\\r\\n    transformDocument(document: DocumentNode): DocumentNode;\\r\\n    protected broadcastWatches(fromOptimisticTransaction?: boolean): void;\\r\\n    private maybeBroadcastWatch;\\r\\n    private watchDep;\\r\\n    private broadcastWatch;\\r\\n}\\r\\n\",\"@apollo/client/cache/inmemory/policies.d.ts\":\"import { InlineFragmentNode, FragmentDefinitionNode, SelectionSetNode, FieldNode } from 'graphql';\\r\\nimport { FragmentMap, StoreValue, StoreObject, Reference, isReference } from '../../utilities';\\r\\nimport { IdGetter, ReadMergeModifyContext } from \\\"./types\\\";\\r\\nimport { FieldValueToBeMerged } from './helpers';\\r\\nimport { InMemoryCache } from './inMemoryCache';\\r\\nimport { SafeReadonly, FieldSpecifier, ToReferenceFunction, ReadFieldFunction, ReadFieldOptions, CanReadFunction } from '../core/types/common';\\r\\nexport declare type TypePolicies = {\\r\\n    [__typename: string]: TypePolicy;\\r\\n};\\r\\ndeclare type KeySpecifier = (string | any[])[];\\r\\ndeclare type KeyFieldsContext = {\\r\\n    typename?: string;\\r\\n    selectionSet?: SelectionSetNode;\\r\\n    fragmentMap?: FragmentMap;\\r\\n    keyObject?: Record<string, any>;\\r\\n};\\r\\nexport declare type KeyFieldsFunction = (object: Readonly<StoreObject>, context: KeyFieldsContext) => KeySpecifier | ReturnType<IdGetter>;\\r\\nexport declare type TypePolicy = {\\r\\n    keyFields?: KeySpecifier | KeyFieldsFunction | false;\\r\\n    queryType?: true;\\r\\n    mutationType?: true;\\r\\n    subscriptionType?: true;\\r\\n    fields?: {\\r\\n        [fieldName: string]: FieldPolicy<any> | FieldReadFunction<any>;\\r\\n    };\\r\\n};\\r\\nexport declare type KeyArgsFunction = (args: Record<string, any> | null, context: {\\r\\n    typename: string;\\r\\n    fieldName: string;\\r\\n    field: FieldNode | null;\\r\\n    variables?: Record<string, any>;\\r\\n}) => KeySpecifier | ReturnType<IdGetter>;\\r\\nexport declare type FieldPolicy<TExisting = any, TIncoming = TExisting, TReadResult = TExisting> = {\\r\\n    keyArgs?: KeySpecifier | KeyArgsFunction | false;\\r\\n    read?: FieldReadFunction<TExisting, TReadResult>;\\r\\n    merge?: FieldMergeFunction<TExisting, TIncoming> | boolean;\\r\\n};\\r\\nexport declare type StorageType = Record<string, any>;\\r\\nexport interface FieldFunctionOptions<TArgs = Record<string, any>, TVars = Record<string, any>> {\\r\\n    args: TArgs | null;\\r\\n    fieldName: string;\\r\\n    storeFieldName: string;\\r\\n    field: FieldNode | null;\\r\\n    variables?: TVars;\\r\\n    isReference: typeof isReference;\\r\\n    toReference: ToReferenceFunction;\\r\\n    storage: StorageType;\\r\\n    cache: InMemoryCache;\\r\\n    readField: ReadFieldFunction;\\r\\n    canRead: CanReadFunction;\\r\\n    mergeObjects<T extends StoreObject | Reference>(existing: T, incoming: T): T | undefined;\\r\\n}\\r\\nexport declare type FieldReadFunction<TExisting = any, TReadResult = TExisting> = (existing: SafeReadonly<TExisting> | undefined, options: FieldFunctionOptions) => TReadResult | undefined;\\r\\nexport declare type FieldMergeFunction<TExisting = any, TIncoming = TExisting> = (existing: SafeReadonly<TExisting> | undefined, incoming: SafeReadonly<TIncoming>, options: FieldFunctionOptions) => SafeReadonly<TExisting>;\\r\\nexport declare const defaultDataIdFromObject: ({ __typename, id, _id }: Readonly<StoreObject>, context?: KeyFieldsContext | undefined) => string | undefined;\\r\\nexport declare type PossibleTypesMap = {\\r\\n    [supertype: string]: string[];\\r\\n};\\r\\nexport declare class Policies {\\r\\n    private config;\\r\\n    private typePolicies;\\r\\n    private supertypeMap;\\r\\n    private fuzzySubtypes;\\r\\n    readonly cache: InMemoryCache;\\r\\n    readonly rootIdsByTypename: Record<string, string>;\\r\\n    readonly rootTypenamesById: Record<string, string>;\\r\\n    readonly usingPossibleTypes = false;\\r\\n    constructor(config: {\\r\\n        cache: InMemoryCache;\\r\\n        dataIdFromObject?: KeyFieldsFunction;\\r\\n        possibleTypes?: PossibleTypesMap;\\r\\n        typePolicies?: TypePolicies;\\r\\n    });\\r\\n    identify(object: StoreObject, selectionSet?: SelectionSetNode, fragmentMap?: FragmentMap): [string?, StoreObject?];\\r\\n    addTypePolicies(typePolicies: TypePolicies): void;\\r\\n    private setRootTypename;\\r\\n    addPossibleTypes(possibleTypes: PossibleTypesMap): void;\\r\\n    private getTypePolicy;\\r\\n    private getFieldPolicy;\\r\\n    private getSupertypeSet;\\r\\n    fragmentMatches(fragment: InlineFragmentNode | FragmentDefinitionNode, typename: string | undefined, result?: Record<string, any>, variables?: Record<string, any>): boolean;\\r\\n    getStoreFieldName(fieldSpec: FieldSpecifier): string;\\r\\n    readField<V = StoreValue>(options: ReadFieldOptions, context: ReadMergeModifyContext): SafeReadonly<V> | undefined;\\r\\n    hasMergeFunction(typename: string | undefined, fieldName: string): boolean;\\r\\n    applyMerges<T extends StoreValue>(existing: T | Reference, incoming: T | FieldValueToBeMerged, context: ReadMergeModifyContext, storageKeys?: [string | StoreObject, string]): T;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/cache/inmemory/reactiveVars.d.ts\":\"import { ApolloCache } from '../../core';\\r\\nexport interface ReactiveVar<T> {\\r\\n    (newValue?: T): T;\\r\\n    onNextChange(listener: ReactiveListener<T>): () => void;\\r\\n}\\r\\nexport declare type ReactiveListener<T> = (value: T) => any;\\r\\nexport declare const cacheSlot: {\\r\\n    readonly id: string;\\r\\n    hasValue(): boolean;\\r\\n    getValue(): ApolloCache<any> | undefined;\\r\\n    withValue<TResult, TArgs extends any[], TThis = any>(value: ApolloCache<any>, callback: (this: TThis, ...args: TArgs) => TResult, args?: TArgs | undefined, thisArg?: TThis | undefined): TResult;\\r\\n};\\r\\nexport declare function makeVar<T>(value: T): ReactiveVar<T>;\\r\\n\",\"@apollo/client/cache/inmemory/readFromStore.d.ts\":\"import { SelectionSetNode } from 'graphql';\\r\\nimport { Reference, StoreObject } from '../../utilities';\\r\\nimport { Cache } from '../core/types/Cache';\\r\\nimport { DiffQueryAgainstStoreOptions, ReadMergeModifyContext } from './types';\\r\\nimport { InMemoryCache } from './inMemoryCache';\\r\\nimport { MissingFieldError } from '../core/types/common';\\r\\nexport declare type VariableMap = {\\r\\n    [name: string]: any;\\r\\n};\\r\\nexport declare type ExecResult<R = any> = {\\r\\n    result: R;\\r\\n    missing?: MissingFieldError[];\\r\\n};\\r\\nexport interface StoreReaderConfig {\\r\\n    cache: InMemoryCache;\\r\\n    addTypename?: boolean;\\r\\n}\\r\\nexport declare class StoreReader {\\r\\n    private config;\\r\\n    constructor(config: StoreReaderConfig);\\r\\n    diffQueryAgainstStore<T>({ store, query, rootId, variables, returnPartialData, }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T>;\\r\\n    isFresh(result: Record<string, any>, parent: StoreObject | Reference, selectionSet: SelectionSetNode, context: ReadMergeModifyContext): boolean;\\r\\n    private executeSelectionSet;\\r\\n    private execSelectionSetImpl;\\r\\n    private knownResults;\\r\\n    private executeSubSelectedArray;\\r\\n    private execSubSelectedArrayImpl;\\r\\n}\\r\\n\",\"@apollo/client/cache/inmemory/types.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { Transaction } from '../core/cache';\\r\\nimport { StoreObject, StoreValue, Reference } from '../../utilities';\\r\\nimport { FieldValueGetter } from './entityStore';\\r\\nimport { KeyFieldsFunction, StorageType } from './policies';\\r\\nimport { Modifier, Modifiers, ToReferenceFunction, CanReadFunction } from '../core/types/common';\\r\\nexport { StoreObject, StoreValue, Reference };\\r\\nexport interface IdGetterObj extends Object {\\r\\n    __typename?: string;\\r\\n    id?: string;\\r\\n    _id?: string;\\r\\n}\\r\\nexport declare type IdGetter = (value: IdGetterObj) => string | undefined;\\r\\nexport interface NormalizedCache {\\r\\n    has(dataId: string): boolean;\\r\\n    get(dataId: string, fieldName: string): StoreValue;\\r\\n    merge(dataId: string, incoming: StoreObject): void;\\r\\n    modify(dataId: string, fields: Modifiers | Modifier<any>): boolean;\\r\\n    delete(dataId: string, fieldName?: string): boolean;\\r\\n    clear(): void;\\r\\n    toObject(): NormalizedCacheObject;\\r\\n    replace(newData: NormalizedCacheObject): void;\\r\\n    retain(rootId: string): number;\\r\\n    release(rootId: string): number;\\r\\n    getFieldValue: FieldValueGetter;\\r\\n    toReference: ToReferenceFunction;\\r\\n    canRead: CanReadFunction;\\r\\n    getStorage(idOrObj: string | StoreObject, storeFieldName: string): StorageType;\\r\\n}\\r\\nexport interface NormalizedCacheObject {\\r\\n    [dataId: string]: StoreObject | undefined;\\r\\n}\\r\\nexport declare type OptimisticStoreItem = {\\r\\n    id: string;\\r\\n    data: NormalizedCacheObject;\\r\\n    transaction: Transaction<NormalizedCacheObject>;\\r\\n};\\r\\nexport declare type ReadQueryOptions = {\\r\\n    store: NormalizedCache;\\r\\n    query: DocumentNode;\\r\\n    variables?: Object;\\r\\n    previousResult?: any;\\r\\n    rootId?: string;\\r\\n    config?: ApolloReducerConfig;\\r\\n};\\r\\nexport declare type DiffQueryAgainstStoreOptions = ReadQueryOptions & {\\r\\n    returnPartialData?: boolean;\\r\\n};\\r\\nexport declare type ApolloReducerConfig = {\\r\\n    dataIdFromObject?: KeyFieldsFunction;\\r\\n    addTypename?: boolean;\\r\\n};\\r\\nexport interface ReadMergeModifyContext {\\r\\n    store: NormalizedCache;\\r\\n    variables?: Record<string, any>;\\r\\n    varString?: string;\\r\\n}\\r\\n\",\"@apollo/client/cache/inmemory/writeToStore.d.ts\":\"import { SelectionSetNode, DocumentNode } from 'graphql';\\r\\nimport { FragmentMap, Reference } from '../../utilities';\\r\\nimport { NormalizedCache, ReadMergeModifyContext } from './types';\\r\\nimport { StoreReader } from './readFromStore';\\r\\nimport { InMemoryCache } from './inMemoryCache';\\r\\nexport interface WriteContext extends ReadMergeModifyContext {\\r\\n    readonly written: {\\r\\n        [dataId: string]: SelectionSetNode[];\\r\\n    };\\r\\n    readonly fragmentMap?: FragmentMap;\\r\\n    merge<T>(existing: T, incoming: T): T;\\r\\n}\\r\\nexport interface WriteToStoreOptions {\\r\\n    query: DocumentNode;\\r\\n    result: Object;\\r\\n    dataId?: string;\\r\\n    store: NormalizedCache;\\r\\n    variables?: Object;\\r\\n}\\r\\nexport declare class StoreWriter {\\r\\n    readonly cache: InMemoryCache;\\r\\n    private reader?;\\r\\n    constructor(cache: InMemoryCache, reader?: StoreReader | undefined);\\r\\n    writeToStore({ query, result, dataId, store, variables, }: WriteToStoreOptions): Reference | undefined;\\r\\n    private processSelectionSet;\\r\\n    private processFieldValue;\\r\\n}\\r\\n\",\"@apollo/client/config/jest/setup.d.ts\":\"export {};\\r\\n\",\"@apollo/client/core/ApolloClient.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ExecutionResult, DocumentNode } from 'graphql';\\r\\nimport { ApolloLink, FetchResult, GraphQLRequest } from '../link/core';\\r\\nimport { ApolloCache, DataProxy } from '../cache';\\r\\nimport { Observable } from '../utilities';\\r\\nimport { UriFunction } from '../link/http';\\r\\nimport { ObservableQuery } from './ObservableQuery';\\r\\nimport { ApolloQueryResult, OperationVariables, Resolvers } from './types';\\r\\nimport { QueryOptions, WatchQueryOptions, MutationOptions, SubscriptionOptions } from './watchQueryOptions';\\r\\nimport { FragmentMatcher } from './LocalState';\\r\\nexport interface DefaultOptions {\\r\\n    watchQuery?: Partial<WatchQueryOptions>;\\r\\n    query?: Partial<QueryOptions>;\\r\\n    mutate?: Partial<MutationOptions>;\\r\\n}\\r\\nexport declare type ApolloClientOptions<TCacheShape> = {\\r\\n    uri?: string | UriFunction;\\r\\n    credentials?: string;\\r\\n    headers?: Record<string, string>;\\r\\n    link?: ApolloLink;\\r\\n    cache: ApolloCache<TCacheShape>;\\r\\n    ssrForceFetchDelay?: number;\\r\\n    ssrMode?: boolean;\\r\\n    connectToDevTools?: boolean;\\r\\n    queryDeduplication?: boolean;\\r\\n    defaultOptions?: DefaultOptions;\\r\\n    assumeImmutableResults?: boolean;\\r\\n    resolvers?: Resolvers | Resolvers[];\\r\\n    typeDefs?: string | string[] | DocumentNode | DocumentNode[];\\r\\n    fragmentMatcher?: FragmentMatcher;\\r\\n    name?: string;\\r\\n    version?: string;\\r\\n};\\r\\nexport declare class ApolloClient<TCacheShape> implements DataProxy {\\r\\n    link: ApolloLink;\\r\\n    cache: ApolloCache<TCacheShape>;\\r\\n    disableNetworkFetches: boolean;\\r\\n    version: string;\\r\\n    queryDeduplication: boolean;\\r\\n    defaultOptions: DefaultOptions;\\r\\n    readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\\r\\n    private queryManager;\\r\\n    private devToolsHookCb;\\r\\n    private resetStoreCallbacks;\\r\\n    private clearStoreCallbacks;\\r\\n    private localState;\\r\\n    constructor(options: ApolloClientOptions<TCacheShape>);\\r\\n    stop(): void;\\r\\n    watchQuery<T = any, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables>;\\r\\n    query<T = any, TVariables = OperationVariables>(options: QueryOptions<TVariables, T>): Promise<ApolloQueryResult<T>>;\\r\\n    mutate<T = any, TVariables = OperationVariables>(options: MutationOptions<T, TVariables>): Promise<FetchResult<T>>;\\r\\n    subscribe<T = any, TVariables = OperationVariables>(options: SubscriptionOptions<TVariables, T>): Observable<FetchResult<T>>;\\r\\n    readQuery<T = any, TVariables = OperationVariables>(options: DataProxy.Query<TVariables, T>, optimistic?: boolean): T | null;\\r\\n    readFragment<T = any, TVariables = OperationVariables>(options: DataProxy.Fragment<TVariables, T>, optimistic?: boolean): T | null;\\r\\n    writeQuery<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteQueryOptions<TData, TVariables>): void;\\r\\n    writeFragment<TData = any, TVariables = OperationVariables>(options: DataProxy.WriteFragmentOptions<TData, TVariables>): void;\\r\\n    __actionHookForDevTools(cb: () => any): void;\\r\\n    __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult>;\\r\\n    resetStore(): Promise<ApolloQueryResult<any>[] | null>;\\r\\n    clearStore(): Promise<any[]>;\\r\\n    onResetStore(cb: () => Promise<any>): () => void;\\r\\n    onClearStore(cb: () => Promise<any>): () => void;\\r\\n    reFetchObservableQueries(includeStandby?: boolean): Promise<ApolloQueryResult<any>[]>;\\r\\n    extract(optimistic?: boolean): TCacheShape;\\r\\n    restore(serializedState: TCacheShape): ApolloCache<TCacheShape>;\\r\\n    addResolvers(resolvers: Resolvers | Resolvers[]): void;\\r\\n    setResolvers(resolvers: Resolvers | Resolvers[]): void;\\r\\n    getResolvers(): Resolvers;\\r\\n    setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher): void;\\r\\n    setLink(newLink: ApolloLink): void;\\r\\n}\\r\\n\",\"@apollo/client/core/index.d.ts\":\"export { ApolloClient, ApolloClientOptions, DefaultOptions, } from './ApolloClient';\\r\\nexport { ObservableQuery, FetchMoreOptions, UpdateQueryOptions, } from './ObservableQuery';\\r\\nexport { QueryBaseOptions, QueryOptions, WatchQueryOptions, MutationOptions, SubscriptionOptions, FetchPolicy, WatchQueryFetchPolicy, ErrorPolicy, FetchMoreQueryOptions, SubscribeToMoreOptions, MutationUpdaterFn, } from './watchQueryOptions';\\r\\nexport { NetworkStatus } from './networkStatus';\\r\\nexport * from './types';\\r\\nexport { Resolver, FragmentMatcher, } from './LocalState';\\r\\nexport { isApolloError, ApolloError } from '../errors';\\r\\nexport { Cache, ApolloCache, Transaction, DataProxy, InMemoryCache, InMemoryCacheConfig, MissingFieldError, defaultDataIdFromObject, ReactiveVar, makeVar, TypePolicies, TypePolicy, FieldPolicy, FieldReadFunction, FieldMergeFunction, FieldFunctionOptions, PossibleTypesMap, } from '../cache';\\r\\nexport * from '../cache/inmemory/types';\\r\\nexport * from '../link/core';\\r\\nexport * from '../link/http';\\r\\nexport { fromError, toPromise, fromPromise, ServerError, throwServerError, } from '../link/utils';\\r\\nexport { Observable, Observer, ObservableSubscription, Reference, isReference, makeReference, StoreObject, } from '../utilities';\\r\\nimport gql from 'graphql-tag';\\r\\nexport declare const resetCaches: typeof gql.resetCaches, disableFragmentWarnings: typeof gql.disableFragmentWarnings, enableExperimentalFragmentVariables: typeof gql.enableExperimentalFragmentVariables, disableExperimentalFragmentVariables: typeof gql.disableExperimentalFragmentVariables;\\r\\nexport { gql };\\r\\n\",\"@apollo/client/core/LocalState.d.ts\":\"import { DocumentNode, FieldNode, ASTNode } from 'graphql';\\r\\nimport { ApolloCache } from '../cache';\\r\\nimport { FragmentMap, StoreObject } from '../utilities';\\r\\nimport { ApolloClient } from './ApolloClient';\\r\\nimport { Resolvers, OperationVariables } from './types';\\r\\nimport { FetchResult } from '../link/core';\\r\\nexport declare type Resolver = (rootValue?: any, args?: any, context?: any, info?: {\\r\\n    field: FieldNode;\\r\\n    fragmentMap: FragmentMap;\\r\\n}) => any;\\r\\nexport declare type VariableMap = {\\r\\n    [name: string]: any;\\r\\n};\\r\\nexport declare type FragmentMatcher = (rootValue: any, typeCondition: string, context: any) => boolean;\\r\\nexport declare type ExecContext = {\\r\\n    fragmentMap: FragmentMap;\\r\\n    context: any;\\r\\n    variables: VariableMap;\\r\\n    fragmentMatcher: FragmentMatcher;\\r\\n    defaultOperationType: string;\\r\\n    exportedVariables: Record<string, any>;\\r\\n    onlyRunForcedResolvers: boolean;\\r\\n};\\r\\nexport declare type LocalStateOptions<TCacheShape> = {\\r\\n    cache: ApolloCache<TCacheShape>;\\r\\n    client?: ApolloClient<TCacheShape>;\\r\\n    resolvers?: Resolvers | Resolvers[];\\r\\n    fragmentMatcher?: FragmentMatcher;\\r\\n};\\r\\nexport declare class LocalState<TCacheShape> {\\r\\n    private cache;\\r\\n    private client;\\r\\n    private resolvers?;\\r\\n    private fragmentMatcher;\\r\\n    constructor({ cache, client, resolvers, fragmentMatcher, }: LocalStateOptions<TCacheShape>);\\r\\n    addResolvers(resolvers: Resolvers | Resolvers[]): void;\\r\\n    setResolvers(resolvers: Resolvers | Resolvers[]): void;\\r\\n    getResolvers(): Resolvers;\\r\\n    runResolvers<TData>({ document, remoteResult, context, variables, onlyRunForcedResolvers, }: {\\r\\n        document: DocumentNode | null;\\r\\n        remoteResult: FetchResult<TData>;\\r\\n        context?: Record<string, any>;\\r\\n        variables?: Record<string, any>;\\r\\n        onlyRunForcedResolvers?: boolean;\\r\\n    }): Promise<FetchResult<TData>>;\\r\\n    setFragmentMatcher(fragmentMatcher: FragmentMatcher): void;\\r\\n    getFragmentMatcher(): FragmentMatcher;\\r\\n    clientQuery(document: DocumentNode): DocumentNode | null;\\r\\n    serverQuery(document: DocumentNode): DocumentNode | null;\\r\\n    prepareContext(context?: Record<string, any>): {\\r\\n        cache: ApolloCache<TCacheShape>;\\r\\n        getCacheKey(obj: StoreObject): string | undefined;\\r\\n    };\\r\\n    addExportedVariables(document: DocumentNode, variables?: OperationVariables, context?: {}): Promise<{\\r\\n        [x: string]: any;\\r\\n    }>;\\r\\n    shouldForceResolvers(document: ASTNode): boolean;\\r\\n    private buildRootValueFromCache;\\r\\n    private resolveDocument;\\r\\n    private resolveSelectionSet;\\r\\n    private resolveField;\\r\\n    private resolveSubSelectedArray;\\r\\n}\\r\\n\",\"@apollo/client/core/MutationStore.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nexport declare class MutationStore {\\r\\n    private store;\\r\\n    getStore(): {\\r\\n        [mutationId: string]: MutationStoreValue;\\r\\n    };\\r\\n    get(mutationId: string): MutationStoreValue;\\r\\n    initMutation(mutationId: string, mutation: DocumentNode, variables: Object | undefined): void;\\r\\n    markMutationError(mutationId: string, error: Error): void;\\r\\n    markMutationResult(mutationId: string): void;\\r\\n    reset(): void;\\r\\n}\\r\\nexport interface MutationStoreValue {\\r\\n    mutation: DocumentNode;\\r\\n    variables: Object;\\r\\n    loading: boolean;\\r\\n    error: Error | null;\\r\\n}\\r\\n\",\"@apollo/client/core/networkStatus.d.ts\":\"export declare enum NetworkStatus {\\r\\n    loading = 1,\\r\\n    setVariables = 2,\\r\\n    fetchMore = 3,\\r\\n    refetch = 4,\\r\\n    poll = 6,\\r\\n    ready = 7,\\r\\n    error = 8\\r\\n}\\r\\nexport declare function isNetworkRequestInFlight(networkStatus?: NetworkStatus): boolean;\\r\\n\",\"@apollo/client/core/ObservableQuery.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { NetworkStatus } from './networkStatus';\\r\\nimport { Observable } from '../utilities';\\r\\nimport { ApolloError } from '../errors';\\r\\nimport { QueryManager } from './QueryManager';\\r\\nimport { ApolloQueryResult, OperationVariables } from './types';\\r\\nimport { WatchQueryOptions, FetchMoreQueryOptions, SubscribeToMoreOptions } from './watchQueryOptions';\\r\\nimport { QueryInfo } from './QueryInfo';\\r\\nexport interface FetchMoreOptions<TData = any, TVariables = OperationVariables> {\\r\\n    updateQuery?: (previousQueryResult: TData, options: {\\r\\n        fetchMoreResult?: TData;\\r\\n        variables?: TVariables;\\r\\n    }) => TData;\\r\\n}\\r\\nexport interface UpdateQueryOptions<TVariables> {\\r\\n    variables?: TVariables;\\r\\n}\\r\\nexport declare class ObservableQuery<TData = any, TVariables = OperationVariables> extends Observable<ApolloQueryResult<TData>> {\\r\\n    readonly options: WatchQueryOptions<TVariables, TData>;\\r\\n    readonly queryId: string;\\r\\n    readonly queryName?: string;\\r\\n    get variables(): TVariables | undefined;\\r\\n    private isTornDown;\\r\\n    private queryManager;\\r\\n    private observers;\\r\\n    private subscriptions;\\r\\n    private lastResult;\\r\\n    private lastResultSnapshot;\\r\\n    private lastError;\\r\\n    private queryInfo;\\r\\n    constructor({ queryManager, queryInfo, options, }: {\\r\\n        queryManager: QueryManager<any>;\\r\\n        queryInfo: QueryInfo;\\r\\n        options: WatchQueryOptions<TVariables, TData>;\\r\\n    });\\r\\n    result(): Promise<ApolloQueryResult<TData>>;\\r\\n    getCurrentResult(saveAsLastResult?: boolean): ApolloQueryResult<TData>;\\r\\n    isDifferentFromLastResult(newResult: ApolloQueryResult<TData>): boolean;\\r\\n    getLastResult(): ApolloQueryResult<TData>;\\r\\n    getLastError(): ApolloError;\\r\\n    resetLastResults(): void;\\r\\n    resetQueryStoreErrors(): void;\\r\\n    refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>>;\\r\\n    fetchMore<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> & FetchMoreOptions<TData, TVariables>): Promise<ApolloQueryResult<TData>>;\\r\\n    subscribeToMore<TSubscriptionData = TData, TSubscriptionVariables = TVariables>(options: SubscribeToMoreOptions<TData, TSubscriptionVariables, TSubscriptionData>): () => void;\\r\\n    setOptions(newOptions: Partial<WatchQueryOptions<TVariables, TData>>): Promise<ApolloQueryResult<TData>>;\\r\\n    setVariables(variables: TVariables): Promise<ApolloQueryResult<TData> | void>;\\r\\n    updateQuery<TVars = TVariables>(mapFn: (previousQueryResult: TData, options: Pick<WatchQueryOptions<TVars, TData>, \\\"variables\\\">) => TData): void;\\r\\n    startPolling(pollInterval: number): void;\\r\\n    stopPolling(): void;\\r\\n    private updateLastResult;\\r\\n    private onSubscribe;\\r\\n    private reobserver?;\\r\\n    private getReobserver;\\r\\n    private newReobserver;\\r\\n    reobserve(newOptions?: Partial<WatchQueryOptions<TVariables, TData>>, newNetworkStatus?: NetworkStatus): Promise<ApolloQueryResult<TData>>;\\r\\n    private observe;\\r\\n    private observer;\\r\\n    hasObservers(): boolean;\\r\\n    private tearDownQuery;\\r\\n}\\r\\n\",\"@apollo/client/core/QueryInfo.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { DocumentNode, GraphQLError } from 'graphql';\\r\\nimport { Cache, ApolloCache } from '../cache';\\r\\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\\r\\nimport { ObservableQuery } from './ObservableQuery';\\r\\nimport { QueryListener } from './types';\\r\\nimport { FetchResult } from '../link/core';\\r\\nimport { NetworkStatus } from './networkStatus';\\r\\nimport { ApolloError } from '../errors';\\r\\nexport declare type QueryStoreValue = Pick<QueryInfo, \\\"variables\\\" | \\\"networkStatus\\\" | \\\"networkError\\\" | \\\"graphQLErrors\\\">;\\r\\nexport declare class QueryInfo {\\r\\n    private cache;\\r\\n    listeners: Set<QueryListener>;\\r\\n    document: DocumentNode | null;\\r\\n    lastRequestId: number;\\r\\n    subscriptions: Set<ZenObservable.Subscription>;\\r\\n    variables?: Record<string, any>;\\r\\n    networkStatus?: NetworkStatus;\\r\\n    networkError?: Error | null;\\r\\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\\r\\n    constructor(cache: ApolloCache<any>);\\r\\n    init(query: {\\r\\n        document: DocumentNode;\\r\\n        variables: Record<string, any> | undefined;\\r\\n        networkStatus?: NetworkStatus;\\r\\n        observableQuery?: ObservableQuery<any>;\\r\\n        lastRequestId?: number;\\r\\n    }): this;\\r\\n    private dirty;\\r\\n    private notifyTimeout?;\\r\\n    private diff;\\r\\n    getDiff(variables?: Record<string, any> | undefined): Cache.DiffResult<any>;\\r\\n    setDiff(diff: Cache.DiffResult<any> | null): void;\\r\\n    readonly observableQuery: ObservableQuery<any> | null;\\r\\n    private oqListener?;\\r\\n    setObservableQuery(oq: ObservableQuery<any> | null): void;\\r\\n    notify(): void;\\r\\n    private shouldNotify;\\r\\n    stop(): void;\\r\\n    private cancel;\\r\\n    private lastWatch?;\\r\\n    private updateWatch;\\r\\n    private lastWrite?;\\r\\n    private shouldWrite;\\r\\n    markResult<T>(result: FetchResult<T>, options: Pick<WatchQueryOptions, \\\"variables\\\" | \\\"fetchPolicy\\\" | \\\"errorPolicy\\\">, allowCacheWrite: boolean): void;\\r\\n    markReady(): NetworkStatus;\\r\\n    markError(error: ApolloError): ApolloError;\\r\\n}\\r\\nexport declare function shouldWriteResult<T>(result: FetchResult<T>, errorPolicy?: ErrorPolicy): boolean;\\r\\n\",\"@apollo/client/core/QueryManager.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { ApolloLink, FetchResult } from '../link/core';\\r\\nimport { ApolloCache } from '../cache';\\r\\nimport { Observable, Concast } from '../utilities';\\r\\nimport { MutationStore } from './MutationStore';\\r\\nimport { QueryOptions, WatchQueryOptions, SubscriptionOptions, MutationOptions } from './watchQueryOptions';\\r\\nimport { ObservableQuery } from './ObservableQuery';\\r\\nimport { NetworkStatus } from './networkStatus';\\r\\nimport { ApolloQueryResult, OperationVariables } from './types';\\r\\nimport { LocalState } from './LocalState';\\r\\nimport { QueryInfo } from './QueryInfo';\\r\\nexport declare class QueryManager<TStore> {\\r\\n    cache: ApolloCache<TStore>;\\r\\n    link: ApolloLink;\\r\\n    mutationStore: MutationStore;\\r\\n    readonly assumeImmutableResults: boolean;\\r\\n    readonly ssrMode: boolean;\\r\\n    private queryDeduplication;\\r\\n    private clientAwareness;\\r\\n    private localState;\\r\\n    private onBroadcast;\\r\\n    private queries;\\r\\n    private fetchCancelFns;\\r\\n    constructor({ cache, link, queryDeduplication, onBroadcast, ssrMode, clientAwareness, localState, assumeImmutableResults, }: {\\r\\n        cache: ApolloCache<TStore>;\\r\\n        link: ApolloLink;\\r\\n        queryDeduplication?: boolean;\\r\\n        onBroadcast?: () => void;\\r\\n        ssrMode?: boolean;\\r\\n        clientAwareness?: Record<string, string>;\\r\\n        localState?: LocalState<TStore>;\\r\\n        assumeImmutableResults?: boolean;\\r\\n    });\\r\\n    stop(): void;\\r\\n    private cancelPendingFetches;\\r\\n    mutate<T>({ mutation, variables, optimisticResponse, updateQueries: updateQueriesByName, refetchQueries, awaitRefetchQueries, update: updateWithProxyFn, errorPolicy, fetchPolicy, context, }: MutationOptions): Promise<FetchResult<T>>;\\r\\n    fetchQuery<TData, TVars>(queryId: string, options: WatchQueryOptions<TVars, TData>, networkStatus?: NetworkStatus): Promise<ApolloQueryResult<TData>>;\\r\\n    getQueryStore(): Record<string, Pick<QueryInfo, \\\"variables\\\" | \\\"graphQLErrors\\\" | \\\"networkError\\\" | \\\"networkStatus\\\">>;\\r\\n    resetErrors(queryId: string): void;\\r\\n    private transformCache;\\r\\n    transform(document: DocumentNode): Readonly<{\\r\\n        document: Readonly<DocumentNode>;\\r\\n        hasClientExports: boolean;\\r\\n        hasForcedResolvers: boolean;\\r\\n        clientQuery: Readonly<DocumentNode> | null;\\r\\n        serverQuery: Readonly<DocumentNode> | null;\\r\\n        defaultVars: Readonly<Record<string, any>>;\\r\\n    }>;\\r\\n    private getVariables;\\r\\n    watchQuery<T, TVariables = OperationVariables>(options: WatchQueryOptions<TVariables, T>): ObservableQuery<T, TVariables>;\\r\\n    query<TData, TVars = OperationVariables>(options: QueryOptions<TVars, TData>): Promise<ApolloQueryResult<TData>>;\\r\\n    private queryIdCounter;\\r\\n    generateQueryId(): string;\\r\\n    private requestIdCounter;\\r\\n    generateRequestId(): number;\\r\\n    private mutationIdCounter;\\r\\n    generateMutationId(): string;\\r\\n    stopQueryInStore(queryId: string): void;\\r\\n    private stopQueryInStoreNoBroadcast;\\r\\n    clearStore(): Promise<void>;\\r\\n    resetStore(): Promise<ApolloQueryResult<any>[]>;\\r\\n    reFetchObservableQueries(includeStandby?: boolean): Promise<ApolloQueryResult<any>[]>;\\r\\n    setObservableQuery(observableQuery: ObservableQuery<any, any>): void;\\r\\n    startGraphQLSubscription<T = any>({ query, fetchPolicy, errorPolicy, variables, context, }: SubscriptionOptions): Observable<FetchResult<T>>;\\r\\n    stopQuery(queryId: string): void;\\r\\n    private stopQueryNoBroadcast;\\r\\n    removeQuery(queryId: string): void;\\r\\n    broadcastQueries(): void;\\r\\n    getLocalState(): LocalState<TStore>;\\r\\n    private inFlightLinkObservables;\\r\\n    private getObservableFromLink;\\r\\n    private getResultsFromLink;\\r\\n    fetchQueryObservable<TData, TVars>(queryId: string, options: WatchQueryOptions<TVars, TData>, networkStatus?: NetworkStatus): Concast<ApolloQueryResult<TData>>;\\r\\n    private fetchQueryByPolicy;\\r\\n    private getQuery;\\r\\n    private prepareContext;\\r\\n}\\r\\n\",\"@apollo/client/core/Reobserver.d.ts\":\"import { WatchQueryOptions } from './watchQueryOptions';\\r\\nimport { NetworkStatus } from './networkStatus';\\r\\nimport { ApolloQueryResult } from './types';\\r\\nimport { Observer, Concast } from '../utilities';\\r\\nexport declare class Reobserver<TData, TVars> {\\r\\n    private observer;\\r\\n    private options;\\r\\n    private fetch;\\r\\n    private shouldFetch;\\r\\n    constructor(observer: Observer<ApolloQueryResult<TData>>, options: WatchQueryOptions<TVars, TData>, fetch: (options: WatchQueryOptions<TVars, TData>, newNetworkStatus?: NetworkStatus) => Concast<ApolloQueryResult<TData>>, shouldFetch: false | (() => boolean));\\r\\n    private concast?;\\r\\n    reobserve(newOptions?: Partial<WatchQueryOptions<TVars, TData>>, newNetworkStatus?: NetworkStatus): Promise<ApolloQueryResult<TData>>;\\r\\n    updateOptions(newOptions: Partial<WatchQueryOptions<TVars, TData>>): this;\\r\\n    stop(): void;\\r\\n    private pollingInfo?;\\r\\n    private updatePolling;\\r\\n}\\r\\n\",\"@apollo/client/core/types.d.ts\":\"import { DocumentNode, GraphQLError } from 'graphql';\\r\\nimport { FetchResult } from '../link/core';\\r\\nimport { ApolloError } from '../errors';\\r\\nimport { QueryInfo } from './QueryInfo';\\r\\nimport { NetworkStatus } from './networkStatus';\\r\\nimport { Resolver } from './LocalState';\\r\\nexport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nexport declare type QueryListener = (queryInfo: QueryInfo) => void;\\r\\nexport declare type OperationVariables = Record<string, any>;\\r\\nexport declare type PureQueryOptions = {\\r\\n    query: DocumentNode;\\r\\n    variables?: {\\r\\n        [key: string]: any;\\r\\n    };\\r\\n    context?: any;\\r\\n};\\r\\nexport declare type ApolloQueryResult<T> = {\\r\\n    data: T;\\r\\n    errors?: ReadonlyArray<GraphQLError>;\\r\\n    error?: ApolloError;\\r\\n    loading: boolean;\\r\\n    networkStatus: NetworkStatus;\\r\\n    partial?: boolean;\\r\\n};\\r\\nexport declare type MutationQueryReducer<T> = (previousResult: Record<string, any>, options: {\\r\\n    mutationResult: FetchResult<T>;\\r\\n    queryName: string | undefined;\\r\\n    queryVariables: Record<string, any>;\\r\\n}) => Record<string, any>;\\r\\nexport declare type MutationQueryReducersMap<T = {\\r\\n    [key: string]: any;\\r\\n}> = {\\r\\n    [queryName: string]: MutationQueryReducer<T>;\\r\\n};\\r\\nexport interface Resolvers {\\r\\n    [key: string]: {\\r\\n        [field: string]: Resolver;\\r\\n    };\\r\\n}\\r\\n\",\"@apollo/client/core/watchQueryOptions.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { ApolloCache } from '../cache';\\r\\nimport { FetchResult } from '../link/core';\\r\\nimport { MutationQueryReducersMap } from './types';\\r\\nimport { PureQueryOptions, OperationVariables } from './types';\\r\\nexport declare type FetchPolicy = 'cache-first' | 'network-only' | 'cache-only' | 'no-cache' | 'standby';\\r\\nexport declare type WatchQueryFetchPolicy = FetchPolicy | 'cache-and-network';\\r\\nexport declare type ErrorPolicy = 'none' | 'ignore' | 'all';\\r\\nexport interface QueryBaseOptions<TVariables = OperationVariables, TData = any> {\\r\\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    variables?: TVariables;\\r\\n    errorPolicy?: ErrorPolicy;\\r\\n    context?: any;\\r\\n}\\r\\nexport interface QueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData> {\\r\\n    fetchPolicy?: FetchPolicy;\\r\\n}\\r\\nexport interface ModifiableWatchQueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData> {\\r\\n    pollInterval?: number;\\r\\n    notifyOnNetworkStatusChange?: boolean;\\r\\n    returnPartialData?: boolean;\\r\\n    partialRefetch?: boolean;\\r\\n}\\r\\nexport interface WatchQueryOptions<TVariables = OperationVariables, TData = any> extends QueryBaseOptions<TVariables, TData>, ModifiableWatchQueryOptions<TVariables, TData> {\\r\\n    fetchPolicy?: WatchQueryFetchPolicy;\\r\\n    nextFetchPolicy?: WatchQueryFetchPolicy | ((this: WatchQueryOptions<TVariables, TData>, lastFetchPolicy: WatchQueryFetchPolicy) => WatchQueryFetchPolicy);\\r\\n}\\r\\nexport interface FetchMoreQueryOptions<TVariables, K extends keyof TVariables, TData = any> {\\r\\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    variables?: Pick<TVariables, K>;\\r\\n    context?: any;\\r\\n}\\r\\nexport declare type UpdateQueryFn<TData = any, TSubscriptionVariables = OperationVariables, TSubscriptionData = TData> = (previousQueryResult: TData, options: {\\r\\n    subscriptionData: {\\r\\n        data: TSubscriptionData;\\r\\n    };\\r\\n    variables?: TSubscriptionVariables;\\r\\n}) => TData;\\r\\nexport declare type SubscribeToMoreOptions<TData = any, TSubscriptionVariables = OperationVariables, TSubscriptionData = TData> = {\\r\\n    document: DocumentNode | TypedDocumentNode<TSubscriptionData, TSubscriptionVariables>;\\r\\n    variables?: TSubscriptionVariables;\\r\\n    updateQuery?: UpdateQueryFn<TData, TSubscriptionVariables, TSubscriptionData>;\\r\\n    onError?: (error: Error) => void;\\r\\n    context?: Record<string, any>;\\r\\n};\\r\\nexport interface SubscriptionOptions<TVariables = OperationVariables, TData = any> {\\r\\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    variables?: TVariables;\\r\\n    fetchPolicy?: FetchPolicy;\\r\\n    errorPolicy?: ErrorPolicy;\\r\\n    context?: Record<string, any>;\\r\\n}\\r\\nexport declare type RefetchQueryDescription = Array<string | PureQueryOptions>;\\r\\nexport interface MutationBaseOptions<T = {\\r\\n    [key: string]: any;\\r\\n}, TVariables = OperationVariables> {\\r\\n    optimisticResponse?: T | ((vars: TVariables) => T);\\r\\n    updateQueries?: MutationQueryReducersMap<T>;\\r\\n    refetchQueries?: ((result: FetchResult<T>) => RefetchQueryDescription) | RefetchQueryDescription;\\r\\n    awaitRefetchQueries?: boolean;\\r\\n    update?: MutationUpdaterFn<T>;\\r\\n    errorPolicy?: ErrorPolicy;\\r\\n    variables?: TVariables;\\r\\n}\\r\\nexport interface MutationOptions<T = {\\r\\n    [key: string]: any;\\r\\n}, TVariables = OperationVariables> extends MutationBaseOptions<T, TVariables> {\\r\\n    mutation: DocumentNode | TypedDocumentNode<T, TVariables>;\\r\\n    context?: any;\\r\\n    fetchPolicy?: Extract<FetchPolicy, 'no-cache'>;\\r\\n}\\r\\nexport declare type MutationUpdaterFn<T = {\\r\\n    [key: string]: any;\\r\\n}> = (cache: ApolloCache<T>, mutationResult: FetchResult<T>) => void;\\r\\n\",\"@apollo/client/errors/index.d.ts\":\"import { GraphQLError } from 'graphql';\\r\\nimport { ServerParseError } from '../link/http';\\r\\nimport { ServerError } from '../link/utils';\\r\\nexport declare function isApolloError(err: Error): err is ApolloError;\\r\\nexport declare class ApolloError extends Error {\\r\\n    message: string;\\r\\n    graphQLErrors: ReadonlyArray<GraphQLError>;\\r\\n    networkError: Error | ServerParseError | ServerError | null;\\r\\n    extraInfo: any;\\r\\n    constructor({ graphQLErrors, networkError, errorMessage, extraInfo, }: {\\r\\n        graphQLErrors?: ReadonlyArray<GraphQLError>;\\r\\n        networkError?: Error | ServerParseError | ServerError | null;\\r\\n        errorMessage?: string;\\r\\n        extraInfo?: any;\\r\\n    });\\r\\n}\\r\\n\",\"@apollo/client/index.d.ts\":\"export * from './core';\\r\\nexport * from './react';\\r\\n\",\"@apollo/client/link/batch/batching.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Operation, FetchResult, NextLink } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare type BatchHandler = (operations: Operation[], forward?: (NextLink | undefined)[]) => Observable<FetchResult[]> | null;\\r\\nexport interface BatchableRequest {\\r\\n    operation: Operation;\\r\\n    forward?: NextLink;\\r\\n    observable?: Observable<FetchResult>;\\r\\n    next?: Array<(result: FetchResult) => void>;\\r\\n    error?: Array<(error: Error) => void>;\\r\\n    complete?: Array<() => void>;\\r\\n}\\r\\nexport declare class OperationBatcher {\\r\\n    queuedRequests: Map<string, BatchableRequest[]>;\\r\\n    private batchInterval?;\\r\\n    private batchMax;\\r\\n    private batchHandler;\\r\\n    private batchKey;\\r\\n    constructor({ batchInterval, batchMax, batchHandler, batchKey, }: {\\r\\n        batchInterval?: number;\\r\\n        batchMax?: number;\\r\\n        batchHandler: BatchHandler;\\r\\n        batchKey?: (operation: Operation) => string;\\r\\n    });\\r\\n    enqueueRequest(request: BatchableRequest): Observable<FetchResult>;\\r\\n    consumeQueue(key?: string): (Observable<FetchResult> | undefined)[] | undefined;\\r\\n    private scheduleQueueConsumption;\\r\\n}\\r\\n\",\"@apollo/client/link/batch/batchLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { BatchHandler } from './batching';\\r\\nexport { OperationBatcher, BatchableRequest, BatchHandler } from './batching';\\r\\nexport declare namespace BatchLink {\\r\\n    interface Options {\\r\\n        batchInterval?: number;\\r\\n        batchMax?: number;\\r\\n        batchHandler?: BatchHandler;\\r\\n        batchKey?: (operation: Operation) => string;\\r\\n    }\\r\\n}\\r\\nexport declare class BatchLink extends ApolloLink {\\r\\n    private batcher;\\r\\n    constructor(fetchParams?: BatchLink.Options);\\r\\n    request(operation: Operation, forward?: NextLink): Observable<FetchResult> | null;\\r\\n}\\r\\n\",\"@apollo/client/link/batch/index.d.ts\":\"export * from './batchLink';\\r\\n\",\"@apollo/client/link/batch-http/batchHttpLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ApolloLink, Operation, FetchResult } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { HttpOptions } from '../http';\\r\\nexport declare namespace BatchHttpLink {\\r\\n    interface Options extends HttpOptions {\\r\\n        batchMax?: number;\\r\\n        batchInterval?: number;\\r\\n        batchKey?: (operation: Operation) => string;\\r\\n    }\\r\\n}\\r\\nexport declare class BatchHttpLink extends ApolloLink {\\r\\n    private batchInterval;\\r\\n    private batchMax;\\r\\n    private batcher;\\r\\n    constructor(fetchParams?: BatchHttpLink.Options);\\r\\n    request(operation: Operation): Observable<FetchResult> | null;\\r\\n}\\r\\n\",\"@apollo/client/link/batch-http/index.d.ts\":\"export * from './batchHttpLink';\\r\\n\",\"@apollo/client/link/context/index.d.ts\":\"import { ApolloLink, GraphQLRequest } from '../core';\\r\\nexport declare type ContextSetter = (operation: GraphQLRequest, prevContext: any) => Promise<any> | any;\\r\\nexport declare function setContext(setter: ContextSetter): ApolloLink;\\r\\n\",\"@apollo/client/link/core/ApolloLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { NextLink, Operation, RequestHandler, FetchResult, GraphQLRequest } from './types';\\r\\nexport declare class ApolloLink {\\r\\n    static empty(): ApolloLink;\\r\\n    static from(links: (ApolloLink | RequestHandler)[]): ApolloLink;\\r\\n    static split(test: (op: Operation) => boolean, left: ApolloLink | RequestHandler, right?: ApolloLink | RequestHandler): ApolloLink;\\r\\n    static execute(link: ApolloLink, operation: GraphQLRequest): Observable<FetchResult>;\\r\\n    static concat(first: ApolloLink | RequestHandler, second: ApolloLink | RequestHandler): ApolloLink;\\r\\n    constructor(request?: RequestHandler);\\r\\n    split(test: (op: Operation) => boolean, left: ApolloLink | RequestHandler, right?: ApolloLink | RequestHandler): ApolloLink;\\r\\n    concat(next: ApolloLink | RequestHandler): ApolloLink;\\r\\n    request(operation: Operation, forward?: NextLink): Observable<FetchResult> | null;\\r\\n    protected onError(reason: any): void;\\r\\n    setOnError(fn: (reason: any) => any): this;\\r\\n}\\r\\n\",\"@apollo/client/link/core/concat.d.ts\":\"import { ApolloLink } from './ApolloLink';\\r\\nexport declare const concat: typeof ApolloLink.concat;\\r\\n\",\"@apollo/client/link/core/empty.d.ts\":\"import { ApolloLink } from './ApolloLink';\\r\\nexport declare const empty: typeof ApolloLink.empty;\\r\\n\",\"@apollo/client/link/core/execute.d.ts\":\"import { ApolloLink } from './ApolloLink';\\r\\nexport declare const execute: typeof ApolloLink.execute;\\r\\n\",\"@apollo/client/link/core/from.d.ts\":\"import { ApolloLink } from './ApolloLink';\\r\\nexport declare const from: typeof ApolloLink.from;\\r\\n\",\"@apollo/client/link/core/index.d.ts\":\"export { empty } from './empty';\\r\\nexport { from } from './from';\\r\\nexport { split } from './split';\\r\\nexport { concat } from './concat';\\r\\nexport { execute } from './execute';\\r\\nexport { ApolloLink } from './ApolloLink';\\r\\nexport * from './types';\\r\\n\",\"@apollo/client/link/core/split.d.ts\":\"import { ApolloLink } from './ApolloLink';\\r\\nexport declare const split: typeof ApolloLink.split;\\r\\n\",\"@apollo/client/link/core/types.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { DocumentNode, ExecutionResult } from 'graphql';\\r\\nexport { DocumentNode };\\r\\nimport { Observable } from '../../utilities';\\r\\nexport interface GraphQLRequest {\\r\\n    query: DocumentNode;\\r\\n    variables?: Record<string, any>;\\r\\n    operationName?: string;\\r\\n    context?: Record<string, any>;\\r\\n    extensions?: Record<string, any>;\\r\\n}\\r\\nexport interface Operation {\\r\\n    query: DocumentNode;\\r\\n    variables: Record<string, any>;\\r\\n    operationName: string;\\r\\n    extensions: Record<string, any>;\\r\\n    setContext: (context: Record<string, any>) => Record<string, any>;\\r\\n    getContext: () => Record<string, any>;\\r\\n}\\r\\nexport interface FetchResult<TData = {\\r\\n    [key: string]: any;\\r\\n}, C = Record<string, any>, E = Record<string, any>> extends ExecutionResult {\\r\\n    data?: TData | null;\\r\\n    extensions?: E;\\r\\n    context?: C;\\r\\n}\\r\\nexport declare type NextLink = (operation: Operation) => Observable<FetchResult>;\\r\\nexport declare type RequestHandler = (operation: Operation, forward: NextLink) => Observable<FetchResult> | null;\\r\\n\",\"@apollo/client/link/error/index.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { GraphQLError, ExecutionResult } from 'graphql';\\r\\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { ServerError } from '../utils';\\r\\nimport { ServerParseError } from '../http';\\r\\nexport interface ErrorResponse {\\r\\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\\r\\n    networkError?: Error | ServerError | ServerParseError;\\r\\n    response?: ExecutionResult;\\r\\n    operation: Operation;\\r\\n    forward: NextLink;\\r\\n}\\r\\nexport declare namespace ErrorLink {\\r\\n    interface ErrorHandler {\\r\\n        (error: ErrorResponse): Observable<FetchResult> | void;\\r\\n    }\\r\\n}\\r\\nexport import ErrorHandler = ErrorLink.ErrorHandler;\\r\\nexport declare function onError(errorHandler: ErrorHandler): ApolloLink;\\r\\nexport declare class ErrorLink extends ApolloLink {\\r\\n    private link;\\r\\n    constructor(errorHandler: ErrorLink.ErrorHandler);\\r\\n    request(operation: Operation, forward: NextLink): Observable<FetchResult> | null;\\r\\n}\\r\\n\",\"@apollo/client/link/http/checkFetcher.d.ts\":\"export declare const checkFetcher: (fetcher: WindowOrWorkerGlobalScope['fetch'] | undefined) => void;\\r\\n\",\"@apollo/client/link/http/createHttpLink.d.ts\":\"import { ApolloLink } from '../core';\\r\\nimport { HttpOptions } from './selectHttpOptionsAndBody';\\r\\nexport declare const createHttpLink: (linkOptions?: HttpOptions) => ApolloLink;\\r\\n\",\"@apollo/client/link/http/createSignalIfSupported.d.ts\":\"export declare const createSignalIfSupported: () => {\\r\\n    controller: boolean;\\r\\n    signal: boolean;\\r\\n} | {\\r\\n    controller: AbortController;\\r\\n    signal: AbortSignal;\\r\\n};\\r\\n\",\"@apollo/client/link/http/HttpLink.d.ts\":\"import { ApolloLink, RequestHandler } from '../core';\\r\\nimport { HttpOptions } from './selectHttpOptionsAndBody';\\r\\nexport declare class HttpLink extends ApolloLink {\\r\\n    options: HttpOptions;\\r\\n    requester: RequestHandler;\\r\\n    constructor(options?: HttpOptions);\\r\\n}\\r\\n\",\"@apollo/client/link/http/index.d.ts\":\"export { parseAndCheckHttpResponse, ServerParseError } from './parseAndCheckHttpResponse';\\r\\nexport { serializeFetchParameter, ClientParseError } from './serializeFetchParameter';\\r\\nexport { HttpOptions, fallbackHttpConfig, selectHttpOptionsAndBody, UriFunction } from './selectHttpOptionsAndBody';\\r\\nexport { checkFetcher } from './checkFetcher';\\r\\nexport { createSignalIfSupported } from './createSignalIfSupported';\\r\\nexport { selectURI } from './selectURI';\\r\\nexport { createHttpLink } from './createHttpLink';\\r\\nexport { HttpLink } from './HttpLink';\\r\\nexport { rewriteURIForGET } from './rewriteURIForGET';\\r\\n\",\"@apollo/client/link/http/parseAndCheckHttpResponse.d.ts\":\"import { Operation } from '../core';\\r\\nexport declare type ServerParseError = Error & {\\r\\n    response: Response;\\r\\n    statusCode: number;\\r\\n    bodyText: string;\\r\\n};\\r\\nexport declare function parseAndCheckHttpResponse(operations: Operation | Operation[]): (response: Response) => Promise<any>;\\r\\n\",\"@apollo/client/link/http/rewriteURIForGET.d.ts\":\"import { Body } from './selectHttpOptionsAndBody';\\r\\nexport declare function rewriteURIForGET(chosenURI: string, body: Body): {\\r\\n    parseError: any;\\r\\n    newURI?: undefined;\\r\\n} | {\\r\\n    newURI: string;\\r\\n    parseError?: undefined;\\r\\n};\\r\\n\",\"@apollo/client/link/http/selectHttpOptionsAndBody.d.ts\":\"import { Operation } from '../core';\\r\\nexport interface UriFunction {\\r\\n    (operation: Operation): string;\\r\\n}\\r\\nexport interface Body {\\r\\n    query?: string;\\r\\n    operationName?: string;\\r\\n    variables?: Record<string, any>;\\r\\n    extensions?: Record<string, any>;\\r\\n}\\r\\nexport interface HttpOptions {\\r\\n    uri?: string | UriFunction;\\r\\n    includeExtensions?: boolean;\\r\\n    fetch?: WindowOrWorkerGlobalScope['fetch'];\\r\\n    headers?: any;\\r\\n    credentials?: string;\\r\\n    fetchOptions?: any;\\r\\n    useGETForQueries?: boolean;\\r\\n}\\r\\nexport interface HttpQueryOptions {\\r\\n    includeQuery?: boolean;\\r\\n    includeExtensions?: boolean;\\r\\n}\\r\\nexport interface HttpConfig {\\r\\n    http?: HttpQueryOptions;\\r\\n    options?: any;\\r\\n    headers?: any;\\r\\n    credentials?: any;\\r\\n}\\r\\nexport declare const fallbackHttpConfig: {\\r\\n    http: HttpQueryOptions;\\r\\n    headers: {\\r\\n        accept: string;\\r\\n        'content-type': string;\\r\\n    };\\r\\n    options: {\\r\\n        method: string;\\r\\n    };\\r\\n};\\r\\nexport declare const selectHttpOptionsAndBody: (operation: Operation, fallbackConfig: HttpConfig, ...configs: Array<HttpConfig>) => {\\r\\n    options: HttpConfig & Record<string, any>;\\r\\n    body: Body;\\r\\n};\\r\\n\",\"@apollo/client/link/http/selectURI.d.ts\":\"import { Operation } from '../core';\\r\\nexport declare const selectURI: (operation: Operation, fallbackURI?: string | ((operation: Operation) => string) | undefined) => any;\\r\\n\",\"@apollo/client/link/http/serializeFetchParameter.d.ts\":\"import { InvariantError } from 'ts-invariant';\\r\\nexport declare type ClientParseError = InvariantError & {\\r\\n    parseError: Error;\\r\\n};\\r\\nexport declare const serializeFetchParameter: (p: any, label: string) => string;\\r\\n\",\"@apollo/client/link/persisted-queries/index.d.ts\":\"import { DocumentNode, ExecutionResult, GraphQLError } from 'graphql';\\r\\nimport { ApolloLink, Operation } from '../core';\\r\\nexport declare const VERSION = 1;\\r\\nexport interface ErrorResponse {\\r\\n    graphQLErrors?: readonly GraphQLError[];\\r\\n    networkError?: Error;\\r\\n    response?: ExecutionResult;\\r\\n    operation: Operation;\\r\\n}\\r\\ndeclare type SHA256Function = (...args: any[]) => string | PromiseLike<string>;\\r\\ndeclare type GenerateHashFunction = (document: DocumentNode) => string | PromiseLike<string>;\\r\\ndeclare namespace PersistedQueryLink {\\r\\n    interface BaseOptions {\\r\\n        disable?: (error: ErrorResponse) => boolean;\\r\\n        useGETForHashedQueries?: boolean;\\r\\n    }\\r\\n    interface SHA256Options extends BaseOptions {\\r\\n        sha256: SHA256Function;\\r\\n        generateHash?: never;\\r\\n    }\\r\\n    interface GenerateHashOptions extends BaseOptions {\\r\\n        sha256?: never;\\r\\n        generateHash: GenerateHashFunction;\\r\\n    }\\r\\n    export type Options = SHA256Options | GenerateHashOptions;\\r\\n    export {};\\r\\n}\\r\\nexport declare const createPersistedQueryLink: (options: PersistedQueryLink.Options) => ApolloLink;\\r\\nexport {};\\r\\n\",\"@apollo/client/link/retry/delayFunction.d.ts\":\"import { Operation } from '../core';\\r\\nexport interface DelayFunction {\\r\\n    (count: number, operation: Operation, error: any): number;\\r\\n}\\r\\nexport interface DelayFunctionOptions {\\r\\n    initial?: number;\\r\\n    max?: number;\\r\\n    jitter?: boolean;\\r\\n}\\r\\nexport declare function buildDelayFunction(delayOptions?: DelayFunctionOptions): DelayFunction;\\r\\n\",\"@apollo/client/link/retry/index.d.ts\":\"export * from './retryLink';\\r\\n\",\"@apollo/client/link/retry/retryFunction.d.ts\":\"import { Operation } from '../core';\\r\\nexport interface RetryFunction {\\r\\n    (count: number, operation: Operation, error: any): boolean | Promise<boolean>;\\r\\n}\\r\\nexport interface RetryFunctionOptions {\\r\\n    max?: number;\\r\\n    retryIf?: (error: any, operation: Operation) => boolean | Promise<boolean>;\\r\\n}\\r\\nexport declare function buildRetryFunction(retryOptions?: RetryFunctionOptions): RetryFunction;\\r\\n\",\"@apollo/client/link/retry/retryLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { DelayFunction, DelayFunctionOptions } from './delayFunction';\\r\\nimport { RetryFunction, RetryFunctionOptions } from './retryFunction';\\r\\nexport declare namespace RetryLink {\\r\\n    interface Options {\\r\\n        delay?: DelayFunctionOptions | DelayFunction;\\r\\n        attempts?: RetryFunctionOptions | RetryFunction;\\r\\n    }\\r\\n}\\r\\nexport declare class RetryLink extends ApolloLink {\\r\\n    private delayFor;\\r\\n    private retryIf;\\r\\n    constructor(options?: RetryLink.Options);\\r\\n    request(operation: Operation, nextLink: NextLink): Observable<FetchResult>;\\r\\n}\\r\\n\",\"@apollo/client/link/schema/index.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { GraphQLSchema } from 'graphql';\\r\\nimport { ApolloLink, Operation, FetchResult } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare namespace SchemaLink {\\r\\n    type ResolverContext = Record<string, any>;\\r\\n    type ResolverContextFunction = (operation: Operation) => ResolverContext | PromiseLike<ResolverContext>;\\r\\n    interface Options {\\r\\n        schema: GraphQLSchema;\\r\\n        rootValue?: any;\\r\\n        context?: ResolverContext | ResolverContextFunction;\\r\\n    }\\r\\n}\\r\\nexport declare class SchemaLink extends ApolloLink {\\r\\n    schema: SchemaLink.Options[\\\"schema\\\"];\\r\\n    rootValue: SchemaLink.Options[\\\"rootValue\\\"];\\r\\n    context: SchemaLink.Options[\\\"context\\\"];\\r\\n    constructor(options: SchemaLink.Options);\\r\\n    request(operation: Operation): Observable<FetchResult>;\\r\\n}\\r\\n\",\"@apollo/client/link/utils/createOperation.d.ts\":\"import { GraphQLRequest, Operation } from '../core';\\r\\nexport declare function createOperation(starting: any, operation: GraphQLRequest): Operation;\\r\\n\",\"@apollo/client/link/utils/fromError.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare function fromError<T>(errorValue: any): Observable<T>;\\r\\n\",\"@apollo/client/link/utils/fromPromise.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare function fromPromise<T>(promise: Promise<T>): Observable<T>;\\r\\n\",\"@apollo/client/link/utils/index.d.ts\":\"export { fromError } from './fromError';\\r\\nexport { toPromise } from './toPromise';\\r\\nexport { fromPromise } from './fromPromise';\\r\\nexport { ServerError, throwServerError } from './throwServerError';\\r\\nexport { validateOperation } from './validateOperation';\\r\\nexport { createOperation } from './createOperation';\\r\\nexport { transformOperation } from './transformOperation';\\r\\n\",\"@apollo/client/link/utils/throwServerError.d.ts\":\"export declare type ServerError = Error & {\\r\\n    response: Response;\\r\\n    result: Record<string, any>;\\r\\n    statusCode: number;\\r\\n};\\r\\nexport declare const throwServerError: (response: Response, result: any, message: string) => never;\\r\\n\",\"@apollo/client/link/utils/toPromise.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare function toPromise<R>(observable: Observable<R>): Promise<R>;\\r\\n\",\"@apollo/client/link/utils/transformOperation.d.ts\":\"import { GraphQLRequest } from '../core';\\r\\nexport declare function transformOperation(operation: GraphQLRequest): GraphQLRequest;\\r\\n\",\"@apollo/client/link/utils/validateOperation.d.ts\":\"import { GraphQLRequest } from '../core';\\r\\nexport declare function validateOperation(operation: GraphQLRequest): GraphQLRequest;\\r\\n\",\"@apollo/client/link/ws/index.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { SubscriptionClient, ClientOptions } from 'subscriptions-transport-ws';\\r\\nimport { ApolloLink, Operation, FetchResult } from '../core';\\r\\nimport { Observable } from '../../utilities';\\r\\nexport declare namespace WebSocketLink {\\r\\n    interface Configuration {\\r\\n        uri: string;\\r\\n        options?: ClientOptions;\\r\\n        webSocketImpl?: any;\\r\\n    }\\r\\n}\\r\\nexport import WebSocketParams = WebSocketLink.Configuration;\\r\\nexport declare class WebSocketLink extends ApolloLink {\\r\\n    private subscriptionClient;\\r\\n    constructor(paramsOrClient: WebSocketLink.Configuration | SubscriptionClient);\\r\\n    request(operation: Operation): Observable<FetchResult> | null;\\r\\n}\\r\\n\",\"@apollo/client/react/components/index.d.ts\":\"export { Query } from './Query';\\r\\nexport { Mutation } from './Mutation';\\r\\nexport { Subscription } from './Subscription';\\r\\nexport * from './types';\\r\\n\",\"@apollo/client/react/components/Mutation.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport PropTypes from 'prop-types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nimport { MutationComponentOptions } from './types';\\r\\nexport declare function Mutation<TData = any, TVariables = OperationVariables>(props: MutationComponentOptions<TData, TVariables>): JSX.Element | null;\\r\\nexport declare namespace Mutation {\\r\\n    var propTypes: {\\r\\n        mutation: PropTypes.Validator<object>;\\r\\n        variables: PropTypes.Requireable<object>;\\r\\n        optimisticResponse: PropTypes.Requireable<object>;\\r\\n        refetchQueries: PropTypes.Requireable<((...args: any[]) => any) | (string | object | null | undefined)[]>;\\r\\n        awaitRefetchQueries: PropTypes.Requireable<boolean>;\\r\\n        update: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        children: PropTypes.Validator<(...args: any[]) => any>;\\r\\n        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        onError: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        fetchPolicy: PropTypes.Requireable<string>;\\r\\n    };\\r\\n}\\r\\nexport interface Mutation<TData, TVariables> {\\r\\n    propTypes: PropTypes.InferProps<MutationComponentOptions<TData, TVariables>>;\\r\\n}\\r\\n\",\"@apollo/client/react/components/Query.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport PropTypes from 'prop-types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nimport { QueryComponentOptions } from './types';\\r\\nexport declare function Query<TData = any, TVariables = OperationVariables>(props: QueryComponentOptions<TData, TVariables>): JSX.Element | null;\\r\\nexport declare namespace Query {\\r\\n    var propTypes: {\\r\\n        client: PropTypes.Requireable<object>;\\r\\n        children: PropTypes.Validator<(...args: any[]) => any>;\\r\\n        fetchPolicy: PropTypes.Requireable<string>;\\r\\n        notifyOnNetworkStatusChange: PropTypes.Requireable<boolean>;\\r\\n        onCompleted: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        onError: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        pollInterval: PropTypes.Requireable<number>;\\r\\n        query: PropTypes.Validator<object>;\\r\\n        variables: PropTypes.Requireable<object>;\\r\\n        ssr: PropTypes.Requireable<boolean>;\\r\\n        partialRefetch: PropTypes.Requireable<boolean>;\\r\\n        returnPartialData: PropTypes.Requireable<boolean>;\\r\\n    };\\r\\n}\\r\\nexport interface Query<TData, TVariables> {\\r\\n    propTypes: PropTypes.InferProps<QueryComponentOptions<TData, TVariables>>;\\r\\n}\\r\\n\",\"@apollo/client/react/components/Subscription.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport PropTypes from 'prop-types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nimport { SubscriptionComponentOptions } from './types';\\r\\nexport declare function Subscription<TData = any, TVariables = OperationVariables>(props: SubscriptionComponentOptions<TData, TVariables>): JSX.Element | null;\\r\\nexport declare namespace Subscription {\\r\\n    var propTypes: {\\r\\n        subscription: PropTypes.Validator<object>;\\r\\n        variables: PropTypes.Requireable<object>;\\r\\n        children: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        onSubscriptionData: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        onSubscriptionComplete: PropTypes.Requireable<(...args: any[]) => any>;\\r\\n        shouldResubscribe: PropTypes.Requireable<boolean | ((...args: any[]) => any)>;\\r\\n    };\\r\\n}\\r\\nexport interface Subscription<TData, TVariables> {\\r\\n    propTypes: PropTypes.InferProps<SubscriptionComponentOptions<TData, TVariables>>;\\r\\n}\\r\\n\",\"@apollo/client/react/components/types.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { OperationVariables } from '../../core';\\r\\nimport { QueryFunctionOptions, QueryResult, BaseMutationOptions, MutationFunction, MutationResult, BaseSubscriptionOptions, SubscriptionResult } from '../types/types';\\r\\nexport interface QueryComponentOptions<TData = any, TVariables = OperationVariables> extends QueryFunctionOptions<TData, TVariables> {\\r\\n    children: (result: QueryResult<TData, TVariables>) => JSX.Element | null;\\r\\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface MutationComponentOptions<TData = any, TVariables = OperationVariables> extends BaseMutationOptions<TData, TVariables> {\\r\\n    mutation: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    children: (mutateFunction: MutationFunction<TData, TVariables>, result: MutationResult<TData>) => JSX.Element | null;\\r\\n}\\r\\nexport interface SubscriptionComponentOptions<TData = any, TVariables = OperationVariables> extends BaseSubscriptionOptions<TData, TVariables> {\\r\\n    subscription: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    children?: null | ((result: SubscriptionResult<TData>) => JSX.Element | null);\\r\\n}\\r\\n\",\"@apollo/client/react/context/ApolloConsumer.d.ts\":\"import React from 'react';\\r\\nimport { ApolloClient } from '../../core';\\r\\nexport interface ApolloConsumerProps {\\r\\n    children: (client: ApolloClient<object>) => React.ReactChild | null;\\r\\n}\\r\\nexport declare const ApolloConsumer: React.FC<ApolloConsumerProps>;\\r\\n\",\"@apollo/client/react/context/ApolloContext.d.ts\":\"import React from 'react';\\r\\nimport { ApolloClient } from '../../core';\\r\\nexport interface ApolloContextValue {\\r\\n    client?: ApolloClient<object>;\\r\\n    renderPromises?: Record<any, any>;\\r\\n}\\r\\nexport declare function resetApolloContext(): void;\\r\\nexport declare function getApolloContext(): React.Context<ApolloContextValue>;\\r\\n\",\"@apollo/client/react/context/ApolloProvider.d.ts\":\"import React from 'react';\\r\\nimport { ApolloClient } from '../../core';\\r\\nexport interface ApolloProviderProps<TCache> {\\r\\n    client: ApolloClient<TCache>;\\r\\n    children: React.ReactNode | React.ReactNode[] | null;\\r\\n}\\r\\nexport declare const ApolloProvider: React.FC<ApolloProviderProps<any>>;\\r\\n\",\"@apollo/client/react/context/index.d.ts\":\"export * from './ApolloConsumer';\\r\\nexport * from './ApolloContext';\\r\\nexport * from './ApolloProvider';\\r\\n\",\"@apollo/client/react/data/index.d.ts\":\"export { SubscriptionData } from './SubscriptionData';\\r\\nexport { OperationData } from './OperationData';\\r\\nexport { MutationData } from './MutationData';\\r\\nexport { QueryData } from './QueryData';\\r\\n\",\"@apollo/client/react/data/MutationData.d.ts\":\"import { MutationDataOptions, MutationTuple, MutationResult } from '../types/types';\\r\\nimport { OperationData } from './OperationData';\\r\\nimport { OperationVariables } from '../../core';\\r\\ndeclare type MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\\r\\nexport declare class MutationData<TData = any, TVariables = OperationVariables> extends OperationData {\\r\\n    private mostRecentMutationId;\\r\\n    private result;\\r\\n    private previousResult?;\\r\\n    private setResult;\\r\\n    constructor({ options, context, result, setResult }: {\\r\\n        options: MutationDataOptions<TData, TVariables>;\\r\\n        context: any;\\r\\n        result: MutationResultWithoutClient<TData>;\\r\\n        setResult: (result: MutationResultWithoutClient<TData>) => any;\\r\\n    });\\r\\n    execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables>;\\r\\n    afterExecute(): any;\\r\\n    cleanup(): void;\\r\\n    private runMutation;\\r\\n    private mutate;\\r\\n    private onMutationStart;\\r\\n    private onMutationCompleted;\\r\\n    private onMutationError;\\r\\n    private generateNewMutationId;\\r\\n    private isMostRecentMutation;\\r\\n    private updateResult;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/react/data/OperationData.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { ApolloClient } from '../../core';\\r\\nimport { DocumentType } from '../parser';\\r\\nimport { CommonOptions } from '../types/types';\\r\\nexport declare abstract class OperationData<TOptions = any> {\\r\\n    isMounted: boolean;\\r\\n    previousOptions: CommonOptions<TOptions>;\\r\\n    context: any;\\r\\n    client: ApolloClient<object> | undefined;\\r\\n    private options;\\r\\n    constructor(options?: CommonOptions<TOptions>, context?: any);\\r\\n    getOptions(): CommonOptions<TOptions>;\\r\\n    setOptions(newOptions: CommonOptions<TOptions>, storePrevious?: boolean): void;\\r\\n    abstract execute(...args: any): any;\\r\\n    abstract afterExecute(...args: any): void | (() => void);\\r\\n    abstract cleanup(): void;\\r\\n    protected unmount(): void;\\r\\n    protected refreshClient(): {\\r\\n        client: ApolloClient<object>;\\r\\n        isNew: boolean;\\r\\n    };\\r\\n    protected verifyDocumentType(document: DocumentNode, type: DocumentType): void;\\r\\n}\\r\\n\",\"@apollo/client/react/data/QueryData.d.ts\":\"import { QueryResult, QueryDataOptions, QueryTuple } from '../types/types';\\r\\nimport { OperationData } from './OperationData';\\r\\nexport declare class QueryData<TData, TVariables> extends OperationData {\\r\\n    onNewData: () => void;\\r\\n    private previousData;\\r\\n    private currentObservable?;\\r\\n    private currentSubscription?;\\r\\n    private runLazy;\\r\\n    private lazyOptions?;\\r\\n    constructor({ options, context, onNewData }: {\\r\\n        options: QueryDataOptions<TData, TVariables>;\\r\\n        context: any;\\r\\n        onNewData: () => void;\\r\\n    });\\r\\n    execute(): QueryResult<TData, TVariables>;\\r\\n    executeLazy(): QueryTuple<TData, TVariables>;\\r\\n    fetchData(): Promise<void> | boolean;\\r\\n    afterExecute({ lazy }?: {\\r\\n        lazy?: boolean;\\r\\n    }): any;\\r\\n    cleanup(): void;\\r\\n    getOptions(): any;\\r\\n    ssrInitiated(): any;\\r\\n    private runLazyQuery;\\r\\n    private getExecuteResult;\\r\\n    private getExecuteSsrResult;\\r\\n    private prepareObservableQueryOptions;\\r\\n    private initializeObservableQuery;\\r\\n    private updateObservableQuery;\\r\\n    private startQuerySubscription;\\r\\n    private resubscribeToQuery;\\r\\n    private getQueryResult;\\r\\n    private handleErrorOrCompleted;\\r\\n    private removeQuerySubscription;\\r\\n    private obsRefetch;\\r\\n    private obsFetchMore;\\r\\n    private obsUpdateQuery;\\r\\n    private obsStartPolling;\\r\\n    private obsStopPolling;\\r\\n    private obsSubscribeToMore;\\r\\n    private observableQueryFields;\\r\\n}\\r\\n\",\"@apollo/client/react/data/SubscriptionData.d.ts\":\"import { OperationData } from './OperationData';\\r\\nimport { SubscriptionDataOptions, SubscriptionResult } from '../types/types';\\r\\nexport declare class SubscriptionData<TData = any, TVariables = any> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\\r\\n    private setResult;\\r\\n    private currentObservable;\\r\\n    constructor({ options, context, setResult }: {\\r\\n        options: SubscriptionDataOptions<TData, TVariables>;\\r\\n        context: any;\\r\\n        setResult: any;\\r\\n    });\\r\\n    execute(result: SubscriptionResult<TData>): {\\r\\n        variables: TVariables | undefined;\\r\\n        loading: boolean;\\r\\n        data?: TData | undefined;\\r\\n        error?: import(\\\"../..\\\").ApolloError | undefined;\\r\\n    };\\r\\n    afterExecute(): void;\\r\\n    cleanup(): void;\\r\\n    private initialize;\\r\\n    private startSubscription;\\r\\n    private getLoadingResult;\\r\\n    private updateResult;\\r\\n    private updateCurrentData;\\r\\n    private updateError;\\r\\n    private completeSubscription;\\r\\n    private endSubscription;\\r\\n}\\r\\n\",\"@apollo/client/react/hoc/graphql.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { OperationOption, DataProps, MutateProps } from './types';\\r\\nexport declare function graphql<TProps extends TGraphQLVariables | {} = {}, TData = {}, TGraphQLVariables = {}, TChildProps = Partial<DataProps<TData, TGraphQLVariables>> & Partial<MutateProps<TData, TGraphQLVariables>>>(document: DocumentNode, operationOptions?: OperationOption<TProps, TData, TGraphQLVariables, TChildProps>): (WrappedComponent: React.ComponentType<TProps & TChildProps>) => React.ComponentClass<TProps>;\\r\\n\",\"@apollo/client/react/hoc/hoc-utils.d.ts\":\"import React from 'react';\\r\\nimport { IDocumentDefinition } from '../parser';\\r\\nexport declare const defaultMapPropsToOptions: () => {};\\r\\nexport declare const defaultMapResultToProps: <P>(props: P) => P;\\r\\nexport declare const defaultMapPropsToSkip: () => boolean;\\r\\nexport declare function getDisplayName<P>(WrappedComponent: React.ComponentType<P>): string;\\r\\nexport declare function calculateVariablesFromProps<TProps>(operation: IDocumentDefinition, props: TProps): Record<string, any>;\\r\\nexport declare type RefSetter<TChildProps> = (ref: React.ComponentClass<TChildProps>) => void | void;\\r\\nexport declare class GraphQLBase<TProps, TChildProps, TState = any> extends React.Component<TProps, TState> {\\r\\n    withRef: boolean;\\r\\n    private wrappedInstance?;\\r\\n    constructor(props: TProps);\\r\\n    getWrappedInstance(): React.ComponentClass<TChildProps, any> | undefined;\\r\\n    setWrappedInstance(ref: React.ComponentClass<TChildProps>): void;\\r\\n}\\r\\n\",\"@apollo/client/react/hoc/index.d.ts\":\"export { graphql } from './graphql';\\r\\nexport { withQuery } from './query-hoc';\\r\\nexport { withMutation } from './mutation-hoc';\\r\\nexport { withSubscription } from './subscription-hoc';\\r\\nexport { withApollo } from './withApollo';\\r\\nexport * from './types';\\r\\n\",\"@apollo/client/react/hoc/mutation-hoc.d.ts\":\"import React from 'react';\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { OperationOption, MutateProps } from './types';\\r\\nexport declare function withMutation<TProps extends TGraphQLVariables | {} = {}, TData = {}, TGraphQLVariables = {}, TChildProps = MutateProps<TData, TGraphQLVariables>>(document: DocumentNode, operationOptions?: OperationOption<TProps, TData, TGraphQLVariables, TChildProps>): (WrappedComponent: React.ComponentType<TProps & TChildProps>) => React.ComponentClass<TProps>;\\r\\n\",\"@apollo/client/react/hoc/query-hoc.d.ts\":\"import React from 'react';\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { OperationOption, DataProps } from './types';\\r\\nexport declare function withQuery<TProps extends TGraphQLVariables | {} = {}, TData = {}, TGraphQLVariables = {}, TChildProps = DataProps<TData, TGraphQLVariables>>(document: DocumentNode, operationOptions?: OperationOption<TProps, TData, TGraphQLVariables, TChildProps>): (WrappedComponent: React.ComponentType<TProps & TChildProps>) => React.ComponentClass<TProps>;\\r\\n\",\"@apollo/client/react/hoc/subscription-hoc.d.ts\":\"import React from 'react';\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { OperationOption, DataProps } from './types';\\r\\nexport declare function withSubscription<TProps extends TGraphQLVariables | {} = {}, TData = {}, TGraphQLVariables = {}, TChildProps = DataProps<TData, TGraphQLVariables>>(document: DocumentNode, operationOptions?: OperationOption<TProps, TData, TGraphQLVariables, TChildProps>): (WrappedComponent: React.ComponentType<TProps & TChildProps>) => React.ComponentClass<TProps>;\\r\\n\",\"@apollo/client/react/hoc/types.d.ts\":\"import { ApolloClient } from '../../core';\\r\\nimport { ApolloError } from '../../errors';\\r\\nimport { ApolloQueryResult, OperationVariables, FetchMoreOptions, UpdateQueryOptions, FetchMoreQueryOptions, SubscribeToMoreOptions } from '../../core';\\r\\nimport { MutationFunction, BaseQueryOptions, BaseMutationOptions, MutationResult } from '../types/types';\\r\\nexport interface QueryControls<TData = any, TGraphQLVariables = OperationVariables> {\\r\\n    error?: ApolloError;\\r\\n    networkStatus: number;\\r\\n    loading: boolean;\\r\\n    variables: TGraphQLVariables;\\r\\n    fetchMore: (fetchMoreOptions: FetchMoreQueryOptions<TGraphQLVariables, any, TData> & FetchMoreOptions<TData, TGraphQLVariables>) => Promise<ApolloQueryResult<TData>>;\\r\\n    refetch: (variables?: TGraphQLVariables) => Promise<ApolloQueryResult<TData>>;\\r\\n    startPolling: (pollInterval: number) => void;\\r\\n    stopPolling: () => void;\\r\\n    subscribeToMore: (options: SubscribeToMoreOptions) => () => void;\\r\\n    updateQuery: (mapFn: (previousQueryResult: any, options: UpdateQueryOptions<any>) => any) => void;\\r\\n}\\r\\nexport declare type DataValue<TData, TGraphQLVariables = OperationVariables> = QueryControls<TData, TGraphQLVariables> & Partial<TData>;\\r\\nexport interface DataProps<TData, TGraphQLVariables = OperationVariables> {\\r\\n    data: DataValue<TData, TGraphQLVariables>;\\r\\n}\\r\\nexport interface MutateProps<TData = any, TGraphQLVariables = OperationVariables> {\\r\\n    mutate: MutationFunction<TData, TGraphQLVariables>;\\r\\n    result: MutationResult<TData>;\\r\\n}\\r\\nexport declare type ChildProps<TProps = {}, TData = {}, TGraphQLVariables = OperationVariables> = TProps & Partial<DataProps<TData, TGraphQLVariables>> & Partial<MutateProps<TData, TGraphQLVariables>>;\\r\\nexport declare type ChildDataProps<TProps = {}, TData = {}, TGraphQLVariables = OperationVariables> = TProps & DataProps<TData, TGraphQLVariables>;\\r\\nexport declare type ChildMutateProps<TProps = {}, TData = {}, TGraphQLVariables = OperationVariables> = TProps & MutateProps<TData, TGraphQLVariables>;\\r\\nexport interface OptionProps<TProps = any, TData = any, TGraphQLVariables = OperationVariables> extends Partial<DataProps<TData, TGraphQLVariables>>, Partial<MutateProps<TData, TGraphQLVariables>> {\\r\\n    ownProps: TProps;\\r\\n}\\r\\nexport interface OperationOption<TProps, TData, TGraphQLVariables = OperationVariables, TChildProps = ChildProps<TProps, TData, TGraphQLVariables>> {\\r\\n    options?: BaseQueryOptions<TGraphQLVariables> | BaseMutationOptions<TData, TGraphQLVariables> | ((props: TProps) => BaseQueryOptions<TGraphQLVariables> | BaseMutationOptions<TData, TGraphQLVariables>);\\r\\n    props?: (props: OptionProps<TProps, TData, TGraphQLVariables>, lastProps?: TChildProps | void) => TChildProps;\\r\\n    skip?: boolean | ((props: TProps) => boolean);\\r\\n    name?: string;\\r\\n    withRef?: boolean;\\r\\n    shouldResubscribe?: (props: TProps, nextProps: TProps) => boolean;\\r\\n    alias?: string;\\r\\n}\\r\\nexport declare type WithApolloClient<P> = P & {\\r\\n    client?: ApolloClient<any>;\\r\\n};\\r\\n\",\"@apollo/client/react/hoc/withApollo.d.ts\":\"import React from 'react';\\r\\nimport { OperationOption, WithApolloClient } from './types';\\r\\nexport declare function withApollo<TProps, TResult = any>(WrappedComponent: React.ComponentType<WithApolloClient<Omit<TProps, 'client'>>>, operationOptions?: OperationOption<TProps, TResult>): React.ComponentClass<Omit<TProps, 'client'>>;\\r\\n\",\"@apollo/client/react/hooks/index.d.ts\":\"export * from './useApolloClient';\\r\\nexport * from './useLazyQuery';\\r\\nexport * from './useMutation';\\r\\nexport * from './useQuery';\\r\\nexport * from './useSubscription';\\r\\nexport * from './useReactiveVar';\\r\\n\",\"@apollo/client/react/hooks/useApolloClient.d.ts\":\"import { ApolloClient } from '../../core';\\r\\nexport declare function useApolloClient(): ApolloClient<object>;\\r\\n\",\"@apollo/client/react/hooks/useLazyQuery.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { LazyQueryHookOptions, QueryTuple } from '../types/types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nexport declare function useLazyQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: LazyQueryHookOptions<TData, TVariables>): QueryTuple<TData, TVariables>;\\r\\n\",\"@apollo/client/react/hooks/useMutation.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { MutationHookOptions, MutationTuple } from '../types/types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nexport declare function useMutation<TData = any, TVariables = OperationVariables>(mutation: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: MutationHookOptions<TData, TVariables>): MutationTuple<TData, TVariables>;\\r\\n\",\"@apollo/client/react/hooks/useQuery.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { QueryHookOptions, QueryResult } from '../types/types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nexport declare function useQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: QueryHookOptions<TData, TVariables>): QueryResult<TData, TVariables>;\\r\\n\",\"@apollo/client/react/hooks/useReactiveVar.d.ts\":\"import { ReactiveVar } from '../../core';\\r\\nexport declare function useReactiveVar<T>(rv: ReactiveVar<T>): T;\\r\\n\",\"@apollo/client/react/hooks/useSubscription.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { SubscriptionHookOptions } from '../types/types';\\r\\nimport { OperationVariables } from '../../core';\\r\\nexport declare function useSubscription<TData = any, TVariables = OperationVariables>(subscription: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: SubscriptionHookOptions<TData, TVariables>): {\\r\\n    variables: TVariables | undefined;\\r\\n    loading: boolean;\\r\\n    data?: TData | undefined;\\r\\n    error?: import(\\\"../../errors\\\").ApolloError | undefined;\\r\\n};\\r\\n\",\"@apollo/client/react/hooks/utils/useBaseQuery.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { QueryHookOptions, QueryTuple, QueryResult } from '../../types/types';\\r\\nimport { OperationVariables } from '../../../core';\\r\\nexport declare function useBaseQuery<TData = any, TVariables = OperationVariables>(query: DocumentNode | TypedDocumentNode<TData, TVariables>, options?: QueryHookOptions<TData, TVariables>, lazy?: boolean): QueryTuple<TData, TVariables> | QueryResult<TData, TVariables>;\\r\\n\",\"@apollo/client/react/hooks/utils/useDeepMemo.d.ts\":\"export declare function useDeepMemo<TKey, TValue>(memoFn: () => TValue, key: TKey): TValue;\\r\\n\",\"@apollo/client/react/index.d.ts\":\"export { ApolloProvider, ApolloConsumer, getApolloContext, resetApolloContext, ApolloContextValue } from './context';\\r\\nexport * from './hooks';\\r\\nexport { DocumentType, IDocumentDefinition, operationName, parser } from './parser';\\r\\nexport * from './types/types';\\r\\n\",\"@apollo/client/react/parser/index.d.ts\":\"import { DocumentNode, VariableDefinitionNode } from 'graphql';\\r\\nexport declare enum DocumentType {\\r\\n    Query = 0,\\r\\n    Mutation = 1,\\r\\n    Subscription = 2\\r\\n}\\r\\nexport interface IDocumentDefinition {\\r\\n    type: DocumentType;\\r\\n    name: string;\\r\\n    variables: ReadonlyArray<VariableDefinitionNode>;\\r\\n}\\r\\nexport declare function operationName(type: DocumentType): string;\\r\\nexport declare function parser(document: DocumentNode): IDocumentDefinition;\\r\\n\",\"@apollo/client/react/ssr/getDataFromTree.d.ts\":\"import React from 'react';\\r\\nexport declare function getDataFromTree(tree: React.ReactNode, context?: {\\r\\n    [key: string]: any;\\r\\n}): Promise<string>;\\r\\nexport declare type GetMarkupFromTreeOptions = {\\r\\n    tree: React.ReactNode;\\r\\n    context?: {\\r\\n        [key: string]: any;\\r\\n    };\\r\\n    renderFunction?: (tree: React.ReactElement<any>) => string | PromiseLike<string>;\\r\\n};\\r\\nexport declare function getMarkupFromTree({ tree, context, renderFunction }: GetMarkupFromTreeOptions): Promise<string>;\\r\\n\",\"@apollo/client/react/ssr/index.d.ts\":\"export { getMarkupFromTree, getDataFromTree } from './getDataFromTree';\\r\\nexport { renderToStringWithData } from './renderToStringWithData';\\r\\nexport { RenderPromises } from './RenderPromises';\\r\\n\",\"@apollo/client/react/ssr/RenderPromises.d.ts\":\"/// <reference types=\\\"react\\\" />\\r\\nimport { ObservableQuery } from '../../core';\\r\\nimport { QueryDataOptions } from '../types/types';\\r\\nimport { QueryData } from '../data/QueryData';\\r\\nexport declare class RenderPromises {\\r\\n    private queryPromises;\\r\\n    private queryInfoTrie;\\r\\n    registerSSRObservable<TData, TVariables>(observable: ObservableQuery<any, TVariables>, props: QueryDataOptions<TData, TVariables>): void;\\r\\n    getSSRObservable<TData, TVariables>(props: QueryDataOptions<TData, TVariables>): ObservableQuery<any, any> | null;\\r\\n    addQueryPromise<TData, TVariables>(queryInstance: QueryData<TData, TVariables>, finish: () => React.ReactNode): React.ReactNode;\\r\\n    hasPromises(): boolean;\\r\\n    consumeAndAwaitPromises(): Promise<any[]>;\\r\\n    private lookupQueryInfo;\\r\\n}\\r\\n\",\"@apollo/client/react/ssr/renderToStringWithData.d.ts\":\"import { ReactElement } from 'react';\\r\\nexport declare function renderToStringWithData(component: ReactElement<any>): Promise<string>;\\r\\n\",\"@apollo/client/react/types/types.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ReactNode } from 'react';\\r\\nimport { DocumentNode } from 'graphql';\\r\\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\\r\\nimport { Observable } from '../../utilities';\\r\\nimport { FetchResult } from '../../link/core';\\r\\nimport { ApolloClient } from '../../core';\\r\\nimport { ApolloError } from '../../errors';\\r\\nimport { ApolloQueryResult, ErrorPolicy, FetchMoreOptions, FetchMoreQueryOptions, FetchPolicy, MutationUpdaterFn, NetworkStatus, ObservableQuery, OperationVariables, PureQueryOptions, WatchQueryFetchPolicy } from '../../core';\\r\\nexport declare type Context = Record<string, any>;\\r\\nexport declare type CommonOptions<TOptions> = TOptions & {\\r\\n    client?: ApolloClient<object>;\\r\\n};\\r\\nexport interface BaseQueryOptions<TVariables = OperationVariables> {\\r\\n    ssr?: boolean;\\r\\n    variables?: TVariables;\\r\\n    fetchPolicy?: WatchQueryFetchPolicy;\\r\\n    nextFetchPolicy?: WatchQueryFetchPolicy;\\r\\n    errorPolicy?: ErrorPolicy;\\r\\n    pollInterval?: number;\\r\\n    client?: ApolloClient<any>;\\r\\n    notifyOnNetworkStatusChange?: boolean;\\r\\n    context?: Context;\\r\\n    partialRefetch?: boolean;\\r\\n    returnPartialData?: boolean;\\r\\n}\\r\\nexport interface QueryFunctionOptions<TData = any, TVariables = OperationVariables> extends BaseQueryOptions<TVariables> {\\r\\n    displayName?: string;\\r\\n    skip?: boolean;\\r\\n    onCompleted?: (data: TData) => void;\\r\\n    onError?: (error: ApolloError) => void;\\r\\n}\\r\\nexport declare type ObservableQueryFields<TData, TVariables> = Pick<ObservableQuery<TData, TVariables>, 'startPolling' | 'stopPolling' | 'subscribeToMore' | 'updateQuery' | 'refetch' | 'variables'> & {\\r\\n    fetchMore: (<K extends keyof TVariables>(fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> & FetchMoreOptions<TData, TVariables>) => Promise<ApolloQueryResult<TData>>) & (<TData2, TVariables2, K extends keyof TVariables2>(fetchMoreOptions: {\\r\\n        query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    } & FetchMoreQueryOptions<TVariables2, K, TData> & FetchMoreOptions<TData2, TVariables2>) => Promise<ApolloQueryResult<TData2>>);\\r\\n};\\r\\nexport interface QueryResult<TData = any, TVariables = OperationVariables> extends ObservableQueryFields<TData, TVariables> {\\r\\n    client: ApolloClient<any>;\\r\\n    data: TData | undefined;\\r\\n    error?: ApolloError;\\r\\n    loading: boolean;\\r\\n    networkStatus: NetworkStatus;\\r\\n    called: true;\\r\\n}\\r\\nexport interface QueryDataOptions<TData = any, TVariables = OperationVariables> extends QueryFunctionOptions<TData, TVariables> {\\r\\n    children?: (result: QueryResult<TData, TVariables>) => ReactNode;\\r\\n    query: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface QueryHookOptions<TData = any, TVariables = OperationVariables> extends QueryFunctionOptions<TData, TVariables> {\\r\\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface LazyQueryHookOptions<TData = any, TVariables = OperationVariables> extends Omit<QueryFunctionOptions<TData, TVariables>, 'skip'> {\\r\\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface QueryPreviousData<TData, TVariables> {\\r\\n    client?: ApolloClient<object>;\\r\\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    observableQueryOptions?: {};\\r\\n    result?: QueryResult<TData, TVariables> | null;\\r\\n    loading?: boolean;\\r\\n    options?: QueryDataOptions<TData, TVariables>;\\r\\n    error?: ApolloError;\\r\\n}\\r\\nexport interface QueryLazyOptions<TVariables> {\\r\\n    variables?: TVariables;\\r\\n    context?: Context;\\r\\n}\\r\\ndeclare type UnexecutedLazyFields = {\\r\\n    loading: false;\\r\\n    networkStatus: NetworkStatus.ready;\\r\\n    called: false;\\r\\n    data: undefined;\\r\\n};\\r\\ndeclare type Impartial<T> = {\\r\\n    [P in keyof T]?: never;\\r\\n};\\r\\ndeclare type AbsentLazyResultFields = Omit<Impartial<QueryResult<unknown, unknown>>, keyof UnexecutedLazyFields>;\\r\\ndeclare type UnexecutedLazyResult = UnexecutedLazyFields & AbsentLazyResultFields;\\r\\nexport declare type LazyQueryResult<TData, TVariables> = UnexecutedLazyResult | QueryResult<TData, TVariables>;\\r\\nexport declare type QueryTuple<TData, TVariables> = [(options?: QueryLazyOptions<TVariables>) => void, LazyQueryResult<TData, TVariables>];\\r\\nexport declare type RefetchQueriesFunction = (...args: any[]) => Array<string | PureQueryOptions>;\\r\\nexport interface BaseMutationOptions<TData = any, TVariables = OperationVariables> {\\r\\n    variables?: TVariables;\\r\\n    optimisticResponse?: TData | ((vars: TVariables) => TData);\\r\\n    refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;\\r\\n    awaitRefetchQueries?: boolean;\\r\\n    errorPolicy?: ErrorPolicy;\\r\\n    update?: MutationUpdaterFn<TData>;\\r\\n    client?: ApolloClient<object>;\\r\\n    notifyOnNetworkStatusChange?: boolean;\\r\\n    context?: Context;\\r\\n    onCompleted?: (data: TData) => void;\\r\\n    onError?: (error: ApolloError) => void;\\r\\n    fetchPolicy?: Extract<WatchQueryFetchPolicy, 'no-cache'>;\\r\\n    ignoreResults?: boolean;\\r\\n}\\r\\nexport interface MutationFunctionOptions<TData = any, TVariables = OperationVariables> {\\r\\n    variables?: TVariables;\\r\\n    optimisticResponse?: TData | ((vars: TVariables) => TData);\\r\\n    refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesFunction;\\r\\n    awaitRefetchQueries?: boolean;\\r\\n    update?: MutationUpdaterFn<TData>;\\r\\n    context?: Context;\\r\\n    fetchPolicy?: WatchQueryFetchPolicy;\\r\\n}\\r\\nexport interface MutationResult<TData = any> {\\r\\n    data?: TData | null;\\r\\n    error?: ApolloError;\\r\\n    loading: boolean;\\r\\n    called: boolean;\\r\\n    client: ApolloClient<object>;\\r\\n}\\r\\nexport declare type MutationFunction<TData = any, TVariables = OperationVariables> = (options?: MutationFunctionOptions<TData, TVariables>) => Promise<FetchResult<TData>>;\\r\\nexport interface MutationHookOptions<TData = any, TVariables = OperationVariables> extends BaseMutationOptions<TData, TVariables> {\\r\\n    mutation?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface MutationDataOptions<TData = any, TVariables = OperationVariables> extends BaseMutationOptions<TData, TVariables> {\\r\\n    mutation: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport declare type MutationTuple<TData, TVariables> = [(options?: MutationFunctionOptions<TData, TVariables>) => Promise<FetchResult<TData>>, MutationResult<TData>];\\r\\nexport interface OnSubscriptionDataOptions<TData = any> {\\r\\n    client: ApolloClient<object>;\\r\\n    subscriptionData: SubscriptionResult<TData>;\\r\\n}\\r\\nexport interface BaseSubscriptionOptions<TData = any, TVariables = OperationVariables> {\\r\\n    variables?: TVariables;\\r\\n    fetchPolicy?: FetchPolicy;\\r\\n    shouldResubscribe?: boolean | ((options: BaseSubscriptionOptions<TData, TVariables>) => boolean);\\r\\n    client?: ApolloClient<object>;\\r\\n    skip?: boolean;\\r\\n    onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\\r\\n    onSubscriptionComplete?: () => void;\\r\\n}\\r\\nexport interface SubscriptionResult<TData = any> {\\r\\n    loading: boolean;\\r\\n    data?: TData;\\r\\n    error?: ApolloError;\\r\\n}\\r\\nexport interface SubscriptionHookOptions<TData = any, TVariables = OperationVariables> extends BaseSubscriptionOptions<TData, TVariables> {\\r\\n    subscription?: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n}\\r\\nexport interface SubscriptionDataOptions<TData = any, TVariables = OperationVariables> extends BaseSubscriptionOptions<TData, TVariables> {\\r\\n    subscription: DocumentNode | TypedDocumentNode<TData, TVariables>;\\r\\n    children?: null | ((result: SubscriptionResult<TData>) => JSX.Element | null);\\r\\n}\\r\\nexport interface SubscriptionCurrentObservable {\\r\\n    query?: Observable<any>;\\r\\n    subscription?: ZenObservable.Subscription;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/testing/index.d.ts\":\"export * from '../utilities/testing';\\r\\n\",\"@apollo/client/utilities/common/arrays.d.ts\":\"export declare function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T>;\\r\\n\",\"@apollo/client/utilities/common/canUse.d.ts\":\"export declare const canUseWeakMap: boolean;\\r\\n\",\"@apollo/client/utilities/common/cloneDeep.d.ts\":\"export declare function cloneDeep<T>(value: T): T;\\r\\n\",\"@apollo/client/utilities/common/compact.d.ts\":\"import { TupleToIntersection } from './mergeDeep';\\r\\nexport declare function compact<TArgs extends object[]>(...objects: TArgs): TupleToIntersection<TArgs>;\\r\\n\",\"@apollo/client/utilities/common/environment.d.ts\":\"export declare function getEnv(): string | undefined;\\r\\nexport declare function isEnv(env: string): boolean;\\r\\nexport declare function isDevelopment(): boolean;\\r\\nexport declare function isTest(): boolean;\\r\\n\",\"@apollo/client/utilities/common/errorHandling.d.ts\":\"import { ExecutionResult } from 'graphql';\\r\\nexport declare function graphQLResultHasError(result: ExecutionResult): boolean;\\r\\n\",\"@apollo/client/utilities/common/filterInPlace.d.ts\":\"export declare function filterInPlace<T>(array: T[], test: (elem: T) => boolean, context?: any): T[];\\r\\n\",\"@apollo/client/utilities/common/maybeDeepFreeze.d.ts\":\"export declare function maybeDeepFreeze<T>(obj: T): T;\\r\\n\",\"@apollo/client/utilities/common/mergeDeep.d.ts\":\"export declare type TupleToIntersection<T extends any[]> = T extends [infer A] ? A : T extends [infer A, infer B] ? A & B : T extends [infer A, infer B, infer C] ? A & B & C : T extends [infer A, infer B, infer C, infer D] ? A & B & C & D : T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E : T extends (infer U)[] ? U : any;\\r\\nexport declare function mergeDeep<T extends any[]>(...sources: T): TupleToIntersection<T>;\\r\\nexport declare function mergeDeepArray<T>(sources: T[]): T;\\r\\ndeclare function isObject(obj: any): obj is Record<string | number, any>;\\r\\nexport declare type ReconcilerFunction<TContextArgs extends any[]> = (this: DeepMerger<TContextArgs>, target: Record<string | number, any>, source: Record<string | number, any>, property: string | number, ...context: TContextArgs) => any;\\r\\nexport declare class DeepMerger<TContextArgs extends any[]> {\\r\\n    private reconciler;\\r\\n    constructor(reconciler?: ReconcilerFunction<TContextArgs>);\\r\\n    merge(target: any, source: any, ...context: TContextArgs): any;\\r\\n    isObject: typeof isObject;\\r\\n    private pastCopies;\\r\\n    shallowCopyForMerge<T>(value: T): T;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/utilities/graphql/directives.d.ts\":\"import { SelectionNode, DirectiveNode, DocumentNode, ArgumentNode, ASTNode } from 'graphql';\\r\\nexport declare type DirectiveInfo = {\\r\\n    [fieldName: string]: {\\r\\n        [argName: string]: any;\\r\\n    };\\r\\n};\\r\\nexport declare function shouldInclude({ directives }: SelectionNode, variables?: Record<string, any>): boolean;\\r\\nexport declare function getDirectiveNames(root: ASTNode): string[];\\r\\nexport declare function hasDirectives(names: string[], root: ASTNode): boolean;\\r\\nexport declare function hasClientExports(document: DocumentNode): boolean;\\r\\nexport declare type InclusionDirectives = Array<{\\r\\n    directive: DirectiveNode;\\r\\n    ifArgument: ArgumentNode;\\r\\n}>;\\r\\nexport declare function getInclusionDirectives(directives: ReadonlyArray<DirectiveNode>): InclusionDirectives;\\r\\n\",\"@apollo/client/utilities/graphql/fragments.d.ts\":\"import { DocumentNode, FragmentDefinitionNode, InlineFragmentNode, SelectionNode } from 'graphql';\\r\\nexport declare function getFragmentQueryDocument(document: DocumentNode, fragmentName?: string): DocumentNode;\\r\\nexport interface FragmentMap {\\r\\n    [fragmentName: string]: FragmentDefinitionNode;\\r\\n}\\r\\nexport declare function createFragmentMap(fragments?: FragmentDefinitionNode[]): FragmentMap;\\r\\nexport declare function getFragmentFromSelection(selection: SelectionNode, fragmentMap?: FragmentMap): InlineFragmentNode | FragmentDefinitionNode | null;\\r\\n\",\"@apollo/client/utilities/graphql/getFromAST.d.ts\":\"import { DocumentNode, OperationDefinitionNode, FragmentDefinitionNode } from 'graphql';\\r\\nexport declare function checkDocument(doc: DocumentNode): DocumentNode;\\r\\nexport declare function getOperationDefinition(doc: DocumentNode): OperationDefinitionNode | undefined;\\r\\nexport declare function getOperationName(doc: DocumentNode): string | null;\\r\\nexport declare function getFragmentDefinitions(doc: DocumentNode): FragmentDefinitionNode[];\\r\\nexport declare function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode;\\r\\nexport declare function getFragmentDefinition(doc: DocumentNode): FragmentDefinitionNode;\\r\\nexport declare function getMainDefinition(queryDoc: DocumentNode): OperationDefinitionNode | FragmentDefinitionNode;\\r\\nexport declare function getDefaultValues(definition: OperationDefinitionNode | undefined): Record<string, any>;\\r\\n\",\"@apollo/client/utilities/graphql/storeUtils.d.ts\":\"import { DirectiveNode, FieldNode, VariableNode, InlineFragmentNode, ValueNode, SelectionNode, NameNode, SelectionSetNode } from 'graphql';\\r\\nimport { FragmentMap } from './fragments';\\r\\nexport interface Reference {\\r\\n    readonly __ref: string;\\r\\n}\\r\\nexport declare function makeReference(id: string): Reference;\\r\\nexport declare function isReference(obj: any): obj is Reference;\\r\\nexport declare type StoreValue = number | string | string[] | Reference | Reference[] | null | undefined | void | Object;\\r\\nexport interface StoreObject {\\r\\n    __typename?: string;\\r\\n    [storeFieldName: string]: StoreValue;\\r\\n}\\r\\nexport declare function valueToObjectRepresentation(argObj: any, name: NameNode, value: ValueNode, variables?: Object): void;\\r\\nexport declare function storeKeyNameFromField(field: FieldNode, variables?: Object): string;\\r\\nexport declare type Directives = {\\r\\n    [directiveName: string]: {\\r\\n        [argName: string]: any;\\r\\n    };\\r\\n};\\r\\nexport declare function getStoreKeyName(fieldName: string, args?: Record<string, any> | null, directives?: Directives): string;\\r\\nexport declare function argumentsObjectFromField(field: FieldNode | DirectiveNode, variables?: Record<string, any>): Object | null;\\r\\nexport declare function resultKeyNameFromField(field: FieldNode): string;\\r\\nexport declare function getTypenameFromResult(result: Record<string, any>, selectionSet: SelectionSetNode, fragmentMap?: FragmentMap): string | undefined;\\r\\nexport declare function isField(selection: SelectionNode): selection is FieldNode;\\r\\nexport declare function isInlineFragment(selection: SelectionNode): selection is InlineFragmentNode;\\r\\nexport declare type VariableValue = (node: VariableNode) => any;\\r\\n\",\"@apollo/client/utilities/graphql/transform.d.ts\":\"import { DocumentNode, FieldNode, DirectiveNode, FragmentDefinitionNode, ArgumentNode, FragmentSpreadNode, VariableDefinitionNode } from 'graphql';\\r\\nexport declare type RemoveNodeConfig<N> = {\\r\\n    name?: string;\\r\\n    test?: (node: N) => boolean;\\r\\n    remove?: boolean;\\r\\n};\\r\\nexport declare type GetNodeConfig<N> = {\\r\\n    name?: string;\\r\\n    test?: (node: N) => boolean;\\r\\n};\\r\\nexport declare type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\\r\\nexport declare type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\\r\\nexport declare type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\\r\\nexport declare type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\\r\\nexport declare type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\\r\\nexport declare type RemoveFragmentDefinitionConfig = RemoveNodeConfig<FragmentDefinitionNode>;\\r\\nexport declare type RemoveVariableDefinitionConfig = RemoveNodeConfig<VariableDefinitionNode>;\\r\\nexport declare function removeDirectivesFromDocument(directives: RemoveDirectiveConfig[], doc: DocumentNode): DocumentNode | null;\\r\\nexport declare function addTypenameToDocument(doc: DocumentNode): DocumentNode;\\r\\nexport declare namespace addTypenameToDocument {\\r\\n    var added: (field: FieldNode) => boolean;\\r\\n}\\r\\nexport interface addTypenameToDocument {\\r\\n    added(field: FieldNode): boolean;\\r\\n}\\r\\nexport declare function removeConnectionDirectiveFromDocument(doc: DocumentNode): DocumentNode | null;\\r\\nexport declare function removeArgumentsFromDocument(config: RemoveArgumentsConfig[], doc: DocumentNode): DocumentNode | null;\\r\\nexport declare function removeFragmentSpreadFromDocument(config: RemoveFragmentSpreadConfig[], doc: DocumentNode): DocumentNode | null;\\r\\nexport declare function buildQueryFromSelectionSet(document: DocumentNode): DocumentNode;\\r\\nexport declare function removeClientSetsFromDocument(document: DocumentNode): DocumentNode | null;\\r\\n\",\"@apollo/client/utilities/index.d.ts\":\"export { DirectiveInfo, InclusionDirectives, shouldInclude, hasDirectives, hasClientExports, getDirectiveNames, getInclusionDirectives, } from './graphql/directives';\\r\\nexport { FragmentMap, createFragmentMap, getFragmentQueryDocument, getFragmentFromSelection, } from './graphql/fragments';\\r\\nexport { checkDocument, getOperationDefinition, getOperationName, getFragmentDefinitions, getQueryDefinition, getFragmentDefinition, getMainDefinition, getDefaultValues, } from './graphql/getFromAST';\\r\\nexport { StoreObject, Reference, StoreValue, Directives, VariableValue, makeReference, isReference, isField, isInlineFragment, valueToObjectRepresentation, storeKeyNameFromField, argumentsObjectFromField, resultKeyNameFromField, getStoreKeyName, getTypenameFromResult, } from './graphql/storeUtils';\\r\\nexport { RemoveNodeConfig, GetNodeConfig, RemoveDirectiveConfig, GetDirectiveConfig, RemoveArgumentsConfig, GetFragmentSpreadConfig, RemoveFragmentSpreadConfig, RemoveFragmentDefinitionConfig, RemoveVariableDefinitionConfig, addTypenameToDocument, buildQueryFromSelectionSet, removeDirectivesFromDocument, removeConnectionDirectiveFromDocument, removeArgumentsFromDocument, removeFragmentSpreadFromDocument, removeClientSetsFromDocument, } from './graphql/transform';\\r\\nexport { concatPagination, offsetLimitPagination, relayStylePagination, } from './policies/pagination';\\r\\nexport { Observable, Observer, ObservableSubscription } from './observables/Observable';\\r\\nexport * from './common/mergeDeep';\\r\\nexport * from './common/cloneDeep';\\r\\nexport * from './common/maybeDeepFreeze';\\r\\nexport * from './observables/iteration';\\r\\nexport * from './observables/asyncMap';\\r\\nexport * from './observables/Concast';\\r\\nexport * from './common/arrays';\\r\\nexport * from './common/errorHandling';\\r\\nexport * from './common/canUse';\\r\\nexport * from './common/compact';\\r\\n\",\"@apollo/client/utilities/observables/asyncMap.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from \\\"./Observable\\\";\\r\\nexport declare function asyncMap<V, R>(observable: Observable<V>, mapFn: (value: V) => R | PromiseLike<R>, catchFn?: (error: any) => R | PromiseLike<R>): Observable<R>;\\r\\n\",\"@apollo/client/utilities/observables/Concast.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable, Observer } from \\\"./Observable\\\";\\r\\ndeclare type MaybeAsync<T> = T | PromiseLike<T>;\\r\\ndeclare type Source<T> = MaybeAsync<Observable<T>>;\\r\\nexport declare type ConcastSourcesIterable<T> = Iterable<Source<T>>;\\r\\nexport declare class Concast<T> extends Observable<T> {\\r\\n    private observers;\\r\\n    private sub?;\\r\\n    constructor(sources: MaybeAsync<ConcastSourcesIterable<T>>);\\r\\n    private sources;\\r\\n    private start;\\r\\n    addObserver(observer: Observer<T>): void;\\r\\n    removeObserver(observer: Observer<T>, quietly?: boolean): void;\\r\\n    private resolve;\\r\\n    private reject;\\r\\n    readonly promise: Promise<T>;\\r\\n    private latest?;\\r\\n    private handlers;\\r\\n    cleanup(callback: () => any): void;\\r\\n    cancel: (reason: any) => void;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/utilities/observables/iteration.d.ts\":\"import { Observer } from \\\"./Observable\\\";\\r\\nexport declare function iterateObserversSafely<E, A>(observers: Set<Observer<E>>, method: keyof Observer<E>, argument?: A): void;\\r\\n\",\"@apollo/client/utilities/observables/Observable.d.ts\":\"import Observable from 'zen-observable';\\r\\nimport 'symbol-observable';\\r\\nexport declare type ObservableSubscription = ZenObservable.Subscription;\\r\\nexport declare type Observer<T> = ZenObservable.Observer<T>;\\r\\ndeclare global {\\r\\n    interface Observable<T> {\\r\\n        ['@@observable'](): Observable<T>;\\r\\n    }\\r\\n}\\r\\nexport { Observable };\\r\\n\",\"@apollo/client/utilities/policies/pagination.d.ts\":\"import { FieldPolicy, Reference } from '../../cache';\\r\\ndeclare type KeyArgs = FieldPolicy<any>[\\\"keyArgs\\\"];\\r\\nexport declare function concatPagination<T = Reference>(keyArgs?: KeyArgs): FieldPolicy<T[]>;\\r\\nexport declare function offsetLimitPagination<T = Reference>(keyArgs?: KeyArgs): FieldPolicy<T[]>;\\r\\ndeclare type TEdge<TNode> = {\\r\\n    cursor?: string;\\r\\n    node: TNode;\\r\\n} | (Reference & {\\r\\n    cursor?: string;\\r\\n});\\r\\ndeclare type TPageInfo = {\\r\\n    hasPreviousPage: boolean;\\r\\n    hasNextPage: boolean;\\r\\n    startCursor: string;\\r\\n    endCursor: string;\\r\\n};\\r\\ndeclare type TExistingRelay<TNode> = Readonly<{\\r\\n    edges: TEdge<TNode>[];\\r\\n    pageInfo: TPageInfo;\\r\\n}>;\\r\\ndeclare type TIncomingRelay<TNode> = {\\r\\n    edges?: TEdge<TNode>[];\\r\\n    pageInfo?: TPageInfo;\\r\\n};\\r\\ndeclare type RelayFieldPolicy<TNode> = FieldPolicy<TExistingRelay<TNode>, TIncomingRelay<TNode>, TIncomingRelay<TNode>>;\\r\\nexport declare function relayStylePagination<TNode = Reference>(keyArgs?: KeyArgs): RelayFieldPolicy<TNode>;\\r\\nexport {};\\r\\n\",\"@apollo/client/utilities/testing/index.d.ts\":\"export { MockedProvider, MockedProviderProps } from './mocking/MockedProvider';\\r\\nexport { MockLink, mockSingleLink, MockedResponse } from './mocking/mockLink';\\r\\nexport { MockSubscriptionLink, mockObservableLink } from './mocking/mockSubscriptionLink';\\r\\nexport { createMockClient } from './mocking/mockClient';\\r\\nexport { stripSymbols } from './stripSymbols';\\r\\nexport { default as subscribeAndCount } from './subscribeAndCount';\\r\\nexport { itAsync } from './itAsync';\\r\\n\",\"@apollo/client/utilities/testing/itAsync.d.ts\":\"declare const wrappedIt: (message: string, callback: (resolve: (result?: any) => void, reject: (reason?: any) => void) => any, timeout?: number | undefined) => void;\\r\\nexport declare function itAsync(...args: Parameters<typeof wrappedIt>): any;\\r\\nexport declare namespace itAsync {\\r\\n    const only: (message: string, callback: (resolve: (result?: any) => void, reject: (reason?: any) => void) => any, timeout?: number | undefined) => void;\\r\\n    const skip: (message: string, callback: (resolve: (result?: any) => void, reject: (reason?: any) => void) => any, timeout?: number | undefined) => void;\\r\\n    const todo: (message: string, callback: (resolve: (result?: any) => void, reject: (reason?: any) => void) => any, timeout?: number | undefined) => void;\\r\\n}\\r\\nexport {};\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockClient.d.ts\":\"import { DocumentNode } from 'graphql';\\r\\nimport { ApolloClient } from '../../../core';\\r\\nimport { NormalizedCacheObject } from '../../../cache';\\r\\nexport declare function createMockClient<TData>(data: TData, query: DocumentNode, variables?: {}): ApolloClient<NormalizedCacheObject>;\\r\\n\",\"@apollo/client/utilities/testing/mocking/MockedProvider.d.ts\":\"import React from 'react';\\r\\nimport { ApolloClient, DefaultOptions } from '../../../core';\\r\\nimport { MockedResponse } from './mockLink';\\r\\nimport { ApolloLink } from '../../../link/core';\\r\\nimport { Resolvers } from '../../../core';\\r\\nimport { ApolloCache } from '../../../cache';\\r\\nexport interface MockedProviderProps<TSerializedCache = {}> {\\r\\n    mocks?: ReadonlyArray<MockedResponse>;\\r\\n    addTypename?: boolean;\\r\\n    defaultOptions?: DefaultOptions;\\r\\n    cache?: ApolloCache<TSerializedCache>;\\r\\n    resolvers?: Resolvers;\\r\\n    childProps?: object;\\r\\n    children?: React.ReactElement;\\r\\n    link?: ApolloLink;\\r\\n}\\r\\nexport interface MockedProviderState {\\r\\n    client: ApolloClient<any>;\\r\\n}\\r\\nexport declare class MockedProvider extends React.Component<MockedProviderProps, MockedProviderState> {\\r\\n    static defaultProps: MockedProviderProps;\\r\\n    constructor(props: MockedProviderProps);\\r\\n    render(): JSX.Element | null;\\r\\n    componentWillUnmount(): void;\\r\\n}\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockFetch.d.ts\":\"import 'whatwg-fetch';\\r\\nexport interface MockedIResponse {\\r\\n    ok: boolean;\\r\\n    status: number;\\r\\n    statusText?: string;\\r\\n    json(): Promise<Object>;\\r\\n}\\r\\nexport interface MockedFetchResponse {\\r\\n    url: string;\\r\\n    opts: RequestInit;\\r\\n    result: MockedIResponse;\\r\\n    delay?: number;\\r\\n}\\r\\nexport declare function createMockedIResponse(result: Object, options?: any): MockedIResponse;\\r\\nexport declare class MockFetch {\\r\\n    private mockedResponsesByKey;\\r\\n    constructor(...mockedResponses: MockedFetchResponse[]);\\r\\n    addMockedResponse(mockedResponse: MockedFetchResponse): void;\\r\\n    fetch(url: string, opts: RequestInit): Promise<unknown>;\\r\\n    fetchParamsToKey(url: string, opts: RequestInit): string;\\r\\n    getFetch(): any;\\r\\n}\\r\\nexport declare function createMockFetch(...mockedResponses: MockedFetchResponse[]): any;\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { ApolloLink, Operation, GraphQLRequest, FetchResult } from '../../../link/core';\\r\\nimport { Observable } from '../../../utilities';\\r\\nexport declare type ResultFunction<T> = () => T;\\r\\nexport interface MockedResponse<TData = Record<string, any>> {\\r\\n    request: GraphQLRequest;\\r\\n    result?: FetchResult<TData> | ResultFunction<FetchResult<TData>>;\\r\\n    error?: Error;\\r\\n    delay?: number;\\r\\n    newData?: ResultFunction<FetchResult>;\\r\\n}\\r\\nexport declare class MockLink extends ApolloLink {\\r\\n    operation: Operation;\\r\\n    addTypename: Boolean;\\r\\n    private mockedResponsesByKey;\\r\\n    constructor(mockedResponses: ReadonlyArray<MockedResponse>, addTypename?: Boolean);\\r\\n    addMockedResponse(mockedResponse: MockedResponse): void;\\r\\n    request(operation: Operation): Observable<FetchResult> | null;\\r\\n    private normalizeMockedResponse;\\r\\n}\\r\\nexport interface MockApolloLink extends ApolloLink {\\r\\n    operation?: Operation;\\r\\n}\\r\\nexport declare function mockSingleLink(...mockedResponses: Array<any>): MockApolloLink;\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockQueryManager.d.ts\":\"import { QueryManager } from '../../../core/QueryManager';\\r\\nimport { MockedResponse } from './mockLink';\\r\\ndeclare const _default: (reject: (reason: any) => any, ...mockedResponses: MockedResponse[]) => QueryManager<import(\\\"../../..\\\").NormalizedCacheObject>;\\r\\nexport default _default;\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockSubscriptionLink.d.ts\":\"/// <reference types=\\\"zen-observable\\\" />\\r\\nimport { Observable } from '../../../utilities';\\r\\nimport { ApolloLink, FetchResult, Operation } from '../../../link/core';\\r\\nexport interface MockedSubscription {\\r\\n    request: Operation;\\r\\n}\\r\\nexport interface MockedSubscriptionResult {\\r\\n    result?: FetchResult;\\r\\n    error?: Error;\\r\\n    delay?: number;\\r\\n}\\r\\nexport declare class MockSubscriptionLink extends ApolloLink {\\r\\n    unsubscribers: any[];\\r\\n    setups: any[];\\r\\n    operation: Operation;\\r\\n    private observers;\\r\\n    constructor();\\r\\n    request(operation: Operation): Observable<FetchResult<{\\r\\n        [key: string]: any;\\r\\n    }, Record<string, any>, Record<string, any>>>;\\r\\n    simulateResult(result: MockedSubscriptionResult, complete?: boolean): void;\\r\\n    simulateComplete(): void;\\r\\n    onSetup(listener: any): void;\\r\\n    onUnsubscribe(listener: any): void;\\r\\n}\\r\\nexport declare function mockObservableLink(): MockSubscriptionLink;\\r\\n\",\"@apollo/client/utilities/testing/mocking/mockWatchQuery.d.ts\":\"import { MockedResponse } from './mockLink';\\r\\nimport { ObservableQuery } from '../../../core/ObservableQuery';\\r\\ndeclare const _default: (reject: (reason: any) => any, ...mockedResponses: MockedResponse[]) => ObservableQuery<any>;\\r\\nexport default _default;\\r\\n\",\"@apollo/client/utilities/testing/observableToPromise.d.ts\":\"import { ObservableQuery } from '../../core/ObservableQuery';\\r\\nimport { ApolloQueryResult } from '../../core/types';\\r\\nimport { ObservableSubscription } from '../../utilities/observables/Observable';\\r\\nexport declare type Options = {\\r\\n    observable: ObservableQuery<any>;\\r\\n    shouldResolve?: boolean;\\r\\n    wait?: number;\\r\\n    errorCallbacks?: ((error: Error) => any)[];\\r\\n};\\r\\nexport declare type ResultCallback = ((result: ApolloQueryResult<any>) => any);\\r\\nexport declare function observableToPromiseAndSubscription({ observable, shouldResolve, wait, errorCallbacks }: Options, ...cbs: ResultCallback[]): {\\r\\n    promise: Promise<any[]>;\\r\\n    subscription: ObservableSubscription;\\r\\n};\\r\\nexport default function (options: Options, ...cbs: ResultCallback[]): Promise<any[]>;\\r\\n\",\"@apollo/client/utilities/testing/stripSymbols.d.ts\":\"export declare function stripSymbols<T>(data: T): T;\\r\\n\",\"@apollo/client/utilities/testing/subscribeAndCount.d.ts\":\"import { ObservableQuery } from '../../core/ObservableQuery';\\r\\nimport { ApolloQueryResult } from '../../core/types';\\r\\nimport { ObservableSubscription } from '../../utilities/observables/Observable';\\r\\nexport default function subscribeAndCount(reject: (reason: any) => any, observable: ObservableQuery<any>, cb: (handleCount: number, result: ApolloQueryResult<any>) => any): ObservableSubscription;\\r\\n\",\"@apollo/client/utilities/testing/wrap.d.ts\":\"declare const _default: <TArgs extends any[], TResult>(reject: (reason: any) => any, cb: (...args: TArgs) => TResult) => (...args: TArgs) => TResult | undefined;\\r\\nexport default _default;\\r\\nexport declare function withError(func: Function, regex: RegExp): any;\\r\\n\",\"@apollo/client/version.d.ts\":\"export declare const version = \\\"local\\\";\\r\\n\"}}")},580:function(e,n,t){"use strict";t.r(n);var o=t(35),r=t.n(o),a=t(322),i=t.n(a),l=(t(388),t(381)),c=t(191),s=t(23),p=t(155),d=t(20),u=t(234),m=t(13),f=t(194),y=t(328),x=t(142),b=t(372),R=t.n(b),C=t(373),g=t.n(C),T=t(374),P=t.n(T),h=t(375),v=t.n(h),S=t(45),k=["beforeMount","onChange"],E=["defs","defaultValue","libs","extraLibs","libCode"],L=function(e){var n=e.beforeMount,t=e.onChange,r=Object(u.a)(e,k),a=Object(o.useRef)(null);return Object(o.useEffect)((function(){null===n||void 0===n||n(x);var e=x.editor.create(a.current,Object(p.a)({automaticLayout:!0,minimap:{enabled:!1}},r));return e.onDidChangeModelContent((function(n){null===t||void 0===t||t(e.getValue(),n)})),function(){e.dispose()}}),[]),Object(S.jsx)(S.Fragment,{children:Object(S.jsx)("div",{style:{height:"100%",width:"100%"},ref:a})})};L.TypeScript=Object(o.forwardRef)((function(e,n){var t=e.defs,r=void 0===t?"":t,a=e.defaultValue,i=void 0===a?"":a,l=e.libs,c=void 0===l?{}:l,s=e.extraLibs,m=void 0===s?{}:s,f=(e.libCode,Object(u.a)(e,E)),y=Object(o.useRef)(),b=Object(o.useRef)();if(!y.current){var C=x.Uri.file("/main.tsx"),T=x.editor.getModel(C);!T||null!==T&&void 0!==T&&T.isDisposed()?y.current=x.editor.createModel(i,"typescript",C):y.current=T}Object(o.useImperativeHandle)(n,(function(){return{model:y.current,monaco:b.current}})),Object(o.useEffect)((function(){return function(){var e;null===(e=y.current)||void 0===e||e.dispose()}}),[]);var h=function(){x.languages.typescript.typescriptDefaults.addExtraLib(r,"file:///node_modules/@types/index.d.ts"),Object.entries(c).map((function(e){var n=Object(d.a)(e,2),t=n[0],o=n[1];x.languages.typescript.typescriptDefaults.addExtraLib(o,"file:///node_modules/@types/".concat(t,"/index.d.ts"))})),Object.entries(m).map((function(e){var n=Object(d.a)(e,2),t=n[0],o=n[1];x.languages.typescript.typescriptDefaults.addExtraLib(o,"file:///node_modules/@types/".concat(t))}))};return Object(o.useEffect)((function(){var e,n;return h(),null===(e=f.onChange)||void 0===e||e.call(f,null===(n=y.current)||void 0===n?void 0:n.getValue()),function(){}}),[c]),Object(S.jsx)(L,Object(p.a)({model:y.current,didMount:function(){},beforeMount:function(e){b.current=e;var n={baseUrl:"file:///node_modules/@types/",allowSyntheticDefaultImports:!0,jsx:e.languages.typescript.JsxEmit.React,experimentalDecorators:!0,noEmit:!0,allowJs:!0,types:["react"]};e.languages.typescript.typescriptDefaults.setCompilerOptions(n),e.languages.typescript.typescriptDefaults.setEagerModelSync(!0);var t={provideDocumentFormattingEdits:function(e){return[{range:e.getFullModelRange(),text:R.a.format(e.getValue(),{trailingComma:"all",jsxSingleQuote:!1,semi:!0,plugins:[g.a,v.a,P.a],parser:"babel-ts",arrowParens:"always",bracketSpacing:!0,htmlWhitespaceSensitivity:"css",insertPragma:!1,jsxBracketSameLine:!0,printWidth:80,proseWrap:"preserve",quoteProps:"as-needed",requirePragma:!1,singleQuote:!1,tabWidth:2,useTabs:!1,vueIndentScriptAndStyle:!1})}]}};e.languages.registerDocumentFormattingEditProvider("typescript",t),e.languages.registerCompletionItemProvider("typescript",{provideCompletionItems:function(n,t){var o=n.getWordUntilPosition(t),r={startLineNumber:t.lineNumber,endLineNumber:t.lineNumber,startColumn:o.startColumn,endColumn:o.endColumn};return{suggestions:[{label:"log",kind:e.languages.CompletionItemKind.Function,documentation:"console.log",insertText:"console.log($1)",insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:r},{label:"error",kind:e.languages.CompletionItemKind.Function,documentation:"console.error",insertText:"console.error($1)",insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:r},{label:"stringify",kind:e.languages.CompletionItemKind.Function,documentation:"console.log",insertText:"console.log(JSON.stringify($1,null,2))",insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:r},{label:"for",kind:e.languages.CompletionItemKind.Function,documentation:"for circle",insertText:"for(let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++){\n  let ${3:element} = ${2:array}[${1:index}]\n}",insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:r},{label:"while",kind:e.languages.CompletionItemKind.Function,documentation:"while circle",insertText:"while(${1:condition}){\n \n}",insertTextRules:e.languages.CompletionItemInsertTextRule.InsertAsSnippet,range:r}]}}}),h()},scrollbar:{}},f))}));var w=L,N=t(376),I=t.n(N),D=(t(473),t(221)),M=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return n.forEach((function(n){var r=n.messageText,a=n.category;if("string"===typeof r&&a===t)o.push(r);else{o.push(r.messageText);var i=r.next;i&&e(i,t,o)}})),o},O=t(377),F=t(378);function A(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),r=[],a=0;if(t=t||o.length,n)for(a=0;a<n;a++)r[a]=o[0|Math.random()*t];else for(r[8]=r[13]=r[18]=r[23]="-",r[14]="4",a=0;a<36;a++)r[a]||(e=0|16*Math.random(),r[a]=o[19===a?3&e|8:e]);return r.join("")}var V=t(324),_=t.n(V),B=t(216),H=function(e){Object.assign({},(Object(B.a)(e),e));return Object(S.jsx)(S.Fragment,{children:Object(S.jsx)("div",{style:{margin:"0 0 8px 0",border:"1px solid #999"}})})},z=t(271),K=t.n(z),U=t(379),G=t.n(U);D.registerPlugin("maxium-count",(function(){var e=function(e){var n=A(),t=K.a.ast("".concat(n,"++")),o=K.a.ast("\n        if(".concat(n,'>999){\n          document.body.innerHTML=`<pre id="root" style="color:red;font-weight:bold" >\n  ').concat(G()(e.node).code,"\n  \u8d85\u51fa\u6700\u5927\u5faa\u73af\u9650\u5236(max:999)\n          </pre>`;\n        \n          throw new Error('\u8d85\u51fa\u6700\u5927\u5faa\u73af\u9650\u5236')\n        }\n      ")),r=e.node.body.body;r.unshift(o),r.unshift(t);var a=K.a.ast("let ".concat(n,"=0")),i=e.parent.body||e.parent.consequent;if(i)for(var l=0;l<i.length;l++){if(i[l]===e.node){i.splice(l,0,a);break}}};return{visitor:{WhileStatement:e,DoWhileStatement:e,ForInStatement:e,ForOfStatement:e,ForStatement:e}}}));var j=t(326),Q=t.n(j),W=["scripts","code","styles","extraLibs","preExecute","onChange","pageDefaultSize","wrapperFunction"];Q.a.SourceMapConsumer.initialize({"lib/mappings.wasm":"https://unpkg.com/source-map@0.7.3/lib/mappings.wasm"});var q={sourceMap:!0,filename:"main.tsx",presets:["typescript","react"],plugins:["proposal-do-expressions","proposal-optional-chaining",["proposal-pipeline-operator",{proposal:"minimal"}],["proposal-decorators",{legacy:!0}],["proposal-class-properties",{loose:!0}]]},J=function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",fetch(n).then((function(e){return e.text()})));case 1:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),X=function(e){var n=e.scripts,t=void 0===n?[]:n,a=e.code,i=void 0===a?"":a,l=e.styles,c=void 0===l?[]:l,b=e.extraLibs,R=e.preExecute,C=void 0===R?"":R,g=e.onChange,T=e.pageDefaultSize,P=void 0===T?"80%":T,h=(e.wrapperFunction,Object(u.a)(e,W)),v=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16;return Object(o.useRef)(A(e,n)).current}(),k="sb_".concat(v),E="\nwindow.onerror=function(message, source, line, column, error){\n  console.error(error)\n  window.parent[`dispatch_".concat(k,'_file`]({eventId:"').concat(v,'",type:"error",data:{message, source, line, column, error}})\n}\nwindow.console.log=null\nwindow.console.log=function(...data){\n  window.parent[`dispatch_').concat(k,'_console`]({eventId:"').concat(v,'",type:"log",data})\n}\nwindow.console.error=null\nwindow.console.error=function(...data){\n  window.parent[`dispatch_').concat(k,'_console`]({eventId:"').concat(v,'",type:"error",data})\n}\n;\n  '),L=Object(o.useState)([]),N=Object(d.a)(L,2),V=N[0],B=N[1],z=Object(o.useState)(),K=Object(d.a)(z,2),U=K[0],G=K[1],j=Object(o.useState)(!0),X=Object(d.a)(j,2),Z=X[0],Y=X[1],$=Object(o.useState)(t),ee=Object(d.a)($,2),ne=ee[0],te=ee[1],oe=Object(o.useState)(c),re=Object(d.a)(oe,2),ae=re[0],ie=re[1],le=Object(o.useState)(),ce=Object(d.a)(le,2),se=ce[0],pe=ce[1],de=Object(o.useRef)(""),ue=Object(o.useRef)(""),me=Object(o.useRef)(),fe=Object(o.useMemo)((function(){return Object.fromEntries(ne.map((function(e){return[e.name,e.typeCode]})).filter(Boolean))}),[ne]),ye=Object(o.useCallback)(function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){var t,o,r,a,i,l,c,d,u,f,y,b,R,T,P,h,S,L,w;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,B((function(){return[]})),x.editor.setModelMarkers(Te.current.model,"???",[]),e.next=5,x.languages.typescript.getTypeScriptWorker();case 5:return r=e.sent,e.next=8,r();case 8:return a=e.sent,e.next=11,a.getSemanticDiagnostics(x.Uri.file("/main.tsx").toString());case 11:if(i=e.sent.filter((function(e){return 1===e.category})),!((l=M(i)).length>0)){e.next=16;break}throw c=l.join("\n"),new Error(c);case 16:if(null===g||void 0===g||g(n),d=D.transform("".concat(n),Object(p.a)(Object(p.a)({},q),{},{presets:[].concat(Object(s.a)(q.presets),["es2015"]),plugins:["maxium-count"].concat(Object(s.a)(q.plugins),["transform-modules-systemjs"])})),console.log("babelCompiled",d),u="\n        ".concat(d.code,"\n     "),f=null===(t=ge.current)||void 0===t||null===(o=t.contentWindow)||void 0===o?void 0:o.document){e.next=23;break}return e.abrupt("return");case 23:y=new Blob([u],{type:"text/javascript"}),b=URL.createObjectURL(y),G((function(){return{rawSourceMap:d.map,url:b}})),null!==f&&void 0!==f&&f.children[0]&&f.removeChild(f.children[0]),f.appendChild(f.createElement("html")),f.documentElement.innerHTML='\n        <head>\n          <style type="text/css">'.concat(ue.current,'</style>\n          <script type="systemjs-importmap">\n           ').concat(JSON.stringify({imports:me.current}),'\n          <\/script>\n        </head>\n        <body>\n          <div id="root">\n          </div>\n        </body>\n        '),(R=f.createElement("script")).type="text/javascript",R.innerHTML=D.transform(E,q).code,f.documentElement.appendChild(R),(T=f.createElement("script")).type="text/javascript",T.innerHTML=D.transform("".concat(C),Object(p.a)(Object(p.a)({},q),{},{presets:[].concat(Object(s.a)(q.presets),["es2015"]),plugins:Object(s.a)(q.plugins)})).code,f.documentElement.appendChild(T),(P=f.createElement("script")).type="text/javascript",P.innerHTML=de.current,f.documentElement.appendChild(P),(h=f.createElement("script")).type="text/javascript",h.innerHTML='\n         System.import("'.concat(b,'");\n         System.onload=function(error, source, deps, isErrSource){\n          //  debugger\n           if(error){\n              console.error(error);\n              window.parent[`dispatch_').concat(k,'_file`]({eventId:"').concat(v,'",type:"error",data:{source, error}})\n           }\n           \n         }\n        '),f.documentElement.appendChild(h),e.next=56;break;case 48:if(e.prev=48,e.t0=e.catch(0),w=null===(S=ge.current)||void 0===S||null===(L=S.contentWindow)||void 0===L?void 0:L.document){e.next=53;break}return e.abrupt("return");case 53:w.children[0]&&w.removeChild(w.children[0]),w.appendChild(w.createElement("html")),w.documentElement.innerHTML='\n        <head>\n          <style type="text/css">\n            #root{\n              color:red;\n              font-weight:bold;\n            }\n          </style>\n        </head>\n        <body>\n          <pre id="root" >'.concat(e.t0,"</pre>\n        </body>\n        ");case 56:return e.prev=56,e.finish(56);case 58:case"end":return e.stop()}}),e,null,[[0,48,56,58]])})));return function(n){return e.apply(this,arguments)}}(),[]),xe=Object(o.useCallback)((function(e){var n=e.detail;B((function(e){return[].concat(Object(s.a)(e),[n])}))}),[]),be=Object(o.useCallback)(function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){var t,o,r,a,i,l,c,s,p,d,u,f;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("error"!==n.detail.type||U.url!==n.detail.data.source){e.next=31;break}if(t=n.detail.data,o=t.line,r=t.column,a=t.error,void 0!==o||void 0!==r||!a){e.next=23;break}i=a.stack,l=U.url,c=i.indexOf(l+":"),o="",r="",s=!0,p=c+l.length+1;case 10:if(!(p<i.length)){e.next=21;break}if(")"!==(d=i[p])){e.next=14;break}return e.abrupt("break",21);case 14:if(":"!==d){e.next=17;break}return s=!1,e.abrupt("continue",18);case 17:s?o+=d:r+=d;case 18:p++,e.next=10;break;case 21:o=Number(o),r=Number(r);case 23:return o--,r--,e.next=27,new Q.a.SourceMapConsumer(U.rawSourceMap);case 27:u=e.sent,f=u.originalPositionFor({line:o,column:r}),u.destroy(),x.editor.setModelMarkers(Te.current.model,"???",[{startColumn:f.column,endColumn:f.column,startLineNumber:f.line,endLineNumber:f.line,severity:8,message:a.message}]);case 31:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}(),[U]),Re=Object(o.useCallback)((function(e){var n=new CustomEvent("".concat(k,"_console"),{detail:e});window.dispatchEvent(n)}),[k]),Ce=Object(o.useCallback)((function(e){var n=new CustomEvent("".concat(k,"_file"),{detail:e});window.dispatchEvent(n)}),[k]);Object(o.useEffect)((function(){return window["dispatch_".concat(k,"_console")]=Re,window["dispatch_".concat(k,"_file")]=Ce,window.addEventListener("".concat(k,"_console"),xe),window.addEventListener("".concat(k,"_file"),be),function(){window.removeEventListener("".concat(k,"_console"),xe),window.removeEventListener("".concat(k,"_file"),be)}}),[Re,Ce,k,xe,be]),Object(o.useEffect)((function(){Object(f.a)(Object(m.a)().mark((function e(){var n,t,o;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=[{name:"systemjs",src:"https://unpkg.com/systemjs/dist/system.min.js",code:"try{".concat(O.a,"}catch(e){}")},{name:"systemjs-extra-amd",src:"https://unpkg.com/systemjs/dist/extras/amd.min.js",code:F.a}],e.next=4,Promise.all(ne.map(function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){var t,o;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,J(n.src);case 2:if(t=e.sent,n.code=t,!n.types){e.next=9;break}return e.next=7,Promise.all(n.types.map(function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,J(n);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()));case 7:o=e.sent,n.typeCode=o.join(";");case 9:return e.abrupt("return",n);case 10:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()));case 4:return t=e.sent,e.next=7,Promise.all(ae.map(function(){var e=Object(f.a)(Object(m.a)().mark((function e(n){var t;return Object(m.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,J(n.href);case 2:return t=e.sent,n.code=t,e.abrupt("return",n);case 5:case"end":return e.stop()}}),e)})));return function(n){return e.apply(this,arguments)}}()));case 7:o=e.sent,me.current=Object.fromEntries(t.map((function(e){return[e.name,URL.createObjectURL(new Blob([e.code||""],{type:"text/javascript"}))]}))),ue.current=o.map((function(e){return e.code})).join(""),te(Object(s.a)(t)),ie(Object(s.a)(o)),de.current=n.map((function(e){return e.code})).join(";");case 13:return e.prev=13,Y(!1),e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[0,,13,16]])})))()}),[]);var ge=Object(o.useRef)(null),Te=Object(o.useRef)(null),Pe=Object(o.useRef)(null),he=Object(o.useState)(9999),ve=Object(d.a)(he,2),Se=ve[0],ke=ve[1],Ee=Object(o.useState)(9999),Le=Object(d.a)(Ee,2),we=Le[0],Ne=Le[1],Ie=Object(o.useCallback)((function(){ke(Pe.current.clientWidth-16),Ne(Pe.current.clientHeight-16)}),[]),De=Object(o.useState)(0),Me=Object(d.a)(De,2),Oe=Me[0],Fe=Me[1],Ae=function(e){Fe(e-16)};return Object(o.useEffect)((function(){var e=0;return"string"===typeof P?P.includes("%")&&(e=Pe.current.clientHeight*(1-parseFloat(P.replace("%",""))/100)):"number"===typeof P&&(e=Pe.current.clientHeight-P),Ae(e),Ie(),window.addEventListener("resize",Ie),function(){return window.removeEventListener("resize",Ie)}}),[Ie,P]),Object(S.jsx)(S.Fragment,{children:Object(S.jsx)("div",{className:"sand-box",ref:Pe,style:{background:"#fff",height:"100vh"},children:Object(S.jsxs)(y.a,{onDragStarted:function(){return pe(!0)},onDragFinished:function(){return pe(!1)},pane1Style:{position:"relative"},pane2Style:{position:"relative"},split:"vertical",defaultSize:"50%",minSize:0,maxSize:Se,children:[Object(S.jsx)("div",{style:{height:"100%"},children:!Z&&Object(S.jsx)(w.TypeScript,Object(p.a)({ref:Te,defaultValue:i,libs:fe,extraLibs:b,onChange:I()(ye,800)},h))},"code"),Object(S.jsxs)(y.a,{onChange:function(e){Ae(Pe.current.clientHeight-e)},onDragStarted:function(){return pe(!0)},onDragFinished:function(){return pe(!1)},pane1Style:{position:"relative"},split:"horizontal",defaultSize:P,maxSize:we,minSize:0,children:[Object(S.jsx)("div",{style:{width:"100%"},children:!Z&&Object(S.jsx)("iframe",{style:{height:"100%",width:"100%",pointerEvents:se?"none":"initial"},title:"sb-preview",ref:ge})},"preview"),Object(S.jsx)("div",{style:{height:Oe,overflow:"auto",padding:8,boxSizing:"border-box"},children:V.filter((function(e){return e.data.length>0})).map((function(e,n){return Object(S.jsxs)(r.a.Fragment,{children:[e.data.map((function(n,t){return Object(S.jsxs)("div",{style:{paddingBottom:8},children:["string"===typeof n&&"error"===e.type&&n&&Object(S.jsx)("pre",{style:{color:"red"},children:n}),"object"===typeof n&&"log"===e.type&&n&&Object(S.jsx)(_.a,{style:{position:"static"},collapsed:!0,name:null,src:n},"msg".concat(t)),"object"===typeof n&&"error"===e.type&&n&&Object(S.jsx)(_.a,{style:{position:"static"},collapsed:!1,name:"Error",src:{message:n.message,stack:n.stack}},"msg".concat(t)),null===n&&Object(S.jsx)("span",{style:{color:"purple"},children:"null"}),("number"===typeof n||"string"===typeof n)&&"log"===e.type&&Object(S.jsx)("pre",{children:n}),"symbol"===typeof n&&Object(S.jsx)("span",{style:{color:"red"},children:n.toString()}),"function"===typeof n&&Object(S.jsx)("span",{style:{color:"gray"},children:n.toString()}),"undefined"===typeof n&&Object(S.jsx)("span",{style:{color:"#d3d3d3"},children:"undefined"}),"boolean"===typeof n&&Object(S.jsx)("span",{style:{color:"blue"},children:n.toString()})]},"msg".concat(t))})),n!==V.length-1&&Object(S.jsx)(H,{})]},"msg".concat(n))}))},"console")]})]})})})},Z="4.12.0",Y=function(){return Object(S.jsx)(X,{styles:[{href:"https://unpkg.com/antd@".concat(Z,"/dist/antd.min.css")}],code:'import React, { FC, useState } from "react";\nimport ReactDOM from "react-dom";\nimport { Input, Typography } from "antd";\nconst { Title, Paragraph, Text, Link } = Typography;\nconst blockContent = `AntV \u662f\u8682\u8681\u91d1\u670d\u5168\u65b0\u4e00\u4ee3\u6570\u636e\u53ef\u89c6\u5316\u89e3\u51b3\u65b9\u6848\uff0c\u81f4\u529b\u4e8e\u63d0\u4f9b\u4e00\u5957\u7b80\u5355\u65b9\u4fbf\u3001\u4e13\u4e1a\u53ef\u9760\u3001\u4e0d\u9650\u53ef\u80fd\u7684\u6570\u636e\u53ef\u89c6\u5316\u6700\u4f73\u5b9e\u8df5\u3002\u5f97\u76ca\u4e8e\u4e30\u5bcc\u7684\u4e1a\u52a1\u573a\u666f\u548c\u7528\u6237\u9700\u6c42\u6311\u6218\uff0cAntV \u7ecf\u5386\u591a\u5e74\u79ef\u7d2f\u4e0e\u4e0d\u65ad\u6253\u78e8\uff0c\u5df2\u652f\u6491\u6574\u4e2a\u963f\u91cc\u96c6\u56e2\u5185\u5916 20000+ \u4e1a\u52a1\u7cfb\u7edf\uff0c\u901a\u8fc7\u4e86\u65e5\u5747\u5343\u4e07\u7ea7 UV \u4ea7\u54c1\u7684\u4e25\u82db\u8003\u9a8c\u3002\n\u6211\u4eec\u6b63\u5728\u57fa\u7840\u56fe\u8868\uff0c\u56fe\u5206\u6790\uff0c\u56fe\u7f16\u8f91\uff0c\u5730\u7406\u7a7a\u95f4\u53ef\u89c6\u5316\uff0c\u667a\u80fd\u53ef\u89c6\u5316\u7b49\u5404\u4e2a\u53ef\u89c6\u5316\u7684\u9886\u57df\u8015\u8018\uff0c\u6b22\u8fce\u540c\u8def\u4eba\u4e00\u8d77\u524d\u884c\u3002`;\ninterface ContentProps {}\nconsole.log(React)\nconst Content: FC<ContentProps> = () => {\n  const [value,setValue]=useState<string>(\'\u53d7\u63a7\u8f93\u5165\u7ec4\u4ef6\');\n  return (\n    <Typography style={{ padding: 10 }}>\n      <Title>\u4ecb\u7ecd</Title>\n      <Paragraph>\n        \u8682\u8681\u7684\u4f01\u4e1a\u7ea7\u4ea7\u54c1\u662f\u4e00\u4e2a\u5e9e\u5927\u4e14\u590d\u6742\u7684\u4f53\u7cfb\u3002\u8fd9\u7c7b\u4ea7\u54c1\u4e0d\u4ec5\u91cf\u7ea7\u5de8\u5927\u4e14\u529f\u80fd\u590d\u6742\uff0c\u800c\u4e14\u53d8\u52a8\u548c\u5e76\u53d1\u9891\u7e41\uff0c\u5e38\u5e38\u9700\u8981\u8bbe\u8ba1\u4e0e\u5f00\u53d1\u80fd\u591f\u5feb\u901f\u7684\u505a\u51fa\u54cd\u5e94\u3002\u540c\u65f6\u8fd9\u7c7b\u4ea7\u54c1\u4e2d\u6709\u5b58\u5728\u5f88\u591a\u7c7b\u4f3c\u7684\u9875\u9762\u4ee5\u53ca\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u62bd\u8c61\u5f97\u5230\u4e00\u4e9b\u7a33\u5b9a\u4e14\u9ad8\u590d\u7528\u6027\u7684\u5185\u5bb9\u3002\n      </Paragraph>\n      <Paragraph>\n        \u968f\u7740\u5546\u4e1a\u5316\u7684\u8d8b\u52bf\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u4f01\u4e1a\u7ea7\u4ea7\u54c1\u5bf9\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u6709\u4e86\u8fdb\u4e00\u6b65\u7684\u8981\u6c42\u3002\u5e26\u7740\u8fd9\u6837\u7684\u4e00\u4e2a\u7ec8\u6781\u76ee\u6807\uff0c\u6211\u4eec\uff08\u8682\u8681\u91d1\u670d\u4f53\u9a8c\u6280\u672f\u90e8\uff09\u7ecf\u8fc7\u5927\u91cf\u7684\u9879\u76ee\u5b9e\u8df5\u548c\u603b\u7ed3\uff0c\u9010\u6b65\u6253\u78e8\u51fa\u4e00\u4e2a\u670d\u52a1\u4e8e\u4f01\u4e1a\u7ea7\u4ea7\u54c1\u7684\u8bbe\u8ba1\u4f53\u7cfb\n        Ant Design\u3002\u57fa\u4e8e<Text mark>\u300e\u786e\u5b9a\u300f\u548c\u300e\u81ea\u7136\u300f</Text>\n        \u7684\u8bbe\u8ba1\u4ef7\u503c\u89c2\uff0c\u901a\u8fc7\u6a21\u5757\u5316\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u964d\u4f4e\u5197\u4f59\u7684\u751f\u4ea7\u6210\u672c\uff0c\u8ba9\u8bbe\u8ba1\u8005\u4e13\u6ce8\u4e8e\n        <Text strong>\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c</Text>\u3002\n      </Paragraph>\n      <Title level={2}>\u8bbe\u8ba1\u8d44\u6e90</Title>\n      <Paragraph>\n        \u6211\u4eec\u63d0\u4f9b\u5b8c\u5584\u7684\u8bbe\u8ba1\u539f\u5219\u3001\u6700\u4f73\u5b9e\u8df5\u548c\u8bbe\u8ba1\u8d44\u6e90\u6587\u4ef6\uff08\n        <Text code>Sketch</Text> \u548c<Text code>Axure</Text>\n        \uff09\uff0c\u6765\u5e2e\u52a9\u4e1a\u52a1\u5feb\u901f\u8bbe\u8ba1\u51fa\u9ad8\u8d28\u91cf\u7684\u4ea7\u54c1\u539f\u578b\u3002\n      </Paragraph>\n\n      <Paragraph>\n        <ul>\n          <li>\n            <Link href="#">\u8bbe\u8ba1\u539f\u5219</Link>\n          </li>\n          <li>\n            <Link href="#">\u8bbe\u8ba1\u6a21\u5f0f</Link>\n          </li>\n          <li>\n            <Link href="#">\u8bbe\u8ba1\u8d44\u6e90</Link>\n          </li>\n        </ul>\n      </Paragraph>\n\n      <Paragraph>\n        <blockquote>{blockContent}</blockquote>\n        <pre>{blockContent}</pre>\n      </Paragraph>\n\n      <Paragraph>\n        \u6309<Text keyboard>Esc</Text>\u952e\u9000\u51fa\u9605\u8bfb\u2026\u2026\n      </Paragraph>\n      <Input value={value} onChange={e=>setValue(e.target.value)}/>\n    </Typography>\n  );\n};\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Content />\n      </>\n    );\n  }\n}\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById("root"),\n);\n',extraLibs:t(573).types,scripts:[{name:"react",src:"https://unpkg.com/react@17/umd/react.development.js",types:["https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/v17/index.d.ts","https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/v17/global.d.ts"]},{name:"react-dom",src:"https://unpkg.com/react-dom@17/umd/react-dom.development.js",types:["https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react-dom/v17/index.d.ts"]},{name:"moment",src:"https://unpkg.com/moment"},{name:"antd",src:"https://unpkg.com/antd@".concat(Z)}]})},$=function(e){Object.assign({},(Object(B.a)(e),e));var n=Object(o.useState)(localStorage.getItem("leetcode")||""),t=Object(d.a)(n,2),r=t[0];t[1];return Object(S.jsx)(S.Fragment,{children:Object(S.jsx)(X,{pageDefaultSize:0,code:r||'/**\n * \u5185\u7f6e\n * \u5355\u94fe\u8868ListNode\n * \u4e8c\u53c9\u6811TreeNode\n * \u4e8c\u53c9\u6811\u5e7f\u5ea6\u4f18\u5148\u53cd\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316serializeWidely,deserializeWidely\n * execute\u65b9\u6cd5\uff0c\u5c06\u7ed3\u679c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\n * \u6a21\u62dfleetcode\u7ec3\u4e60\n */\nexecute(1, "string", {}, new ListNode(), new TreeNode());',onChange:function(e){localStorage.setItem("leetcode",e)},defs:"//\u4e8c\u53c9\u6811\nclass TreeNode {\n    val: number\n    left: TreeNode | null\n    right: TreeNode | null\n    constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n        this.val = (val===undefined ? 0 : val)\n        this.left = (left===undefined ? null : left)\n        this.right = (right===undefined ? null : right)\n    }\n}\n//\u5355\u94fe\u8868\nclass ListNode {\n     val: number\n     next: ListNode | null\n     constructor(val?: number, next?: ListNode | null) {\n         this.val = (val===undefined ? 0 : val)\n         this.next = (next===undefined ? null : next)\n     }\n }\n//\u6267\u884c\u7ed3\u679c\u8f93\u5165\u5230\u53f3\u4fa7\u63a7\u5236\u53f0\nfunction execute(...rest):void;\n//\u4e8c\u53c9\u6811\u5e7f\u5ea6\u4f18\u5148\u5e8f\u5217\u5316\nfunction serializeWidely(root: TreeNode | null): string \n//\u4e8c\u53c9\u6811\u5e7f\u5ea6\u4f18\u5148\u53cd\u5e8f\u5217\u5316\nfunction deserializeWidely(data: string): TreeNode | null \n ",preExecute:"//\u4e8c\u53c9\u6811\nclass TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n//\u5355\u94fe\u8868\nclass ListNode {\n  val: number;\n  next: ListNode | null;\n  constructor(val?: number, next?: ListNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.next = next === undefined ? null : next;\n  }\n}\nfunction serializeHelper(root: TreeNode | null, result: any[], queue: any[]) {\n  if (!root) {\n    queue.push(null);\n  }\n}\nfunction serializeWidely(root: TreeNode | null): string {\n  if (!root) {\n    return JSON.stringify([null]);\n  }\n  let result = [];\n  let queue = [root];\n  while (queue.length > 0) {\n    const node = queue.shift();\n    if (node) {\n      result.push(node.val);\n      queue.push(node.left, node.right);\n    } else {\n      result.push(null);\n    }\n  }\n  return JSON.stringify(result);\n}\nfunction deserializeWidely(data: string): TreeNode | null {\n  const nodes = JSON.parse(data);\n  const node = nodes.shift();\n  if (node===null) {\n    return null;\n  }\n  const root = new TreeNode(node);\n  let queue = [root];\n  while (queue.length > 0) {\n    const node = queue.shift();\n    const leftVal = nodes.shift();\n    const rightVal = nodes.shift();\n    if (leftVal !== null && leftVal !== undefined) {\n      const leftNode = new TreeNode(leftVal);\n      node.left = leftNode;\n      queue.push(leftNode);\n    }\n    if (rightVal !== null && rightVal !== undefined) {\n      const rightNode = new TreeNode(rightVal);\n      node.right = rightNode;\n      queue.push(rightNode);\n    }\n    // break;\n  }\n  return root;\n}\nfunction execute (...rest) {\n  console.log(...rest)\n};\n"})})},ee=function(e){Object.assign({},(Object(B.a)(e),e));return Object(S.jsx)(S.Fragment,{children:Object(S.jsx)(X,{pageDefaultSize:0,code:"console.log(1);\nvar b = new ListNode(1);\nb.next;\nb.next.next;",defs:"//\u4e8c\u53c9\u6811\nclass TreeNode {\n    val: number\n    left: TreeNode | null\n    right: TreeNode | null\n    constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n        this.val = (val===undefined ? 0 : val)\n        this.left = (left===undefined ? null : left)\n        this.right = (right===undefined ? null : right)\n    }\n}\n//\u5355\u94fe\u8868\nclass ListNode {\n     val: number\n     next: ListNode | null\n     constructor(val?: number, next?: ListNode | null) {\n         this.val = (val===undefined ? 0 : val)\n         this.next = (next===undefined ? null : next)\n     }\n }\n//\u6267\u884c\u7ed3\u679c\u8f93\u5165\u5230\u53f3\u4fa7\u63a7\u5236\u53f0\nfunction execute(...rest):void;\n//\u4e8c\u53c9\u6811\u5e7f\u5ea6\u4f18\u5148\u5e8f\u5217\u5316\nfunction serializeWidely(root: TreeNode | null): string \n//\u4e8c\u53c9\u6811\u5e7f\u5ea6\u4f18\u5148\u53cd\u5e8f\u5217\u5316\nfunction deserializeWidely(data: string): TreeNode | null \n ",preExecute:"//\u4e8c\u53c9\u6811\nclass TreeNode {\n  val: number;\n  left: TreeNode | null;\n  right: TreeNode | null;\n  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.left = left === undefined ? null : left;\n    this.right = right === undefined ? null : right;\n  }\n}\n//\u5355\u94fe\u8868\nclass ListNode {\n  val: number;\n  next: ListNode | null;\n  constructor(val?: number, next?: ListNode | null) {\n    this.val = val === undefined ? 0 : val;\n    this.next = next === undefined ? null : next;\n  }\n}\nfunction serializeHelper(root: TreeNode | null, result: any[], queue: any[]) {\n  if (!root) {\n    queue.push(null);\n  }\n}\nfunction serializeWidely(root: TreeNode | null): string {\n  if (!root) {\n    return JSON.stringify([null]);\n  }\n  let result = [];\n  let queue = [root];\n  while (queue.length > 0) {\n    const node = queue.shift();\n    if (node) {\n      result.push(node.val);\n      queue.push(node.left, node.right);\n    } else {\n      result.push(null);\n    }\n  }\n  return JSON.stringify(result);\n}\nfunction deserializeWidely(data: string): TreeNode | null {\n  const nodes = JSON.parse(data);\n  const node = nodes.shift();\n  if (node===null) {\n    return null;\n  }\n  const root = new TreeNode(node);\n  let queue = [root];\n  while (queue.length > 0) {\n    const node = queue.shift();\n    const leftVal = nodes.shift();\n    const rightVal = nodes.shift();\n    if (leftVal !== null && leftVal !== undefined) {\n      const leftNode = new TreeNode(leftVal);\n      node.left = leftNode;\n      queue.push(leftNode);\n    }\n    if (rightVal !== null && rightVal !== undefined) {\n      const rightNode = new TreeNode(rightVal);\n      node.right = rightNode;\n      queue.push(rightNode);\n    }\n    // break;\n  }\n  return root;\n}\nfunction execute (...rest) {\n  console.log(...rest)\n};\n"})})},ne="4.12.0",te=function(){return Object(S.jsx)(X,{preExecute:'\n      var demoJson = {\n        family: [\n          {\n            name: "\u5f20\u4e09\u5bb6",\n            address: ["\u5f20\u5bb6\u754c", "\u6885\u6cb3\u53e3"],\n            poor: false,\n            people: [\n              { name: "\u5f20\u4e09", age: 10 },\n              { name: "\u674e\u56db", age: 20 },\n            ],\n            asset: {\n              house: [{ name: "\u4e07\u79d1" }, { name: "\u6052\u5927" }],\n              car: [{ brand: "benz" }, { brand: "bmw" }],\n            },\n          },\n          {\n            name: "\u6211\u5bb6",\n            address: ["\u957f\u6625"],\n            poor: true,\n            people: [{ name: "\u6211", age: 28 }],\n            asset: {\n              car: [{ brand: "byd" }],\n            },\n          },\n        ],\n      };\n      console.log(demoJson)\n      ',styles:[{href:"https://unpkg.com/antd@".concat(ne,"/dist/antd.min.css")}],code:'import React, { FC } from "react";\nimport ReactDOM from "react-dom";\nimport { Skeleton, Typography } from "antd";\nimport {\n  gql,\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n} from "@apollo/client";\nconst query = gql`\n  \n`;\nconst { Paragraph } = Typography;\nconst client = new ApolloClient({\n  uri: "http://localhost:8081/v1/graphql",\n  cache: new InMemoryCache({ addTypename: false }),\n  headers: {\n    "x-hasura-admin-secret": "myadminsecretkey",\n  },\n  defaultOptions: {\n    query: {\n      fetchPolicy: "network-only",\n    },\n  },\n});\nconst Content: FC = () => {\n  const { data, loading, error } = useQuery(query);\n  return (\n    <Skeleton active loading={loading}>\n      <Paragraph style={{ padding: 10 }}>\n        <pre>{JSON.stringify(data || error, null, 2)}</pre>\n      </Paragraph>\n    </Skeleton>\n  );\n};\nclass App extends React.Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Content />\n      </ApolloProvider>\n    );\n  }\n}\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById("root"),\n);\n',extraLibs:Object(p.a)(Object(p.a)({},t(574).types),t(575).types),scripts:[{name:"react",src:"https://unpkg.com/react/umd/react.production.min.js",types:["https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/index.d.ts","https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/global.d.ts"]},{name:"react-dom",src:"https://unpkg.com/react-dom/umd/react-dom.production.min.js",types:["https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react-dom/index.d.ts"]},{name:"moment",src:"https://unpkg.com/moment"},{name:"antd",src:"https://unpkg.com/antd@".concat(ne)},{name:"@apollo/client",src:"https://www.lsz8617.com/lib/@apollo/client/index.js"}]})};var oe=function(){return Object(S.jsx)(S.Fragment,{children:Object(S.jsx)(l.a,{children:Object(S.jsxs)(c.c,{children:[Object(S.jsx)(c.a,{exact:!0,path:"/",children:Object(S.jsx)(Y,{})}),Object(S.jsx)(c.a,{exact:!0,path:"/leetcode",children:Object(S.jsx)($,{})}),Object(S.jsx)(c.a,{exact:!0,path:"/sourcemap",children:Object(S.jsx)(ee,{})}),Object(S.jsx)(c.a,{exact:!0,path:"/apollo-client",children:Object(S.jsx)(te,{})})]})})})},re=function(e){e&&e instanceof Function&&t.e(73).then(t.bind(null,654)).then((function(n){var t=n.getCLS,o=n.getFID,r=n.getFCP,a=n.getLCP,i=n.getTTFB;t(e),o(e),r(e),a(e),i(e)}))};console.log(i.a.render),i.a.render(Object(S.jsx)(oe,{}),document.getElementById("root")),re()}},[[580,3,4]]]);
//# sourceMappingURL=main.8e6fcb92.chunk.js.map