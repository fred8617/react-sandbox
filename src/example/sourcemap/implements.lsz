//二叉树
class TreeNode {
  val: number;
  left: TreeNode | null;
  right: TreeNode | null;
  constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {
    this.val = val === undefined ? 0 : val;
    this.left = left === undefined ? null : left;
    this.right = right === undefined ? null : right;
  }
}
//单链表
class ListNode {
  val: number;
  next: ListNode | null;
  constructor(val?: number, next?: ListNode | null) {
    this.val = val === undefined ? 0 : val;
    this.next = next === undefined ? null : next;
  }
}
function serializeHelper(root: TreeNode | null, result: any[], queue: any[]) {
  if (!root) {
    queue.push(null);
  }
}
function serializeWidely(root: TreeNode | null): string {
  if (!root) {
    return JSON.stringify([null]);
  }
  let result = [];
  let queue = [root];
  while (queue.length > 0) {
    const node = queue.shift();
    if (node) {
      result.push(node.val);
      queue.push(node.left, node.right);
    } else {
      result.push(null);
    }
  }
  return JSON.stringify(result);
}
function deserializeWidely(data: string): TreeNode | null {
  const nodes = JSON.parse(data);
  const node = nodes.shift();
  if (node===null) {
    return null;
  }
  const root = new TreeNode(node);
  let queue = [root];
  while (queue.length > 0) {
    const node = queue.shift();
    const leftVal = nodes.shift();
    const rightVal = nodes.shift();
    if (leftVal !== null && leftVal !== undefined) {
      const leftNode = new TreeNode(leftVal);
      node.left = leftNode;
      queue.push(leftNode);
    }
    if (rightVal !== null && rightVal !== undefined) {
      const rightNode = new TreeNode(rightVal);
      node.right = rightNode;
      queue.push(rightNode);
    }
    // break;
  }
  return root;
}
function execute (...rest) {
  console.log(...rest)
};
