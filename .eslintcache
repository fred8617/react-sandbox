[{"C:\\all-project\\sandbox\\src\\index.tsx":"1","C:\\all-project\\sandbox\\src\\reportWebVitals.ts":"2","C:\\all-project\\sandbox\\src\\App.tsx":"3","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx":"4","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx":"5"},{"size":455,"mtime":1611543692872,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611537770637,"results":"8","hashOfConfig":"7"},{"size":1246,"mtime":1611565243385,"results":"9","hashOfConfig":"7"},{"size":5881,"mtime":1611543768155,"results":"10","hashOfConfig":"7"},{"size":7825,"mtime":1611565160665,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1naw8n2",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"C:\\all-project\\sandbox\\src\\index.tsx",[],["27","28"],"C:\\all-project\\sandbox\\src\\reportWebVitals.ts",[],"C:\\all-project\\sandbox\\src\\App.tsx",["29"],"import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Sandbox from \"./react-sandbox\";\nimport CodeEditor from \"./react-sandbox/CodeEditor\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path=\"/\">\n        <Sandbox\n        code={`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nReactDOM.render(<>hello world</>, document.getElementById(\"root\"));`}\n          scripts={[\n            {\n              name: \"react\",\n              src: \"https://unpkg.com/react/umd/react.production.min.js\",\n              types: [\n                \"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/index.d.ts\",\n                \"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react/global.d.ts\",\n              ],\n            },\n            {\n              name: \"react-dom\",\n              src:\n                \"https://unpkg.com/react-dom/umd/react-dom.production.min.js\",\n                types:[\n                  \"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/react-dom/index.d.ts\",\n                ]\n            },\n          ]}\n        />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx",["30","31","32","33","34","35"],"import React, {\r\n    FC,\r\n    useRef,\r\n    useEffect,\r\n    forwardRef,\r\n    useImperativeHandle,\r\n  } from \"react\";\r\n  import * as monaco from \"monaco-editor\";\r\n  import * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\r\n  import {\r\n    CodeActionAdaptor,\r\n    FormatHelper,\r\n  } from \"monaco-editor/esm/vs/language/typescript/languageFeatures\";\r\n  import prettier from \"prettier/standalone\";\r\n  import babel from \"prettier/parser-babylon\";\r\n  import gql from \"prettier/parser-graphql\";\r\n  import ts from \"prettier/parser-typescript\";\r\n  export interface CodeEditorProps\r\n    extends monaco.editor.IStandaloneEditorConstructionOptions {\r\n    beforeMount?(monaco: typeof monacoEditor);\r\n    didMount?(\r\n      editor: monaco.editor.IStandaloneCodeEditor,\r\n      monaco: typeof monacoEditor\r\n    );\r\n    onChange?(code: string, event: monaco.editor.IModelContentChangedEvent);\r\n    defaultValue?: string;\r\n  }\r\n  const CodeEditor: FC<CodeEditorProps> & { TypeScript: typeof TypeScript } = ({\r\n    beforeMount,\r\n    onChange,\r\n    ...props\r\n  }) => {\r\n    const container = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n      beforeMount?.(monaco);\r\n      const editor = monaco.editor.create(container.current!, {\r\n        automaticLayout: true,\r\n        minimap: { enabled: false },\r\n        ...props,\r\n      });\r\n      editor.onDidChangeModelContent((event) => {\r\n        onChange?.(editor.getValue(), event);\r\n      });\r\n      return () => {\r\n        editor.dispose();\r\n      };\r\n    }, []);\r\n    return (\r\n      <>\r\n        <div style={{ height: `100%`, width: `100%` }} ref={container} />\r\n      </>\r\n    );\r\n  };\r\n  interface TypeScriptProps extends CodeEditorProps {\r\n    /**\r\n     * ts编辑器外置库\r\n     */\r\n    libs?: { [key: string]: string };\r\n    /**\r\n     * ts自定义d.ts\r\n     */\r\n    extraLibs?: { [key: string]: string };\r\n    /**\r\n     * node_module种的code\r\n     */\r\n    libCode?: { [key: string]: string };\r\n  }\r\n  interface ModelRef {\r\n    model: monaco.editor.ITextModel;\r\n    monaco: typeof monaco;\r\n  }\r\n  export interface TypeScriptRef extends ModelRef {}\r\n  const TypeScript = forwardRef<TypeScriptRef, TypeScriptProps>(\r\n    (\r\n      { defaultValue = ``, libs = {}, extraLibs = {}, libCode = {}, ...props },\r\n      ref\r\n    ) => {\r\n      const model = useRef<monaco.editor.ITextModel>();\r\n      const monacoRef = useRef<typeof monaco>();\r\n      if (!model.current) {\r\n        //   debugger\r\n        model.current = monaco.editor.createModel(\r\n          defaultValue,\r\n          \"typescript\",\r\n          monaco.Uri.file(\"/index.tsx\")\r\n        );\r\n      }\r\n      useImperativeHandle(ref, () => ({\r\n        model: model.current!,\r\n        monaco: monacoRef.current!,\r\n      }));\r\n      useEffect(() => {\r\n        return () => {\r\n          model.current!.dispose();\r\n        };\r\n      }, []);\r\n      const loadLibs = () => {\r\n        Object.entries(libs).map(([name, code]) => {\r\n          monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n            code,\r\n            `file:///node_modules/@types/${name}/index.d.ts`\r\n          );\r\n        });\r\n        Object.entries(extraLibs).map(([name, code]) => {\r\n          monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n            code,\r\n            `file:///node_modules/@types/${name}`\r\n          );\r\n        });\r\n      };\r\n      useEffect(() => {\r\n        // debugger\r\n        // console.log(libs);\r\n        // console.log(monaco.languages.typescript.typescriptDefaults);\r\n  \r\n        loadLibs();\r\n  \r\n        return () => {};\r\n      }, [libs]);\r\n      return (\r\n        <CodeEditor\r\n          model={model.current}\r\n          didMount={() => {}}\r\n          beforeMount={(monaco) => {\r\n            monacoRef.current = monaco;\r\n            const compilerDefaults: monaco.languages.typescript.CompilerOptions = {\r\n              baseUrl: \"file:///node_modules/@types/\",\r\n  \r\n              allowSyntheticDefaultImports: true,\r\n              jsx: monaco.languages.typescript.JsxEmit.React,\r\n              experimentalDecorators: true,\r\n              noEmit: true,\r\n              allowJs: true,\r\n              types: [\"react\"],\r\n            };\r\n  \r\n            monaco.languages.typescript.typescriptDefaults.setCompilerOptions(\r\n              compilerDefaults\r\n            );\r\n  \r\n            monaco.languages.typescript.typescriptDefaults.setEagerModelSync(\r\n              true\r\n            );\r\n            const prettierOptions = {\r\n              provideDocumentFormattingEdits(model) {\r\n                return [\r\n                  {\r\n                    range: model.getFullModelRange(),\r\n                    text: prettier.format(model.getValue(), {\r\n                      trailingComma: \"all\",\r\n                      jsxSingleQuote: false,\r\n                      semi: true,\r\n                      plugins: [babel, ts, gql],\r\n                      arrowParens: \"always\",\r\n                      bracketSpacing: true,\r\n                      htmlWhitespaceSensitivity: \"css\",\r\n                      insertPragma: false,\r\n                      jsxBracketSameLine: true,\r\n                      printWidth: 80,\r\n                      proseWrap: \"preserve\",\r\n                      quoteProps: \"as-needed\",\r\n                      requirePragma: false,\r\n                      singleQuote: false,\r\n                      tabWidth: 2,\r\n                      useTabs: false,\r\n                      vueIndentScriptAndStyle: false,\r\n                    }),\r\n                  },\r\n                ];\r\n              },\r\n            };\r\n            monaco.languages.registerDocumentFormattingEditProvider(\r\n              \"typescript\",\r\n              prettierOptions\r\n            );\r\n            loadLibs();\r\n          }}\r\n          scrollbar={{}}\r\n          {...props}\r\n        />\r\n      );\r\n    }\r\n  );\r\n  CodeEditor.TypeScript = TypeScript;\r\n  export default CodeEditor;\r\n  ",["36","37"],"C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx",["38","39"],"import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport CodeEditor, { TypeScriptRef } from \"./CodeEditor\";\r\nimport Frame, { FrameContextConsumer } from \"react-frame-component\";\r\nimport debounce from \"lodash.debounce\";\r\nimport \"./index.css\";\r\nimport * as monaco from \"monaco-editor\";\r\nimport * as Babel from \"@babel/standalone\";\r\n\r\ninterface Script {\r\n  //作为importmap的key\r\n  name: string;\r\n  //加载路径\r\n  src?: string;\r\n  //加载代码，优先级最高\r\n  code?: string;\r\n  //ts类型\r\n  types?: string[];\r\n  typeCode?: string;\r\n}\r\n/**\r\n * 沙盒属性，目前默认ts沙盒\r\n */\r\nexport interface SandboxProps {\r\n  scripts?: Script[];\r\n  code?: string;\r\n}\r\n\r\n/**\r\n * systemimports映射\r\n */\r\ninterface ImportsReflect {\r\n  [key: string]: string;\r\n}\r\n\r\nconst babelConfig = {\r\n  filename: \"main.tsx\",\r\n  presets: [\"typescript\", \"es2015\", \"react\"],\r\n  plugins: [\r\n    \"proposal-do-expressions\",\r\n    \"proposal-optional-chaining\",\r\n    [\r\n      \"proposal-pipeline-operator\",\r\n      {\r\n        proposal: \"minimal\",\r\n      },\r\n    ],\r\n    [\r\n      \"proposal-decorators\",\r\n      {\r\n        legacy: true,\r\n      },\r\n    ],\r\n    [\"proposal-class-properties\", { loose: true }],\r\n    \"transform-modules-systemjs\",\r\n  ],\r\n};\r\nconst getCode = async (src) => {\r\n  return fetch(src).then((res) => res.text());\r\n};\r\nconst Sandbox: FC<SandboxProps> = ({\r\n  scripts: pScripts = [],\r\n  code: pCode = \"\",\r\n  //   cssLib = [],\r\n  //   files = {},\r\n  //   extraLibType = {},\r\n  //   beforeExcuteScript = \"\",\r\n  //   defaultValue = \"\",\r\n  ...props\r\n}) => {\r\n  const [code, setCode] = useState<string>(pCode);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [scripts, setScripts] = useState<Script[]>(pScripts);\r\n  // const [error, setError] = useState<string>();\r\n  const [dragging, setDragging] = useState<boolean>();\r\n\r\n  const loadersCode = useRef<string>(\"\");\r\n  const imports = useRef<ImportsReflect>();\r\n\r\n  // console.log(imports,loadersCode);\r\n\r\n  const run = useCallback(async (code) => {\r\n    try {\r\n      const _worker = await monaco.languages.typescript.getTypeScriptWorker();\r\n      const worker = await _worker();\r\n      const diags = (\r\n        await worker.getSemanticDiagnostics(\r\n          monaco.Uri.file(\"/index.tsx\").toString()\r\n        )\r\n      ).filter((e) => e.category === 1);\r\n      console.log(diags);\r\n      const compiledCode = Babel.transform(code, babelConfig).code;\r\n      //修复文档流\r\n      const document: Document = ref.current.window.document;\r\n      const codeBlob = new Blob([compiledCode], { type: \"text/javascript\" });\r\n      const url = URL.createObjectURL(codeBlob);\r\n      if (document.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">csscode</style>\r\n          <script type=\"systemjs-importmap\">\r\n         ${JSON.stringify({ imports: imports.current })}\r\n        </script>\r\n        </head>\r\n        <body>\r\n          <div id=\"root\">\r\n          </div>\r\n        </body>\r\n        `;\r\n      /**\r\n       * 执行代码加载\r\n       */\r\n      const sc = document.createElement(\"script\");\r\n      sc.type = \"systemjs-module\";\r\n      sc.src = url;\r\n      document.body.appendChild(sc);\r\n      console.log(compiledCode);\r\n      /**\r\n       * loader代码加载\r\n       */\r\n      const loader = document.createElement(\"script\");\r\n      loader.type = \"text/javascript\";\r\n      loader.innerHTML = loadersCode.current;\r\n      document.body.appendChild(loader);\r\n    } catch (error) {\r\n      // setError(error.stack);\r\n      const document: Document = ref.current.window.document;\r\n      if (document.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">\r\n            #root{\r\n              color:red;\r\n              font-weight:bold;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <pre id=\"root\" >${error}</pre>\r\n        </body>\r\n        `;\r\n    } finally {\r\n      // store.rendering = false;\r\n    }\r\n\r\n    setCode(code);\r\n  }, []);\r\n  // const [content, setContent] = useState<string>();\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n        const loaders: Script[] = [\r\n          {\r\n            name: \"systemjs\",\r\n            src: \"https://unpkg.com/systemjs/dist/system.min.js\",\r\n          },\r\n          {\r\n            name: \"systemjs-extra-amd\",\r\n            src: \"https://unpkg.com/systemjs/dist/extras/amd.min.js\",\r\n          },\r\n        ];\r\n        await Promise.all(\r\n          loaders.map(async (loader) => {\r\n            const code = await getCode(loader.src!);\r\n            loader.code = code;\r\n            return loader;\r\n          })\r\n        );\r\n        const newScripts = await Promise.all(\r\n          scripts.map(async (script) => {\r\n            const code = await getCode(script.src!);\r\n            script.code = code;\r\n            if (script.types) {\r\n              const typeCodes = await Promise.all(\r\n                script.types.map(async (url) => await getCode(url))\r\n              );\r\n              script.typeCode = typeCodes.join(\";\");\r\n            }\r\n            return script;\r\n          })\r\n        );\r\n        imports.current = Object.fromEntries(\r\n          newScripts.map((e) => [\r\n            e.name,\r\n            URL.createObjectURL(\r\n              new Blob([e.code || \"\"], { type: \"text/javascript\" })\r\n            ),\r\n          ])\r\n        );\r\n        setScripts([...newScripts]);\r\n        loadersCode.current = loaders.map((e) => e.code).join(\";\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n      run(pCode);\r\n    })();\r\n  }, []);\r\n  const ref = useRef<any>();\r\n  const editorRef = useRef<TypeScriptRef>(null);\r\n  return (\r\n    <>\r\n      <div className=\"sand-box\" style={{ background: \"#fff\", height: `100vh` }}>\r\n        <SplitPane\r\n          onDragStarted={() => setDragging(true)}\r\n          onDragFinished={() => setDragging(false)}\r\n          pane1Style={{ position: \"relative\" }}\r\n          pane2Style={{ position: \"relative\" }}\r\n          split=\"vertical\"\r\n          defaultSize={`50%`}\r\n          // minSize={250}\r\n        >\r\n          <div style={{ height: `100%` }} key=\"code\">\r\n            <CodeEditor.TypeScript\r\n              ref={editorRef}\r\n              defaultValue={code}\r\n              // libCode={Object.fromEntries(\r\n              //   scripts.map((e) => [e.name, e.typeCode]).filter(Boolean)\r\n              // )}\r\n              //   extraLibs={extraLibType}\r\n              libs={Object.fromEntries(\r\n                scripts.map((e) => [e.name, e.typeCode]).filter(Boolean)\r\n              )}\r\n              onChange={debounce(run, 800)}\r\n            />\r\n          </div>\r\n          <div style={{ height: `100%` }} key=\"preview\">\r\n            <>\r\n              {!loading && (\r\n                <Frame\r\n                  style={{\r\n                    height: `100%`,\r\n                    width: `100%`,\r\n                    pointerEvents: dragging ? \"none\" : \"initial\",\r\n                  }}\r\n                  className=\"frame\"\r\n                >\r\n                  <FrameContextConsumer>\r\n                    {({ window }) => {\r\n                      ref.current = window;\r\n                      // debugger\r\n                      return <></>;\r\n                    }}\r\n                  </FrameContextConsumer>\r\n                </Frame>\r\n              )}\r\n            </>\r\n          </div>\r\n        </SplitPane>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Sandbox;\r\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":4,"column":8,"nodeType":"46","messageId":"47","endLine":4,"endColumn":18},{"ruleId":"44","severity":1,"message":"48","line":11,"column":5,"nodeType":"46","messageId":"47","endLine":11,"endColumn":22},{"ruleId":"44","severity":1,"message":"49","line":12,"column":5,"nodeType":"46","messageId":"47","endLine":12,"endColumn":17},{"ruleId":"50","severity":1,"message":"51","line":47,"column":8,"nodeType":"52","endLine":47,"endColumn":10,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":98,"column":49,"nodeType":"56","messageId":"57","endLine":98,"endColumn":51},{"ruleId":"54","severity":1,"message":"55","line":104,"column":54,"nodeType":"56","messageId":"57","endLine":104,"endColumn":56},{"ruleId":"50","severity":1,"message":"58","line":119,"column":10,"nodeType":"52","endLine":119,"endColumn":16,"suggestions":"59"},{"ruleId":"40","replacedBy":"60"},{"ruleId":"42","replacedBy":"61"},{"ruleId":"44","severity":1,"message":"62","line":7,"column":3,"nodeType":"46","messageId":"47","endLine":7,"endColumn":10},{"ruleId":"50","severity":1,"message":"63","line":211,"column":6,"nodeType":"52","endLine":211,"endColumn":8,"suggestions":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"@typescript-eslint/no-unused-vars","'CodeEditor' is defined but never used.","Identifier","unusedVar","'CodeActionAdaptor' is defined but never used.","'FormatHelper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beforeMount', 'onChange', and 'props'. Either include them or remove the dependency array. If 'beforeMount' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["67"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'loadLibs'. Either include it or remove the dependency array.",["68"],["65"],["66"],"'useMemo' is defined but never used.","React Hook useEffect has missing dependencies: 'pCode', 'run', and 'scripts'. Either include them or remove the dependency array.",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [beforeMount, onChange, props]",{"range":"76","text":"77"},"Update the dependencies array to be: [libs, loadLibs]",{"range":"78","text":"79"},"Update the dependencies array to be: [pCode, run, scripts]",{"range":"80","text":"81"},[1509,1511],"[beforeMount, onChange, props]",[3539,3545],"[libs, loadLibs]",[5865,5867],"[pCode, run, scripts]"]