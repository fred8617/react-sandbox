[{"C:\\all-project\\sandbox\\src\\index.tsx":"1","C:\\all-project\\sandbox\\src\\reportWebVitals.ts":"2","C:\\all-project\\sandbox\\src\\App.tsx":"3","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx":"4","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx":"5","C:\\all-project\\sandbox\\src\\example\\antd\\index.tsx":"6","C:\\all-project\\sandbox\\src\\example\\leetcode\\index.tsx":"7"},{"size":455,"mtime":1611543692872,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1611537770637,"results":"10","hashOfConfig":"9"},{"size":531,"mtime":1614663622298,"results":"11","hashOfConfig":"9"},{"size":5763,"mtime":1614664823823,"results":"12","hashOfConfig":"9"},{"size":8190,"mtime":1614668890476,"results":"13","hashOfConfig":"9"},{"size":1168,"mtime":1614664062419,"results":"14","hashOfConfig":"9"},{"size":716,"mtime":1614668970202,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1naw8n2",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\all-project\\sandbox\\src\\index.tsx",[],["35","36"],"C:\\all-project\\sandbox\\src\\reportWebVitals.ts",[],"C:\\all-project\\sandbox\\src\\App.tsx",["37","38"],"import React, { useState } from \"react\";\n\nimport { parse } from \"querystring\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Antd from \"./example/antd\";\nimport LeetCode from \"./example/leetcode\";\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <Antd />\n          </Route>\n          <Route exact path=\"/leetcode\">\n            <LeetCode />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx",["39","40","41","42","43","44"],"import React, {\r\n  FC,\r\n  useRef,\r\n  useEffect,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport * as monaco from \"monaco-editor\";\r\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\r\nimport {\r\n  CodeActionAdaptor,\r\n  FormatHelper,\r\n} from \"monaco-editor/esm/vs/language/typescript/languageFeatures\";\r\nimport prettier from \"prettier/standalone\";\r\nimport babel from \"prettier/parser-babylon\";\r\nimport gql from \"prettier/parser-graphql\";\r\nimport ts from \"prettier/parser-typescript\";\r\nexport interface CodeEditorProps\r\n  extends monaco.editor.IStandaloneEditorConstructionOptions {\r\n  beforeMount?(monaco: typeof monacoEditor);\r\n  didMount?(\r\n    editor: monaco.editor.IStandaloneCodeEditor,\r\n    monaco: typeof monacoEditor\r\n  );\r\n  onChange?(code: string, event: monaco.editor.IModelContentChangedEvent);\r\n  defaultValue?: string;\r\n}\r\nconst CodeEditor: FC<CodeEditorProps> & { TypeScript: typeof TypeScript } = ({\r\n  beforeMount,\r\n  onChange,\r\n  ...props\r\n}) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    beforeMount?.(monaco);\r\n    const editor = monaco.editor.create(container.current!, {\r\n      automaticLayout: true,\r\n      minimap: { enabled: false },\r\n      ...props,\r\n    });\r\n    editor.onDidChangeModelContent((event) => {\r\n      onChange?.(editor.getValue(), event);\r\n    });\r\n    return () => {\r\n      editor.dispose();\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div style={{ height: `100%`, width: `100%` }} ref={container} />\r\n    </>\r\n  );\r\n};\r\nexport interface TypeScriptProps extends CodeEditorProps {\r\n  /**\r\n   * ts编辑器外置库\r\n   */\r\n  libs?: { [key: string]: string };\r\n  /**\r\n   * ts自定义d.ts\r\n   */\r\n  extraLibs?: { [key: string]: string };\r\n  /**\r\n   * node_module种的code\r\n   */\r\n  libCode?: { [key: string]: string };\r\n  /**\r\n   * 定义\r\n   */\r\n  defs?: string;\r\n}\r\ninterface ModelRef {\r\n  model: monaco.editor.ITextModel;\r\n  monaco: typeof monaco;\r\n}\r\nexport interface TypeScriptRef extends ModelRef {}\r\nconst TypeScript = forwardRef<TypeScriptRef, TypeScriptProps>(\r\n  (\r\n    {\r\n      defs = \"\",\r\n      defaultValue = ``,\r\n      libs = {},\r\n      extraLibs = {},\r\n      libCode = {},\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const model = useRef<monaco.editor.ITextModel>();\r\n    const monacoRef = useRef<typeof monaco>();\r\n    if (!model.current) {\r\n      //   debugger\r\n      model.current = monaco.editor.createModel(\r\n        defaultValue,\r\n        \"typescript\",\r\n        monaco.Uri.file(\"/index.tsx\")\r\n      );\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n      model: model.current!,\r\n      monaco: monacoRef.current!,\r\n    }));\r\n    useEffect(() => {\r\n      return () => {\r\n        model.current!.dispose();\r\n      };\r\n    }, []);\r\n    const loadLibs = () => {\r\n      monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n        defs,\r\n        `file:///node_modules/@types/index.d.ts`\r\n      );\r\n      Object.entries(libs).map(([name, code]) => {\r\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n          code,\r\n          `file:///node_modules/@types/${name}/index.d.ts`\r\n        );\r\n      });\r\n      Object.entries(extraLibs).map(([name, code]) => {\r\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n          code,\r\n          `file:///node_modules/@types/${name}`\r\n        );\r\n      });\r\n    };\r\n    useEffect(() => {\r\n      // debugger\r\n      // console.log(libs);\r\n      // console.log(monaco.languages.typescript.typescriptDefaults);\r\n\r\n      loadLibs();\r\n\r\n      return () => {};\r\n    }, [libs]);\r\n    return (\r\n      <CodeEditor\r\n        model={model.current}\r\n        didMount={() => {}}\r\n        beforeMount={(monaco) => {\r\n          monacoRef.current = monaco;\r\n          const compilerDefaults: monaco.languages.typescript.CompilerOptions = {\r\n            baseUrl: \"file:///node_modules/@types/\",\r\n\r\n            allowSyntheticDefaultImports: true,\r\n            jsx: monaco.languages.typescript.JsxEmit.React,\r\n            experimentalDecorators: true,\r\n            noEmit: true,\r\n            allowJs: true,\r\n            types: [\"react\"],\r\n          };\r\n\r\n          monaco.languages.typescript.typescriptDefaults.setCompilerOptions(\r\n            compilerDefaults\r\n          );\r\n\r\n          monaco.languages.typescript.typescriptDefaults.setEagerModelSync(\r\n            true\r\n          );\r\n          const prettierOptions = {\r\n            provideDocumentFormattingEdits(model) {\r\n              return [\r\n                {\r\n                  range: model.getFullModelRange(),\r\n                  text: prettier.format(model.getValue(), {\r\n                    trailingComma: \"all\",\r\n                    jsxSingleQuote: false,\r\n                    semi: true,\r\n                    plugins: [babel, ts, gql],\r\n                    arrowParens: \"always\",\r\n                    bracketSpacing: true,\r\n                    htmlWhitespaceSensitivity: \"css\",\r\n                    insertPragma: false,\r\n                    jsxBracketSameLine: true,\r\n                    printWidth: 80,\r\n                    proseWrap: \"preserve\",\r\n                    quoteProps: \"as-needed\",\r\n                    requirePragma: false,\r\n                    singleQuote: false,\r\n                    tabWidth: 2,\r\n                    useTabs: false,\r\n                    vueIndentScriptAndStyle: false,\r\n                  }),\r\n                },\r\n              ];\r\n            },\r\n          };\r\n          monaco.languages.registerDocumentFormattingEditProvider(\r\n            \"typescript\",\r\n            prettierOptions\r\n          );\r\n          loadLibs();\r\n        }}\r\n        scrollbar={{}}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nCodeEditor.TypeScript = TypeScript;\r\nexport default CodeEditor;\r\n","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx",["45","46","47"],"import React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport CodeEditor, { TypeScriptProps, TypeScriptRef } from \"./CodeEditor\";\r\nimport Frame, { FrameContextConsumer } from \"react-frame-component\";\r\nimport debounce from \"lodash.debounce\";\r\nimport \"./index.css\";\r\nimport * as monaco from \"monaco-editor\";\r\nimport * as Babel from \"@babel/standalone\";\r\n\r\ninterface Script {\r\n  //作为importmap的key\r\n  name: string;\r\n  //加载路径\r\n  src?: string;\r\n  //加载代码，优先级最高\r\n  code?: string;\r\n  //ts类型\r\n  types?: string[];\r\n  typeCode?: string;\r\n}\r\n\r\ninterface Style {\r\n  href?: string;\r\n  code?: string;\r\n}\r\n/**\r\n * 沙盒属性，目前默认ts沙盒\r\n */\r\nexport interface SandboxProps extends TypeScriptProps {\r\n  scripts?: Script[];\r\n  styles?: Style[];\r\n  code?: string;\r\n  preExecute?: string;\r\n  onChange?(code: string);\r\n  wrapperFunction?(): string;\r\n}\r\n\r\n/**\r\n * systemimports映射\r\n */\r\ninterface ImportsReflect {\r\n  [key: string]: string;\r\n}\r\n\r\nconst babelConfig = {\r\n  filename: \"main.tsx\",\r\n  presets: [\"typescript\", \"es2015\", \"react\"],\r\n  plugins: [\r\n    \"proposal-do-expressions\",\r\n    \"proposal-optional-chaining\",\r\n    [\r\n      \"proposal-pipeline-operator\",\r\n      {\r\n        proposal: \"minimal\",\r\n      },\r\n    ],\r\n    [\r\n      \"proposal-decorators\",\r\n      {\r\n        legacy: true,\r\n      },\r\n    ],\r\n    [\"proposal-class-properties\", { loose: true }],\r\n    \"transform-modules-systemjs\",\r\n  ],\r\n};\r\nconst getCode = async (src) => {\r\n  return fetch(src).then((res) => res.text());\r\n};\r\nconst Sandbox: FC<SandboxProps> = ({\r\n  scripts: pScripts = [],\r\n  code: pCode = \"\",\r\n  styles: pStyles = [],\r\n  extraLibs,\r\n  preExecute = \"\",\r\n  onChange,\r\n  wrapperFunction = (code) => code,\r\n  ...props\r\n}) => {\r\n  // const [code, setCode] = useState<string>(pCode);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [scripts, setScripts] = useState<Script[]>(pScripts);\r\n  const [styles, setStyles] = useState<Style[]>(pStyles);\r\n  const [dragging, setDragging] = useState<boolean>();\r\n  const loadersCode = useRef<string>(\"\");\r\n  const cssCode = useRef<string>(\"\");\r\n  const imports = useRef<ImportsReflect>();\r\n  const run = useCallback(async (code) => {\r\n    try {\r\n      const _worker = await monaco.languages.typescript.getTypeScriptWorker();\r\n      const worker = await _worker();\r\n      const diags = (\r\n        await worker.getSemanticDiagnostics(\r\n          monaco.Uri.file(\"/index.tsx\").toString()\r\n        )\r\n      ).filter((e) => e.category === 1);\r\n      console.log(diags);\r\n      onChange?.(code);\r\n      const compiledCode = Babel.transform(`${preExecute};${code}`, babelConfig)\r\n        .code;\r\n      //修复文档流\r\n      const document: Document = ref.current.window.document;\r\n      const codeBlob = new Blob([compiledCode], { type: \"text/javascript\" });\r\n      const url = URL.createObjectURL(codeBlob);\r\n      if (document.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">${cssCode.current}</style>\r\n          <script type=\"systemjs-importmap\">\r\n         ${JSON.stringify({ imports: imports.current })}\r\n        </script>\r\n        </head>\r\n        <body>\r\n          <div id=\"root\">\r\n          </div>\r\n        </body>\r\n        `;\r\n      /**\r\n       * 执行代码加载\r\n       */\r\n      const sc = document.createElement(\"script\");\r\n      sc.type = \"systemjs-module\";\r\n      sc.src = url;\r\n      document.body.appendChild(sc);\r\n      console.log(compiledCode);\r\n      /**\r\n       * loader代码加载\r\n       */\r\n      const loader = document.createElement(\"script\");\r\n      loader.type = \"text/javascript\";\r\n      loader.innerHTML = loadersCode.current;\r\n      document.body.appendChild(loader);\r\n      // setCode(code);\r\n    } catch (error) {\r\n      const document: Document = ref.current.window.document;\r\n      if (document.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">\r\n            #root{\r\n              color:red;\r\n              font-weight:bold;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <pre id=\"root\" >${error}</pre>\r\n        </body>\r\n        `;\r\n    } finally {\r\n      // store.rendering = false;\r\n    }\r\n  }, []);\r\n  // const [content, setContent] = useState<string>();\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n        const loaders: Script[] = [\r\n          {\r\n            name: \"systemjs\",\r\n            src: \"https://unpkg.com/systemjs/dist/system.min.js\",\r\n          },\r\n          {\r\n            name: \"systemjs-extra-amd\",\r\n            src: \"https://unpkg.com/systemjs/dist/extras/amd.min.js\",\r\n          },\r\n        ];\r\n        await Promise.all(\r\n          loaders.map(async (loader) => {\r\n            const code = await getCode(loader.src!);\r\n            loader.code = code;\r\n            return loader;\r\n          })\r\n        );\r\n        const newScripts = await Promise.all(\r\n          scripts.map(async (script) => {\r\n            const code = await getCode(script.src!);\r\n            script.code = code;\r\n            if (script.types) {\r\n              const typeCodes = await Promise.all(\r\n                script.types.map(async (url) => await getCode(url))\r\n              );\r\n              script.typeCode = typeCodes.join(\";\");\r\n            }\r\n            return script;\r\n          })\r\n        );\r\n        const newStyles = await Promise.all(\r\n          styles.map(async (style) => {\r\n            const code = await getCode(style.href!);\r\n            style.code = code;\r\n            return style;\r\n          })\r\n        );\r\n        imports.current = Object.fromEntries(\r\n          newScripts.map((e) => [\r\n            e.name,\r\n            URL.createObjectURL(\r\n              new Blob([e.code || \"\"], { type: \"text/javascript\" })\r\n            ),\r\n          ])\r\n        );\r\n        cssCode.current = newStyles.map((e) => e.code).join(\"\");\r\n        setScripts([...newScripts]);\r\n        setStyles([...newStyles]);\r\n        loadersCode.current = loaders.map((e) => e.code).join(\";\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n      run(pCode);\r\n    })();\r\n  }, []);\r\n\r\n  const ref = useRef<any>();\r\n  const editorRef = useRef<TypeScriptRef>(null);\r\n  return (\r\n    <>\r\n      <div className=\"sand-box\" style={{ background: \"#fff\", height: `100vh` }}>\r\n        <SplitPane\r\n          onDragStarted={() => setDragging(true)}\r\n          onDragFinished={() => setDragging(false)}\r\n          pane1Style={{ position: \"relative\" }}\r\n          pane2Style={{ position: \"relative\" }}\r\n          split=\"vertical\"\r\n          defaultSize={`50%`}\r\n        >\r\n          <div style={{ height: `100%` }} key=\"code\">\r\n            <CodeEditor.TypeScript\r\n              ref={editorRef}\r\n              defaultValue={pCode}\r\n              libs={Object.fromEntries(\r\n                scripts.map((e) => [e.name, e.typeCode]).filter(Boolean)\r\n              )}\r\n              extraLibs={extraLibs}\r\n              onChange={debounce(run, 800)}\r\n              {...props}\r\n            />\r\n          </div>\r\n          <div style={{ height: `100%` }} key=\"preview\">\r\n            <>\r\n              {!loading && (\r\n                <Frame\r\n                  style={{\r\n                    height: `100%`,\r\n                    width: `100%`,\r\n                    pointerEvents: dragging ? \"none\" : \"initial\",\r\n                  }}\r\n                  className=\"frame\"\r\n                >\r\n                  <FrameContextConsumer>\r\n                    {({ window }) => {\r\n                      ref.current = window;\r\n                      return <></>;\r\n                    }}\r\n                  </FrameContextConsumer>\r\n                </Frame>\r\n              )}\r\n            </>\r\n          </div>\r\n        </SplitPane>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Sandbox;\r\n","C:\\all-project\\sandbox\\src\\example\\antd\\index.tsx",[],"C:\\all-project\\sandbox\\src\\example\\leetcode\\index.tsx",["48"],"/* eslint-disable import/no-webpack-loader-syntax */\r\nimport React, { FC, useState } from \"react\";\r\nimport Sandbox from \"../../react-sandbox\";\r\nimport defs from \"!raw-loader!./defs.lsz\";\r\nimport implement from \"!raw-loader!./implements.lsz\";\r\nimport code from \"!raw-loader!./code.lsz\";\r\nexport interface LeetCodeProps {}\r\nconst LeetCode: FC<LeetCodeProps> = ({ ...props }) => {\r\n  const [c, setC] = useState<string>(localStorage.getItem(\"leetcode\") || \"\");\r\n  return (\r\n    <>\r\n      <Sandbox\r\n        code={c || code}\r\n        onChange={(c) => {\r\n          localStorage.setItem(\"leetcode\", c);\r\n        }}\r\n        defs={defs}\r\n        preExecute={implement}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default LeetCode;\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":3,"column":10,"nodeType":"55","messageId":"56","endLine":3,"endColumn":15},{"ruleId":"53","severity":1,"message":"58","line":11,"column":3,"nodeType":"55","messageId":"56","endLine":11,"endColumn":20},{"ruleId":"53","severity":1,"message":"59","line":12,"column":3,"nodeType":"55","messageId":"56","endLine":12,"endColumn":15},{"ruleId":"60","severity":1,"message":"61","line":47,"column":6,"nodeType":"62","endLine":47,"endColumn":8,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":113,"column":47,"nodeType":"66","messageId":"67","endLine":113,"endColumn":49},{"ruleId":"64","severity":1,"message":"65","line":119,"column":52,"nodeType":"66","messageId":"67","endLine":119,"endColumn":54},{"ruleId":"60","severity":1,"message":"68","line":134,"column":8,"nodeType":"62","endLine":134,"endColumn":14,"suggestions":"69"},{"ruleId":"53","severity":1,"message":"70","line":7,"column":3,"nodeType":"55","messageId":"56","endLine":7,"endColumn":10},{"ruleId":"60","severity":1,"message":"71","line":166,"column":6,"nodeType":"62","endLine":166,"endColumn":8,"suggestions":"72"},{"ruleId":"60","severity":1,"message":"73","line":226,"column":6,"nodeType":"62","endLine":226,"endColumn":8,"suggestions":"74"},{"ruleId":"53","severity":1,"message":"75","line":9,"column":13,"nodeType":"55","messageId":"56","endLine":9,"endColumn":17},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'parse' is defined but never used.","'CodeActionAdaptor' is defined but never used.","'FormatHelper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beforeMount', 'onChange', and 'props'. Either include them or remove the dependency array. If 'beforeMount' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["78"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'loadLibs'. Either include it or remove the dependency array.",["79"],"'useMemo' is defined but never used.","React Hook useCallback has missing dependencies: 'onChange' and 'preExecute'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["80"],"React Hook useEffect has missing dependencies: 'pCode', 'run', 'scripts', and 'styles'. Either include them or remove the dependency array.",["81"],"'setC' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [beforeMount, onChange, props]",{"range":"90","text":"91"},"Update the dependencies array to be: [libs, loadLibs]",{"range":"92","text":"93"},"Update the dependencies array to be: [onChange, preExecute]",{"range":"94","text":"95"},"Update the dependencies array to be: [pCode, run, scripts, styles]",{"range":"96","text":"97"},[1417,1419],"[beforeMount, onChange, props]",[3551,3557],"[libs, loadLibs]",[4503,4505],"[onChange, preExecute]",[6417,6419],"[pCode, run, scripts, styles]"]