[{"C:\\all-project\\sandbox\\src\\index.tsx":"1","C:\\all-project\\sandbox\\src\\reportWebVitals.ts":"2","C:\\all-project\\sandbox\\src\\App.tsx":"3","C:\\all-project\\sandbox\\src\\example\\antd\\index.tsx":"4","C:\\all-project\\sandbox\\src\\example\\leetcode\\index.tsx":"5","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx":"6","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx":"7","C:\\all-project\\sandbox\\src\\react-sandbox\\util.ts":"8","C:\\all-project\\sandbox\\src\\react-sandbox\\useUUID.tsx":"9","C:\\all-project\\sandbox\\src\\react-sandbox\\ConsoleDivider.tsx":"10","C:\\all-project\\sandbox\\src\\react-sandbox\\babelPlugins.tsx":"11"},{"size":455,"mtime":1611543692872,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1611537770637,"results":"14","hashOfConfig":"13"},{"size":546,"mtime":1614732454205,"results":"15","hashOfConfig":"13"},{"size":1168,"mtime":1614664062419,"results":"16","hashOfConfig":"13"},{"size":745,"mtime":1615868883563,"results":"17","hashOfConfig":"13"},{"size":15584,"mtime":1616040028766,"results":"18","hashOfConfig":"13"},{"size":5574,"mtime":1615781213721,"results":"19","hashOfConfig":"13"},{"size":828,"mtime":1614824042632,"results":"20","hashOfConfig":"13"},{"size":1019,"mtime":1614825773825,"results":"21","hashOfConfig":"13"},{"size":288,"mtime":1615859065747,"results":"22","hashOfConfig":"13"},{"size":4536,"mtime":1616040050736,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1naw8n2",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"C:\\all-project\\sandbox\\src\\index.tsx",[],["53","54"],"C:\\all-project\\sandbox\\src\\reportWebVitals.ts",[],"C:\\all-project\\sandbox\\src\\App.tsx",["55","56"],"import React, { useState } from \"react\";\r\n\r\nimport { parse } from \"querystring\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport Antd from \"./example/antd\";\r\nimport LeetCode from \"./example/leetcode\";\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Antd />\r\n          </Route>\r\n          <Route exact path=\"/leetcode\">\r\n            <LeetCode />\r\n          </Route>\r\n        </Switch>\r\n      </HashRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\all-project\\sandbox\\src\\example\\antd\\index.tsx",[],"C:\\all-project\\sandbox\\src\\example\\leetcode\\index.tsx",["57"],"/* eslint-disable import/no-webpack-loader-syntax */\r\nimport React, { FC, useState } from \"react\";\r\nimport Sandbox from \"../../react-sandbox\";\r\nimport defs from \"!raw-loader!./defs.lsz\";\r\nimport implement from \"!raw-loader!./implements.lsz\";\r\nimport code from \"!raw-loader!./code.lsz\";\r\nexport interface LeetCodeProps {}\r\nconst LeetCode: FC<LeetCodeProps> = ({ ...props }) => {\r\n  const [c, setC] = useState<string>(localStorage.getItem(\"leetcode\") || \"\");\r\n  return (\r\n    <>\r\n      <Sandbox\r\n        pageDefaultSize={0}\r\n        code={c || code}\r\n        onChange={(c) => {\r\n          localStorage.setItem(\"leetcode\", c);\r\n        }}\r\n        defs={defs}\r\n        preExecute={implement}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default LeetCode;\r\n","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx",["58","59"],"/* eslint-disable import/no-webpack-loader-syntax */\r\nimport React, {\r\n  FC,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\nimport SplitPane from \"react-split-pane\";\r\nimport CodeEditor, { TypeScriptProps, TypeScriptRef } from \"./CodeEditor\";\r\nimport debounce from \"lodash.debounce\";\r\nimport \"./index.css\";\r\nimport * as monaco from \"monaco-editor\";\r\nimport * as Babel from \"@babel/standalone\";\r\nimport { getDiagsMessages } from \"./util\";\r\nimport systemjs from \"!raw-loader!systemjs/dist/system.js\";\r\nimport systemjsAmd from \"!raw-loader!systemjs/dist/extras/amd.min.js\";\r\nimport useUUID from \"./useUUID\";\r\nimport ReactJson from \"react-json-view\";\r\nimport ConsoleDivider from \"./ConsoleDivider\";\r\nimport \"./babelPlugins\";\r\nconst HORIZONTAL_BAR_SIZE = 16;\r\nconst VERTICAL_BAR_SIZE = 16;\r\ninterface Script {\r\n  //作为importmap的key\r\n  name: string;\r\n  //加载路径\r\n  src?: string;\r\n  //加载代码，优先级最高\r\n  code?: string;\r\n  //ts类型\r\n  types?: string[];\r\n  typeCode?: string;\r\n}\r\n\r\ninterface Style {\r\n  href?: string;\r\n  code?: string;\r\n}\r\n/**\r\n * 沙盒属性，目前默认ts沙盒\r\n */\r\nexport interface SandboxProps extends TypeScriptProps {\r\n  scripts?: Script[];\r\n  styles?: Style[];\r\n  code?: string;\r\n  preExecute?: string;\r\n  onChange?(code: string);\r\n  wrapperFunction?(): string;\r\n  pageDefaultSize?: number | string;\r\n}\r\n\r\n/**\r\n * systemimports映射\r\n */\r\ninterface ImportsReflect {\r\n  [key: string]: string;\r\n}\r\n\r\nconst babelConfig = {\r\n  filename: \"main.tsx\",\r\n  presets: [\"typescript\", \"react\"],\r\n  plugins: [\r\n    // \"maxium-count\",\r\n    \"proposal-do-expressions\",\r\n    \"proposal-optional-chaining\",\r\n    [\r\n      \"proposal-pipeline-operator\",\r\n      {\r\n        proposal: \"minimal\",\r\n      },\r\n    ],\r\n    [\r\n      \"proposal-decorators\",\r\n      {\r\n        legacy: true,\r\n      },\r\n    ],\r\n    [\"proposal-class-properties\", { loose: true }],\r\n  ],\r\n};\r\nconst getCode = async (src) => {\r\n  return fetch(src).then((res) => res.text());\r\n};\r\n\r\ninterface ConsoleMessage {\r\n  type: \"log\" | \"error\";\r\n  data: any[];\r\n}\r\nconst Sandbox: FC<SandboxProps> = ({\r\n  scripts: pScripts = [],\r\n  code: pCode = \"\",\r\n  styles: pStyles = [],\r\n  extraLibs,\r\n  preExecute = \"\",\r\n  onChange,\r\n  pageDefaultSize = `80%`,\r\n  wrapperFunction = (code) => code,\r\n  ...props\r\n}) => {\r\n  const uuid = useUUID();\r\n  const eventId = `sb_${uuid}`;\r\n  const pExecute = `\r\nwindow[\"${uuid}\"];\r\nwindow.console.log=function(...data){\r\n  window.parent[\\`dispatch_${eventId}_event\\`]({eventId:\"${uuid}\",type:\"log\",data})\r\n}\r\nwindow.console.error=function(...data){\r\n  window.parent[\\`dispatch_${eventId}_event\\`]({eventId:\"${uuid}\",type:\"error\",data})\r\n}\r\n;${preExecute}\r\n  `;\r\n  const [consoleMessages, setConsoleMessages] = useState<ConsoleMessage[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [scripts, setScripts] = useState<Script[]>(pScripts);\r\n  const [styles, setStyles] = useState<Style[]>(pStyles);\r\n  const [dragging, setDragging] = useState<boolean>();\r\n  const loadersCode = useRef<string>(\"\");\r\n  const cssCode = useRef<string>(\"\");\r\n  const imports = useRef<ImportsReflect>();\r\n  const libs = useMemo(() => {\r\n    return Object.fromEntries(\r\n      scripts.map((e) => [e.name, e.typeCode]).filter(Boolean)\r\n    );\r\n  }, [scripts]);\r\n  const run = useCallback(async (code) => {\r\n    try {\r\n      setConsoleMessages([]);\r\n      const _worker = await monaco.languages.typescript.getTypeScriptWorker();\r\n      const worker = await _worker();\r\n      const diags = (\r\n        await worker.getSemanticDiagnostics(\r\n          monaco.Uri.file(\"/index.tsx\").toString()\r\n        )\r\n      ).filter((e) => e.category === 1);\r\n      const messages = getDiagsMessages(diags);\r\n      if (messages.length > 0) {\r\n        const errors = messages.join(\"\\n\");\r\n        throw new Error(errors);\r\n      }\r\n\r\n      onChange?.(code);\r\n      const preCheckCode = Babel.transform(code, {\r\n        ...babelConfig,\r\n        plugins: [\"maxium-count\", ...babelConfig.plugins],\r\n      }).code;\r\n      console.log(`${pExecute};${preCheckCode}`);\r\n      const compiledCode = `\r\n        ${\r\n          Babel.transform(\r\n            `\r\n          ${pExecute}${preCheckCode}\r\n          `,\r\n            {\r\n              ...babelConfig,\r\n              presets: [...babelConfig.presets, \"es2015\"],\r\n              plugins: [\r\n                ...babelConfig.plugins,\r\n                \"transform-modules-systemjs\",\r\n              ],\r\n            }\r\n          ).code\r\n        }\r\n     `;\r\n      //修复文档流\r\n      // debugger\r\n      const document: Document | undefined =\r\n        ref.current?.contentWindow?.document;\r\n      if (!document) {\r\n        return;\r\n      }\r\n      const codeBlob = new Blob([compiledCode], { type: \"text/javascript\" });\r\n      const url = URL.createObjectURL(codeBlob);\r\n      if (document?.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">${cssCode.current}</style>\r\n          <script type=\"systemjs-importmap\">\r\n         ${JSON.stringify({ imports: imports.current })}\r\n        </script>\r\n        </head>\r\n        <body>\r\n          <div id=\"root\">\r\n          </div>\r\n        </body>\r\n        `;\r\n      // process.env.NODE_ENV === \"development\" &&\r\n      //   console.log(\"preCheckCode\", preCheckCode);\r\n      // console.log(\"compiledCode\", compiledCode);\r\n      /**\r\n       * loader代码加载\r\n       */\r\n      const loader = document.createElement(\"script\");\r\n      loader.type = \"text/javascript\";\r\n      loader.innerHTML = loadersCode.current;\r\n      document.body.appendChild(loader);\r\n      /**\r\n       * 执行代码加载\r\n       */\r\n      const sc = document.createElement(\"script\");\r\n      sc.type = \"text/javascript\";\r\n      sc.innerHTML = `\r\n         System.import(\"${url}\").catch(e=>console.error(e))\r\n        `;\r\n      document.body.appendChild(sc);\r\n      // setCode(code);\r\n    } catch (error) {\r\n      const document: Document | undefined =\r\n        ref.current?.contentWindow?.document;\r\n      if (!document) {\r\n        return;\r\n      }\r\n      if (document.children[0]) {\r\n        document.removeChild(document.children[0]);\r\n      }\r\n      document.appendChild(document.createElement(\"html\"));\r\n      document.documentElement.innerHTML = `\r\n        <head>\r\n          <style type=\"text/css\">\r\n            #root{\r\n              color:red;\r\n              font-weight:bold;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <pre id=\"root\" >${error}</pre>\r\n        </body>\r\n        `;\r\n    } finally {\r\n    }\r\n  }, []);\r\n  const onMessage = useCallback(\r\n    (ev) => {\r\n      try {\r\n        const message: ConsoleMessage = ev.detail;\r\n        // debugger\r\n        setConsoleMessages([...consoleMessages, message]);\r\n      } catch (error) {\r\n        // debugger;\r\n      }\r\n    },\r\n    [consoleMessages]\r\n  );\r\n  const dispatchEvent = useCallback(\r\n    (detail) => {\r\n      const event = new CustomEvent<any>(eventId, { detail });\r\n      window.dispatchEvent(event);\r\n    },\r\n    [eventId]\r\n  );\r\n  useEffect(() => {\r\n    window[`dispatch_${eventId}_event`] = dispatchEvent;\r\n    window.addEventListener(eventId, onMessage);\r\n    // window.addEventListener(\"message\", onMessage);\r\n    return () => {\r\n      window.removeEventListener(eventId, onMessage);\r\n      // window.removeEventListener(\"message\", onMessage);\r\n    };\r\n  }, [dispatchEvent, eventId, onMessage]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setLoading(true);\r\n        const loaders: Script[] = [\r\n          {\r\n            name: \"systemjs\",\r\n            src: \"https://unpkg.com/systemjs/dist/system.min.js\",\r\n            code: `try{${systemjs}}catch(e){}`,\r\n          },\r\n          {\r\n            name: \"systemjs-extra-amd\",\r\n            src: \"https://unpkg.com/systemjs/dist/extras/amd.min.js\",\r\n            code: systemjsAmd,\r\n          },\r\n        ];\r\n        const newScripts = await Promise.all(\r\n          scripts.map(async (script) => {\r\n            const code = await getCode(script.src!);\r\n            script.code = code;\r\n            if (script.types) {\r\n              const typeCodes = await Promise.all(\r\n                script.types.map(async (url) => await getCode(url))\r\n              );\r\n              script.typeCode = typeCodes.join(\";\");\r\n            }\r\n            return script;\r\n          })\r\n        );\r\n        const newStyles = await Promise.all(\r\n          styles.map(async (style) => {\r\n            const code = await getCode(style.href!);\r\n            style.code = code;\r\n            return style;\r\n          })\r\n        );\r\n        imports.current = Object.fromEntries(\r\n          newScripts.map((e) => [\r\n            e.name,\r\n            URL.createObjectURL(\r\n              new Blob([e.code || \"\"], { type: \"text/javascript\" })\r\n            ),\r\n          ])\r\n        );\r\n        cssCode.current = newStyles.map((e) => e.code).join(\"\");\r\n        setScripts([...newScripts]);\r\n        setStyles([...newStyles]);\r\n        loadersCode.current = loaders.map((e) => e.code).join(\";\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n      run(pCode);\r\n    })();\r\n  }, []);\r\n\r\n  const ref = useRef<HTMLIFrameElement>(null);\r\n  const editorRef = useRef<TypeScriptRef>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [horizontalMaxSize, setHorizontalMaxSize] = useState<number>(9999);\r\n  const [verticalMaxSize, setVerticalMaxSize] = useState<number>(9999);\r\n  const caclSize = useCallback(() => {\r\n    setHorizontalMaxSize(\r\n      containerRef.current!.clientWidth - HORIZONTAL_BAR_SIZE\r\n    );\r\n    setVerticalMaxSize(containerRef.current!.clientHeight - VERTICAL_BAR_SIZE);\r\n  }, []);\r\n  const [consoleHeight, setConsoleHeight] = useState<number>(0);\r\n  const caclConsoleHeight = (containerHeight) => {\r\n    setConsoleHeight(containerHeight - HORIZONTAL_BAR_SIZE);\r\n  };\r\n  useEffect(() => {\r\n    let height = 0;\r\n    if (typeof pageDefaultSize === \"string\") {\r\n      if (pageDefaultSize.includes(\"%\")) {\r\n        height =\r\n          containerRef.current!.clientHeight *\r\n          (1 - parseFloat(pageDefaultSize.replace(\"%\", \"\")) / 100);\r\n      }\r\n    } else if (typeof pageDefaultSize === \"number\") {\r\n      height = containerRef.current!.clientHeight - pageDefaultSize;\r\n    }\r\n    caclConsoleHeight(height);\r\n    caclSize();\r\n    window.addEventListener(\"resize\", caclSize);\r\n    return () => window.removeEventListener(\"resize\", caclSize);\r\n  }, [caclSize, pageDefaultSize]);\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"sand-box\"\r\n        ref={containerRef}\r\n        style={{ background: \"#fff\", height: `100vh` }}\r\n      >\r\n        <SplitPane\r\n          onDragStarted={() => setDragging(true)}\r\n          onDragFinished={() => setDragging(false)}\r\n          pane1Style={{ position: \"relative\" }}\r\n          pane2Style={{ position: \"relative\" }}\r\n          split=\"vertical\"\r\n          defaultSize={`50%`}\r\n          maxSize={horizontalMaxSize}\r\n        >\r\n          <div style={{ height: `100%` }} key=\"code\">\r\n            <CodeEditor.TypeScript\r\n              ref={editorRef}\r\n              defaultValue={pCode}\r\n              libs={libs}\r\n              extraLibs={extraLibs}\r\n              onChange={debounce(run, 800)}\r\n              {...props}\r\n            />\r\n          </div>\r\n          <SplitPane\r\n            onChange={(height) => {\r\n              caclConsoleHeight(containerRef.current!.clientHeight - height);\r\n            }}\r\n            onDragStarted={() => setDragging(true)}\r\n            onDragFinished={() => setDragging(false)}\r\n            pane1Style={{ position: \"relative\" }}\r\n            split=\"horizontal\"\r\n            defaultSize={pageDefaultSize}\r\n            maxSize={verticalMaxSize}\r\n            minSize={0}\r\n          >\r\n            <div key=\"preview\" style={{ width: `100%` }}>\r\n              {!loading && (\r\n                <iframe\r\n                  style={{\r\n                    height: `100%`,\r\n                    width: `100%`,\r\n                    pointerEvents: dragging ? \"none\" : \"initial\",\r\n                  }}\r\n                  title=\"sb-preview\"\r\n                  ref={ref}\r\n                />\r\n              )}\r\n            </div>\r\n            <div\r\n              key=\"console\"\r\n              style={{\r\n                height: consoleHeight,\r\n                overflow: \"auto\",\r\n                padding: 8,\r\n                boxSizing: \"border-box\",\r\n              }}\r\n            >\r\n              {consoleMessages.map((message, i) => (\r\n                <React.Fragment key={`msg${i}`}>\r\n                  {message.data.map((data, i) => {\r\n                    console.dir(data);\r\n\r\n                    return (\r\n                      <div style={{ paddingBottom: 8 }} key={`msg${i}`}>\r\n                        {typeof data === \"string\" &&\r\n                          message.type === \"error\" &&\r\n                          data && <pre style={{ color: \"red\" }}>{data}</pre>}\r\n                        {typeof data === \"object\" &&\r\n                          message.type === \"log\" &&\r\n                          data && (\r\n                            <ReactJson\r\n                              style={{ position: \"static\" }}\r\n                              collapsed\r\n                              name={null}\r\n                              key={`msg${i}`}\r\n                              src={data}\r\n                            />\r\n                          )}\r\n                        {typeof data === \"object\" &&\r\n                          message.type === \"error\" &&\r\n                          data && (\r\n                            <ReactJson\r\n                              style={{ position: \"static\" }}\r\n                              collapsed={false}\r\n                              name={\"Error\"}\r\n                              key={`msg${i}`}\r\n                              src={{ message: data.message, stack: data.stack }}\r\n                            />\r\n                          )}\r\n                        {data === null && (\r\n                          <span style={{ color: \"purple\" }}>null</span>\r\n                        )}\r\n                        {(typeof data === \"number\" ||\r\n                          typeof data === \"string\") &&\r\n                          message.type === \"log\" && <>{data}</>}\r\n                        {typeof data === \"symbol\" && (\r\n                          <span style={{ color: \"red\" }}>\r\n                            {data.toString()}\r\n                          </span>\r\n                        )}\r\n                        {typeof data === \"function\" && (\r\n                          <span style={{ color: \"gray\" }}>\r\n                            {data.toString()}\r\n                          </span>\r\n                        )}\r\n                        {typeof data === \"undefined\" && (\r\n                          <span style={{ color: \"#d3d3d3\" }}>undefined</span>\r\n                        )}\r\n                        {typeof data === \"boolean\" && (\r\n                          <span style={{ color: \"blue\" }}>\r\n                            {data.toString()}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  {i !== consoleMessages.length - 1 && <ConsoleDivider />}\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n          </SplitPane>\r\n        </SplitPane>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Sandbox;\r\n","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx",["60","61","62","63"],"import React, {\r\n  FC,\r\n  useRef,\r\n  useEffect,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport * as monaco from \"monaco-editor\";\r\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\r\nimport prettier from \"prettier/standalone\";\r\nimport babel from \"prettier/parser-babylon\";\r\nimport gql from \"prettier/parser-graphql\";\r\nimport ts from \"prettier/parser-typescript\";\r\nexport interface CodeEditorProps\r\n  extends monaco.editor.IStandaloneEditorConstructionOptions {\r\n  beforeMount?(monaco: typeof monacoEditor);\r\n  didMount?(\r\n    editor: monaco.editor.IStandaloneCodeEditor,\r\n    monaco: typeof monacoEditor\r\n  );\r\n  onChange?(code: string, event?: monaco.editor.IModelContentChangedEvent);\r\n  defaultValue?: string;\r\n}\r\nconst CodeEditor: FC<CodeEditorProps> & { TypeScript: typeof TypeScript } = ({\r\n  beforeMount,\r\n  onChange,\r\n  ...props\r\n}) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    beforeMount?.(monaco);\r\n    const editor = monaco.editor.create(container.current!, {\r\n      automaticLayout: true,\r\n      minimap: { enabled: false },\r\n      ...props,\r\n    });\r\n    editor.onDidChangeModelContent((event) => {\r\n      onChange?.(editor.getValue(), event);\r\n    });\r\n    return () => {\r\n      editor.dispose();\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div style={{ height: `100%`, width: `100%` }} ref={container} />\r\n    </>\r\n  );\r\n};\r\nexport interface TypeScriptProps extends CodeEditorProps {\r\n  /**\r\n   * ts编辑器外置库\r\n   */\r\n  libs?: { [key: string]: string };\r\n  /**\r\n   * ts自定义d.ts\r\n   */\r\n  extraLibs?: { [key: string]: string };\r\n  /**\r\n   * node_module种的code\r\n   */\r\n  libCode?: { [key: string]: string };\r\n  /**\r\n   * 定义\r\n   */\r\n  defs?: string;\r\n}\r\ninterface ModelRef {\r\n  model: monaco.editor.ITextModel;\r\n  monaco: typeof monaco;\r\n}\r\nexport interface TypeScriptRef extends ModelRef {}\r\nconst TypeScript = forwardRef<TypeScriptRef, TypeScriptProps>(\r\n  (\r\n    {\r\n      defs = \"\",\r\n      defaultValue = ``,\r\n      libs = {},\r\n      extraLibs = {},\r\n      libCode = {},\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const model = useRef<monaco.editor.ITextModel>();\r\n    const monacoRef = useRef<typeof monaco>();\r\n    if (!model.current) {\r\n      //   debugger\r\n      model.current = monaco.editor.createModel(\r\n        defaultValue,\r\n        \"typescript\",\r\n        monaco.Uri.file(\"/index.tsx\")\r\n      );\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n      model: model.current!,\r\n      monaco: monacoRef.current!,\r\n    }));\r\n    useEffect(() => {\r\n      return () => {\r\n        model.current!.dispose();\r\n      };\r\n    }, []);\r\n    const loadLibs = () => {\r\n      monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n        defs,\r\n        `file:///node_modules/@types/index.d.ts`\r\n      );\r\n      Object.entries(libs).map(([name, code]) => {\r\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n          code,\r\n          `file:///node_modules/@types/${name}/index.d.ts`\r\n        );\r\n      });\r\n      Object.entries(extraLibs).map(([name, code]) => {\r\n        monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n          code,\r\n          `file:///node_modules/@types/${name}`\r\n        );\r\n      });\r\n    };\r\n    useEffect(() => {\r\n      loadLibs();\r\n      props.onChange?.(model.current?.getValue()!);\r\n      return () => {};\r\n    }, [libs]);\r\n    return (\r\n      <CodeEditor\r\n        model={model.current}\r\n        didMount={() => {}}\r\n        beforeMount={(monaco) => {\r\n          monacoRef.current = monaco;\r\n          const compilerDefaults: monaco.languages.typescript.CompilerOptions = {\r\n            baseUrl: \"file:///node_modules/@types/\",\r\n            allowSyntheticDefaultImports: true,\r\n            jsx: monaco.languages.typescript.JsxEmit.React,\r\n            experimentalDecorators: true,\r\n            noEmit: true,\r\n            allowJs: true,\r\n            types: [\"react\"],\r\n          };\r\n\r\n          monaco.languages.typescript.typescriptDefaults.setCompilerOptions(\r\n            compilerDefaults\r\n          );\r\n\r\n          monaco.languages.typescript.typescriptDefaults.setEagerModelSync(\r\n            true\r\n          );\r\n          const prettierOptions = {\r\n            provideDocumentFormattingEdits(model) {\r\n              return [\r\n                {\r\n                  range: model.getFullModelRange(),\r\n                  text: prettier.format(model.getValue(), {\r\n                    trailingComma: \"all\",\r\n                    jsxSingleQuote: false,\r\n                    semi: true,\r\n                    plugins: [babel, ts, gql],\r\n                    arrowParens: \"always\",\r\n                    bracketSpacing: true,\r\n                    htmlWhitespaceSensitivity: \"css\",\r\n                    insertPragma: false,\r\n                    jsxBracketSameLine: true,\r\n                    printWidth: 80,\r\n                    proseWrap: \"preserve\",\r\n                    quoteProps: \"as-needed\",\r\n                    requirePragma: false,\r\n                    singleQuote: false,\r\n                    tabWidth: 2,\r\n                    useTabs: false,\r\n                    vueIndentScriptAndStyle: false,\r\n                  }),\r\n                },\r\n              ];\r\n            },\r\n          };\r\n          monaco.languages.registerDocumentFormattingEditProvider(\r\n            \"typescript\",\r\n            prettierOptions\r\n          );\r\n          loadLibs();\r\n        }}\r\n        scrollbar={{}}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nCodeEditor.TypeScript = TypeScript;\r\nexport default CodeEditor;\r\n","C:\\all-project\\sandbox\\src\\react-sandbox\\util.ts",[],"C:\\all-project\\sandbox\\src\\react-sandbox\\useUUID.tsx",["64"],"import { useRef } from \"react\";\r\n\r\nexport default (len = 8, radix = 16) => {\r\n  return useRef(generateUUID(len , radix )).current;\r\n};\r\n\r\nexport function generateUUID(len = 8, radix = 16): string {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".split(\r\n    \"\"\r\n  );\r\n  const value: string[] = [];\r\n  let i = 0;\r\n  radix = radix || chars.length;\r\n\r\n  if (len) {\r\n    // Compact form\r\n    for (i = 0; i < len; i++) value[i] = chars[0 | (Math.random() * radix)];\r\n  } else {\r\n    // rfc4122, version 4 form\r\n    let r;\r\n\r\n    // rfc4122 requires these characters\r\n    /* eslint-disable-next-line */\r\n    value[8] = value[13] = value[18] = value[23] = \"-\";\r\n    value[14] = \"4\";\r\n\r\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n    // per rfc4122, sec. 4.1.5\r\n    for (i = 0; i < 36; i++) {\r\n      if (!value[i]) {\r\n        r = 0 | (Math.random() * 16);\r\n        value[i] = chars[i === 19 ? (r & 0x3) | 0x8 : r];\r\n      }\r\n    }\r\n  }\r\n\r\n  return value.join(\"\");\r\n}\r\n","C:\\all-project\\sandbox\\src\\react-sandbox\\ConsoleDivider.tsx",[],"C:\\all-project\\sandbox\\src\\react-sandbox\\babelPlugins.tsx",["65","66"],"import { generateUUID } from \"./useUUID\";\r\nimport template from \"@babel/template\";\r\nimport generate from \"@babel/generator\";\r\nimport { parseExpression, parse } from \"@babel/parser\";\r\nimport * as Babel from \"@babel/standalone\";\r\nBabel.registerPlugin(\"maxium-count\", () => {\r\n  const DeadCycle = (path) => {\r\n    const uuid = generateUUID();\r\n    const uuidIncresment = template.ast(`${uuid}++`);\r\n    const uuidJudge = template.ast(`\r\n        if(${uuid}>999){\r\n          document.body.innerHTML=\\`<pre id=\"root\" style=\"color:red;font-weight:bold\" >\r\n  ${generate(path.node).code}\r\n  超出最大循环限制(max:999)\r\n          </pre>\\`;\r\n          console.error(\\`${generate(path.node).code}\r\n超出最大循环限制(max:999)\\`)\r\n          throw new Error('超出最大循环限制')\r\n        }\r\n      `);\r\n    const blocks: any[] = path.node.body.body;\r\n    blocks.unshift(uuidJudge);\r\n    blocks.unshift(uuidIncresment);\r\n    // const clearUUID = template.ast(`${uuid}=0`);\r\n    const insertUUID = template.ast(`let ${uuid}=0`);\r\n    const parentBody = path.parent.body;\r\n    for (let i = 0; i < parentBody.length; i++) {\r\n      const node = parentBody[i];\r\n      if (node === path.node) {\r\n        // parentBody.splice(i + 1, 0, clearUUID);\r\n        parentBody.splice(i, 0, insertUUID);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n  return {\r\n    visitor: {\r\n      WhileStatement: DeadCycle,\r\n      DoWhileStatement: DeadCycle,\r\n      ForInStatement: DeadCycle,\r\n      ForOfStatement: DeadCycle,\r\n      ForStatement: DeadCycle,\r\n    },\r\n  };\r\n});\r\n//@deprecated\r\n//不完善还需要优化\r\n// Babel.registerPlugin(\"catch-error\", () => {\r\n//   // console.log(functionMap,'functionMap')\r\n//   const CatchError = (path) => {\r\n//     //匿名函数不存在递归问题\r\n//     if (path.type !== \"FunctionDeclaration\" && !path.parent.id) {\r\n//       return;\r\n//     }\r\n//     const uuid = generateUUID();\r\n//     const uuidIncresment = template.ast(`${uuid}++`);\r\n//     const uuidJudge = template.ast(`\r\n//     if(${uuid}>999){\r\n//         document.body.innerHTML=\\`<pre id=\"root\" style=\"color:red;font-weight:bold\" >\r\n//         ${generate(path.node).code}\r\n//         超出最大递归限制(max:999)\r\n//         </pre>\\`;\r\n//         console.error(\\`${generate(path.node).code}\r\n//         超出最大循环限制(max:999)\\`)\r\n//         throw new Error('超出最大递归限制')\r\n//     }\r\n//     `);\r\n//     //统一函数格式\r\n//     //箭头函数的情况\r\n//     if (path.type === \"ArrowFunctionExpression\") {\r\n//       //hash表记录uuid,此处需要想办法完善\r\n//       //   if( path.parent.id){\r\n//       //     // .uuid = uuid;\r\n//       //   }\r\n\r\n//       //如果直接返回值需要包装成block形式\r\n//       if (path.node.body.type !== \"BlockStatement\") {\r\n//         if (path.node.body.type === \"CallExpression\") {\r\n//           //callExpersion需要提出来，然后负责清空变量uuid\r\n//           const uuid = generateUUID();\r\n//           path.node.body = template.ast(`\r\n//             {\r\n//                 const ${uuid}=${generate(path.node.body).code}\r\n//                 return ${uuid}\r\n//             }\r\n//         `);\r\n//         } else {\r\n//           path.node.body = template.ast(`\r\n//             {\r\n//                 return ${generate(path.node.body).code}\r\n//             }\r\n//         `);\r\n//         }\r\n//       }\r\n//     } else {\r\n//       //function情况\r\n//       //   path.node.id.uuid = uuid;\r\n//     }\r\n//     const clearUUID = template.ast(`${uuid}=0`);\r\n//     const insertUUID = template.ast(`var ${uuid}=0`);\r\n//     const blocks: any[] = path.node.body.body;\r\n//     const node =\r\n//       path.type === \"ArrowFunctionExpression\"\r\n//         ? path.parentPath?.parentPath?.node\r\n//         : path.node;\r\n//     blocks.unshift(uuidJudge);\r\n//     blocks.unshift(uuidIncresment);\r\n//     const parentBody =\r\n//       path.type === \"ArrowFunctionExpression\"\r\n//         ? path.parentPath?.parentPath?.parentPath?.node.body\r\n//         : path.parent.body;\r\n//     if (parentBody) {\r\n//       for (let i = 0; i < parentBody.length; i++) {\r\n//         const n = parentBody[i];\r\n//         if (n === node) {\r\n//           parentBody.splice(i + 1, 0, clearUUID);\r\n//           parentBody.splice(i, 0, insertUUID);\r\n//           break;\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   return {\r\n//     visitor: {\r\n//       FunctionExpression: CatchError,\r\n//       ArrowFunctionExpression: CatchError,\r\n//       FunctionDeclaration: CatchError,\r\n//     },\r\n//   };\r\n// });\r\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":15},{"ruleId":"71","severity":1,"message":"76","line":9,"column":13,"nodeType":"73","messageId":"74","endLine":9,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":237,"column":6,"nodeType":"79","endLine":237,"endColumn":8,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":319,"column":6,"nodeType":"79","endLine":319,"endColumn":8,"suggestions":"82"},{"ruleId":"77","severity":1,"message":"83","line":43,"column":6,"nodeType":"79","endLine":43,"endColumn":8,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":109,"column":47,"nodeType":"87","messageId":"88","endLine":109,"endColumn":49},{"ruleId":"85","severity":1,"message":"86","line":115,"column":52,"nodeType":"87","messageId":"88","endLine":115,"endColumn":54},{"ruleId":"77","severity":1,"message":"89","line":126,"column":8,"nodeType":"79","endLine":126,"endColumn":14,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":1,"nodeType":"93","endLine":5,"endColumn":3},{"ruleId":"71","severity":1,"message":"94","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":25},{"ruleId":"71","severity":1,"message":"75","line":4,"column":27,"nodeType":"73","messageId":"74","endLine":4,"endColumn":32},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'parse' is defined but never used.","'setC' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'onChange' and 'pExecute'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["97"],"React Hook useEffect has missing dependencies: 'pCode', 'run', 'scripts', and 'styles'. Either include them or remove the dependency array.",["98"],"React Hook useEffect has missing dependencies: 'beforeMount', 'onChange', and 'props'. Either include them or remove the dependency array. If 'beforeMount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["99"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'loadLibs' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["100"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'parseExpression' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [onChange, pExecute]",{"range":"109","text":"110"},"Update the dependencies array to be: [pCode, run, scripts, styles]",{"range":"111","text":"112"},"Update the dependencies array to be: [beforeMount, onChange, props]",{"range":"113","text":"114"},"Update the dependencies array to be: [libs, loadLibs, props]",{"range":"115","text":"116"},[6618,6620],"[onChange, pExecute]",[9190,9192],"[pCode, run, scripts, styles]",[1300,1302],"[beforeMount, onChange, props]",[3364,3370],"[libs, loadLibs, props]"]