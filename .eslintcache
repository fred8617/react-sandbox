[{"C:\\all-project\\sandbox\\src\\index.tsx":"1","C:\\all-project\\sandbox\\src\\reportWebVitals.ts":"2","C:\\all-project\\sandbox\\src\\App.tsx":"3","C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx":"4","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx":"5"},{"size":455,"mtime":1611543692872,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611537770637,"results":"8","hashOfConfig":"7"},{"size":1273,"mtime":1613615676517,"results":"9","hashOfConfig":"7"},{"size":5888,"mtime":1613610325379,"results":"10","hashOfConfig":"7"},{"size":7959,"mtime":1613612657298,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1naw8n2",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\all-project\\sandbox\\src\\index.tsx",[],["24","25"],"C:\\all-project\\sandbox\\src\\reportWebVitals.ts",[],"C:\\all-project\\sandbox\\src\\App.tsx",["26"],"C:\\all-project\\sandbox\\src\\react-sandbox\\CodeEditor.tsx",["27","28","29","30","31","32"],"import React, {\r\n    FC,\r\n    useRef,\r\n    useEffect,\r\n    forwardRef,\r\n    useImperativeHandle,\r\n  } from \"react\";\r\n  import * as monaco from \"monaco-editor\";\r\n  import * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\r\n  import {\r\n    CodeActionAdaptor,\r\n    FormatHelper,\r\n  } from \"monaco-editor/esm/vs/language/typescript/languageFeatures\";\r\n  import prettier from \"prettier/standalone\";\r\n  import babel from \"prettier/parser-babylon\";\r\n  import gql from \"prettier/parser-graphql\";\r\n  import ts from \"prettier/parser-typescript\";\r\n  export interface CodeEditorProps\r\n    extends monaco.editor.IStandaloneEditorConstructionOptions {\r\n    beforeMount?(monaco: typeof monacoEditor);\r\n    didMount?(\r\n      editor: monaco.editor.IStandaloneCodeEditor,\r\n      monaco: typeof monacoEditor\r\n    );\r\n    onChange?(code: string, event: monaco.editor.IModelContentChangedEvent);\r\n    defaultValue?: string;\r\n  }\r\n  const CodeEditor: FC<CodeEditorProps> & { TypeScript: typeof TypeScript } = ({\r\n    beforeMount,\r\n    onChange,\r\n    ...props\r\n  }) => {\r\n    const container = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n      beforeMount?.(monaco);\r\n      const editor = monaco.editor.create(container.current!, {\r\n        automaticLayout: true,\r\n        minimap: { enabled: false },\r\n        ...props,\r\n      });\r\n      editor.onDidChangeModelContent((event) => {\r\n        onChange?.(editor.getValue(), event);\r\n      });\r\n      return () => {\r\n        editor.dispose();\r\n      };\r\n    }, []);\r\n    return (\r\n      <>\r\n        <div style={{ height: `100%`, width: `100%` }} ref={container} />\r\n      </>\r\n    );\r\n  };\r\n  export interface TypeScriptProps extends CodeEditorProps {\r\n    /**\r\n     * ts编辑器外置库\r\n     */\r\n    libs?: { [key: string]: string };\r\n    /**\r\n     * ts自定义d.ts\r\n     */\r\n    extraLibs?: { [key: string]: string };\r\n    /**\r\n     * node_module种的code\r\n     */\r\n    libCode?: { [key: string]: string };\r\n  }\r\n  interface ModelRef {\r\n    model: monaco.editor.ITextModel;\r\n    monaco: typeof monaco;\r\n  }\r\n  export interface TypeScriptRef extends ModelRef {}\r\n  const TypeScript = forwardRef<TypeScriptRef, TypeScriptProps>(\r\n    (\r\n      { defaultValue = ``, libs = {}, extraLibs = {}, libCode = {}, ...props },\r\n      ref\r\n    ) => {\r\n      const model = useRef<monaco.editor.ITextModel>();\r\n      const monacoRef = useRef<typeof monaco>();\r\n      if (!model.current) {\r\n        //   debugger\r\n        model.current = monaco.editor.createModel(\r\n          defaultValue,\r\n          \"typescript\",\r\n          monaco.Uri.file(\"/index.tsx\")\r\n        );\r\n      }\r\n      useImperativeHandle(ref, () => ({\r\n        model: model.current!,\r\n        monaco: monacoRef.current!,\r\n      }));\r\n      useEffect(() => {\r\n        return () => {\r\n          model.current!.dispose();\r\n        };\r\n      }, []);\r\n      const loadLibs = () => {\r\n        Object.entries(libs).map(([name, code]) => {\r\n          monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n            code,\r\n            `file:///node_modules/@types/${name}/index.d.ts`\r\n          );\r\n        });\r\n        Object.entries(extraLibs).map(([name, code]) => {\r\n          monaco.languages.typescript.typescriptDefaults.addExtraLib(\r\n            code,\r\n            `file:///node_modules/@types/${name}`\r\n          );\r\n        });\r\n      };\r\n      useEffect(() => {\r\n        // debugger\r\n        // console.log(libs);\r\n        // console.log(monaco.languages.typescript.typescriptDefaults);\r\n  \r\n        loadLibs();\r\n  \r\n        return () => {};\r\n      }, [libs]);\r\n      return (\r\n        <CodeEditor\r\n          model={model.current}\r\n          didMount={() => {}}\r\n          beforeMount={(monaco) => {\r\n            monacoRef.current = monaco;\r\n            const compilerDefaults: monaco.languages.typescript.CompilerOptions = {\r\n              baseUrl: \"file:///node_modules/@types/\",\r\n  \r\n              allowSyntheticDefaultImports: true,\r\n              jsx: monaco.languages.typescript.JsxEmit.React,\r\n              experimentalDecorators: true,\r\n              noEmit: true,\r\n              allowJs: true,\r\n              types: [\"react\"],\r\n            };\r\n  \r\n            monaco.languages.typescript.typescriptDefaults.setCompilerOptions(\r\n              compilerDefaults\r\n            );\r\n  \r\n            monaco.languages.typescript.typescriptDefaults.setEagerModelSync(\r\n              true\r\n            );\r\n            const prettierOptions = {\r\n              provideDocumentFormattingEdits(model) {\r\n                return [\r\n                  {\r\n                    range: model.getFullModelRange(),\r\n                    text: prettier.format(model.getValue(), {\r\n                      trailingComma: \"all\",\r\n                      jsxSingleQuote: false,\r\n                      semi: true,\r\n                      plugins: [babel, ts, gql],\r\n                      arrowParens: \"always\",\r\n                      bracketSpacing: true,\r\n                      htmlWhitespaceSensitivity: \"css\",\r\n                      insertPragma: false,\r\n                      jsxBracketSameLine: true,\r\n                      printWidth: 80,\r\n                      proseWrap: \"preserve\",\r\n                      quoteProps: \"as-needed\",\r\n                      requirePragma: false,\r\n                      singleQuote: false,\r\n                      tabWidth: 2,\r\n                      useTabs: false,\r\n                      vueIndentScriptAndStyle: false,\r\n                    }),\r\n                  },\r\n                ];\r\n              },\r\n            };\r\n            monaco.languages.registerDocumentFormattingEditProvider(\r\n              \"typescript\",\r\n              prettierOptions\r\n            );\r\n            loadLibs();\r\n          }}\r\n          scrollbar={{}}\r\n          {...props}\r\n        />\r\n      );\r\n    }\r\n  );\r\n  CodeEditor.TypeScript = TypeScript;\r\n  export default CodeEditor;\r\n  ","C:\\all-project\\sandbox\\src\\react-sandbox\\index.tsx",["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":17,"nodeType":"41","messageId":"42","endLine":2,"endColumn":25},{"ruleId":"39","severity":1,"message":"43","line":11,"column":5,"nodeType":"41","messageId":"42","endLine":11,"endColumn":22},{"ruleId":"39","severity":1,"message":"44","line":12,"column":5,"nodeType":"41","messageId":"42","endLine":12,"endColumn":17},{"ruleId":"45","severity":1,"message":"46","line":47,"column":8,"nodeType":"47","endLine":47,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":98,"column":49,"nodeType":"51","messageId":"52","endLine":98,"endColumn":51},{"ruleId":"49","severity":1,"message":"50","line":104,"column":54,"nodeType":"51","messageId":"52","endLine":104,"endColumn":56},{"ruleId":"45","severity":1,"message":"53","line":119,"column":10,"nodeType":"47","endLine":119,"endColumn":16,"suggestions":"54"},{"ruleId":"39","severity":1,"message":"55","line":7,"column":3,"nodeType":"41","messageId":"42","endLine":7,"endColumn":10},{"ruleId":"45","severity":1,"message":"56","line":218,"column":6,"nodeType":"47","endLine":218,"endColumn":8,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'CodeActionAdaptor' is defined but never used.","'FormatHelper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'beforeMount', 'onChange', and 'props'. Either include them or remove the dependency array. If 'beforeMount' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["60"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'loadLibs'. Either include it or remove the dependency array.",["61"],"'useMemo' is defined but never used.","React Hook useEffect has missing dependencies: 'pCode', 'run', 'scripts', and 'styles'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [beforeMount, onChange, props]",{"range":"69","text":"70"},"Update the dependencies array to be: [libs, loadLibs]",{"range":"71","text":"72"},"Update the dependencies array to be: [pCode, run, scripts, styles]",{"range":"73","text":"74"},[1509,1511],"[beforeMount, onChange, props]",[3546,3552],"[libs, loadLibs]",[6210,6212],"[pCode, run, scripts, styles]"]